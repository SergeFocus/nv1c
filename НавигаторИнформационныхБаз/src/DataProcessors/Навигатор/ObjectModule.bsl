Перем мСоответствиеКартинок;

#Область Процедуры

Процедура ДобавитьПользователейБазы(СтруктураМетаданных)

	ИмяКоллекции = "Пользователи";
	ИмяЭлементаКоллекции = "Пользователь";

	НомерКартинки = 49;

	стр_Коллекция = СтруктураМетаданных.Строки.Добавить();

	стр_Коллекция.ИмяКоллекции = ИмяКоллекции;
	стр_Коллекция.ИмяЭлементаКоллекции = ИмяЭлементаКоллекции;
	стр_Коллекция.Имя = ИмяКоллекции;
	стр_Коллекция.Представление = ИмяКоллекции;
	стр_Коллекция.Синоним = ИмяКоллекции;
	стр_Коллекция.НомерКартинки = НомерКартинки;
	стр_Коллекция.ТипЗаписи = "КоллекцияОбъектовМетаданных";

	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();

	Для каждого ПользовательБазы Из ВсеПользователи Цикл

		стр_ОбъектМетаданных = стр_Коллекция.Строки.Добавить();
		стр_ОбъектМетаданных.ИмяКоллекции = ИмяКоллекции;
		стр_ОбъектМетаданных.ИмяЭлементаКоллекции = ИмяЭлементаКоллекции;
		стр_ОбъектМетаданных.Имя = ПользовательБазы.Имя;
		стр_ОбъектМетаданных.Представление = ПользовательБазы.Имя;
		стр_ОбъектМетаданных.Синоним = ПользовательБазы.ПолноеИмя;
		стр_ОбъектМетаданных.ТипЗаписи = "ПользовательИнформационнойБазы";
		стр_ОбъектМетаданных.НомерКартинки = НомерКартинки;

	КонецЦикла;

	стр_Коллекция.Строки.Сортировать("Имя");

КонецПроцедуры

Процедура ДобавитьКоллекциюОбъектовМетаданных(СтруктураМетаданных,
		СвойстваКоллекции)

	ИмяКоллекции = СвойстваКоллекции.ИмяКоллекции;

	ЧастиИмяКоллекции = РазложитьСтрокуВМассивПодстрок(ИмяКоллекции, ".");

	стр_Группа = Неопределено;

	Если ЧастиИмяКоллекции.Количество() > 1 Тогда

		ИмяГруппы = ЧастиИмяКоллекции[0]; // "Общие"
		ИмяКоллекции = ЧастиИмяКоллекции[1]; // "Картинки"
		СтрокиСтруктураМетаданных = СтруктураМетаданных.Строки.НайтиСтроки(Новый Структура("ТипЗаписи, Имя", "ГруппаКоллекцийОбъектовМетаданных", ИмяГруппы));

		Если СтрокиСтруктураМетаданных.Количество() = 0 Тогда

			стр_Группа = СтруктураМетаданных.Строки.Добавить();
			стр_Группа.ТипЗаписи = "ГруппаКоллекцийОбъектовМетаданных";
			стр_Группа.ИмяКоллекции = ИмяГруппы;
			стр_Группа.ИмяЭлементаКоллекции = ИмяГруппы;
			стр_Группа.Имя = ИмяГруппы;
			стр_Группа.Представление = ИмяГруппы;
			стр_Группа.Синоним = ИмяГруппы;
			стр_Группа.НомерКартинки = 2;

		Иначе
			стр_Группа = СтрокиСтруктураМетаданных[0];
		КонецЕсли;

	КонецЕсли;

	Если стр_Группа = Неопределено Тогда
		стр_Коллекция = СтруктураМетаданных.Строки.Добавить();
	Иначе
		стр_Коллекция = стр_Группа.Строки.Добавить();
	КонецЕсли;

	стр_Коллекция.ТипЗаписи = "КоллекцияОбъектовМетаданных";
	стр_Коллекция.ИмяКоллекции = ИмяКоллекции;
	стр_Коллекция.ИмяЭлементаКоллекции = СвойстваКоллекции.ИмяЭлементаКоллекции;
	стр_Коллекция.Имя = ИмяКоллекции;
	стр_Коллекция.Представление = ИмяКоллекции;
	стр_Коллекция.Синоним = СвойстваКоллекции.СинонимКоллекции;
	стр_Коллекция.НомерКартинки = СвойстваКоллекции.НомерКартинки;

	Для каждого ОбъектМд Из Метаданные[ИмяКоллекции] Цикл

		стр_ОбъектМетаданных = стр_Коллекция.Строки.Добавить();
		стр_ОбъектМетаданных.ИмяКоллекции = ИмяКоллекции;
		стр_ОбъектМетаданных.ИмяЭлементаКоллекции = СвойстваКоллекции.ИмяЭлементаКоллекции;
		стр_ОбъектМетаданных.Имя = ОбъектМд.Имя;
		стр_ОбъектМетаданных.Представление = ОбъектМд.Имя;
		стр_ОбъектМетаданных.Синоним = ОбъектМд.Синоним;
		стр_ОбъектМетаданных.Комментарий = ОбъектМд.Комментарий;
		стр_ОбъектМетаданных.ТипЗаписи = "ОбъектМетаданных";
		стр_ОбъектМетаданных.НомерКартинки = СвойстваКоллекции.НомерКартинки;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(ОписаниеКоллекции,
		ИмяКоллекции, ИмяЭлементаКоллекции, СинонимКоллекции, НомерКартинки = 0)

	СтрокаТбл = ОписаниеКоллекции.Добавить();
	СтрокаТбл.ИмяКоллекции = ИмяКоллекции;
	СтрокаТбл.ИмяЭлементаКоллекции = ИмяЭлементаКоллекции;
	СтрокаТбл.СинонимКоллекции = СинонимКоллекции;
	СтрокаТбл.НомерКартинки = НомерКартинки;

КонецПроцедуры

Процедура ДобавитьВИзбранное(Ссылка) Экспорт

	стр_ИзбранныеЭлементы = ЭтотОбъект.ИзбранныеЭлементы.Добавить();
	стр_ИзбранныеЭлементы.ИдЗаписи = Новый УникальныйИдентификатор();
	стр_ИзбранныеЭлементы.Ссылка = Ссылка;
	стр_ИзбранныеЭлементы.Представление = Ссылка;

КонецПроцедуры

// Добавляет имя объекта метаданных в перечень корреспондирующих полей регистра бухгалтерии.
//
// Параметры:
//	КоррПоля - Структура, описание корреспондирующих полей регистра бухгалтерии (См. Тип_КоррПоляРегистраБухгалтерии()). 
//	ИмяПеречня - Строка, имя перечня полей (например: "Измерения"). 
//	ИмяОбъектаМетаданных - Строка, имя объекта метаданных (например: "Организация").
//
Процедура ЗапомнитьКоррПолеРегистраБухгалтерии(КоррПоля, ИмяПеречня,
		ИмяОбъектаМетаданных)

	Если КоррПоля[ИмяПеречня].Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
		КоррПоля[ИмяПеречня].Добавить(ИмяОбъектаМетаданных);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСоответствиеКартинок()

	мСоответствиеКартинок = Новый Соответствие;
	мСоответствиеКартинок.Вставить("Пользователь", 0);
	мСоответствиеКартинок.Вставить("Конфигурация", 1);
	мСоответствиеКартинок.Вставить("ОбщиеОбъекты", 2);
	мСоответствиеКартинок.Вставить("Константа", 3);
	мСоответствиеКартинок.Вставить("Справочник", 4);
	мСоответствиеКартинок.Вставить("Документ", 5);
	мСоответствиеКартинок.Вставить("ЖурналДокументов", 6);
	мСоответствиеКартинок.Вставить("Перечисление", 7);
	мСоответствиеКартинок.Вставить("Отчет", 8);
	мСоответствиеКартинок.Вставить("Обработка", 9);
	мСоответствиеКартинок.Вставить("ПланВидовХарактеристик", 10);
	мСоответствиеКартинок.Вставить("ПланСчетов", 11);
	мСоответствиеКартинок.Вставить("ПланВидовРасчета", 12);
	мСоответствиеКартинок.Вставить("РегистрСведений", 13);
	мСоответствиеКартинок.Вставить("РегистрНакопления", 14);
	мСоответствиеКартинок.Вставить("РегистрБухгалтерии", 15);
	мСоответствиеКартинок.Вставить("РегистрРасчета", 16);
	мСоответствиеКартинок.Вставить("БизнесПроцесс", 17);
	мСоответствиеКартинок.Вставить("Задача", 18);
	мСоответствиеКартинок.Вставить("ВнешнийИсточникДанных", 19);
	мСоответствиеКартинок.Вставить("Подсистема", 20);
	мСоответствиеКартинок.Вставить("ОбщийМодуль", 21);
	мСоответствиеКартинок.Вставить("ПараметрСеанса", 22);
	мСоответствиеКартинок.Вставить("Роль", 23);
	мСоответствиеКартинок.Вставить("ОбщиеРеквизиты", 24);
	мСоответствиеКартинок.Вставить("ПланыОбмена", 25);
	мСоответствиеКартинок.Вставить("КритерииОтбора", 26);
	мСоответствиеКартинок.Вставить("ПодпискиНаСобытия", 27);
	мСоответствиеКартинок.Вставить("РегламентныеЗадания", 28);
	мСоответствиеКартинок.Вставить("ФункциональныеОпции", 29);
	мСоответствиеКартинок.Вставить("ПараметрыФункциональныхОпций", 30);
	мСоответствиеКартинок.Вставить("ОпределяемыеТипы", 31);
	мСоответствиеКартинок.Вставить("ХранилищаНастроек", 32);
	мСоответствиеКартинок.Вставить("ОбщиеФормы", 33);
	мСоответствиеКартинок.Вставить("ОбщиеКоманды", 34);
	мСоответствиеКартинок.Вставить("ГруппыКоманд", 35);
	мСоответствиеКартинок.Вставить("ОбщиеМакеты", 36);
	мСоответствиеКартинок.Вставить("ОбщиеКартинки", 37);
	мСоответствиеКартинок.Вставить("XDTOПакеты", 38);
	мСоответствиеКартинок.Вставить("WebСервисы", 39);
	мСоответствиеКартинок.Вставить("HTTPСервисы", 40);
	мСоответствиеКартинок.Вставить("WSСсылки", 41);
	мСоответствиеКартинок.Вставить("ЭлементыСтиля", 42);
	мСоответствиеКартинок.Вставить("Язык", 43);
	мСоответствиеКартинок.Вставить("СтандартныйРеквизит", 44);
	мСоответствиеКартинок.Вставить("Реквизит", 45);
	мСоответствиеКартинок.Вставить("ТабичнаяЧасть", 46);
	мСоответствиеКартинок.Вставить("Измерение", 47);
	мСоответствиеКартинок.Вставить("Ресурс", 48);
	мСоответствиеКартинок.Вставить("Пользователь", 49);

КонецПроцедуры
#КонецОбласти

#Область Функции

Функция ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки) Экспорт

	Результат = "";
	ПустойРезультат = "";

	#Область Предусловия

	Если Не ЗначениеЗаполнено(ИмяТекущейФормы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяФормыОбработки) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	ЧастиСтроки = РазложитьСтрокуВМассивПодстрок(ИмяТекущейФормы, ".");

	Результат = ПодставитьПараметрыВСтроку("%1.%2.%3.%4", ЧастиСтроки[0], ЧастиСтроки[1], ЧастиСтроки[2], ИмяФормыОбработки);

	Возврат Результат;

КонецФункции

Функция КраткаяИнформацияОКонфигурации() Экспорт

	Результат = "";
	Результат = Метаданные.КраткаяИнформация;

	Возврат Результат;

КонецФункции

// Формирует дерево структуры метаданных конфигурации.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	
Функция СтруктураМетаданныхКонфигурации() Экспорт

	СтруктураМетаданных = Тип_СтруктураМетаданныхКонфигурации();
	СтруктураМетаданных.Строки.Очистить();

	ВсеКоллекции = КоллекцииОбъектовМетаданных();

	Для каждого Коллекция Из ВсеКоллекции Цикл
		ДобавитьКоллекциюОбъектовМетаданных(СтруктураМетаданных, Коллекция);
	КонецЦикла;

	Результат = СтруктураМетаданных;

	Возврат Результат;

КонецФункции

Функция КоллекцииОбъектовМетаданных()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяКоллекции");
	Результат.Колонки.Добавить("ИмяЭлементаКоллекции");
	Результат.Колонки.Добавить("СинонимКоллекции");
	Результат.Колонки.Добавить("НомерКартинки");

	// Общие
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.Подсистемы", "Подсистема", "Подсистемы", 20);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеМодули", "ОбщийМодуль", "Общие модули", 21);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПараметрыСеанса", "ПараметрСеанса", "Параметры сеанса", 22);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.Роли", "Роль", "Роли", 23);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеРеквизиты", "ОбщийРеквизит", "Общие реквизиты", 24);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПланыОбмена", "ПланОбмена", "Планы обмена", 25);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.КритерииОтбора", "КритерийОтбора", "Критерии отбора", 26);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПодпискиНаСобытия", "ПодпискаНаСобытие", "Подписки на события", 27);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.РегламентныеЗадания", "РегламентноеЗадание", "Регламентные задания", 28);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ФункциональныеОпции", "ФункциональнаяОпция", "Функциональные опции", 29);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПараметрыФункциональныхОпций", "ПараметрФункциональнойОпции", "Параметры функциональных опций", 30);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОпределяемыеТипы", "ОпределяемыйТип", "Определяемые типы", 31);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ХранилищаНастроек", "ХранилищеНастроек", "Хранилища настроек", 32);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеФормы", "ОбщаяФорма", "Общие формы", 33);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеКоманды", "ОбщаяКоманда", "Общие команды", 34);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ГруппыКоманд", "ГруппаКоманд", "Группы команд", 35);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеМакеты", "ОбщийМакет", "Общие макеты", 36);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеКартинки", "ОбщаяКартинка", "Общие картинки", 37);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПакетыXDTO", "ПакетXDTO", "XDTO-пакеты", 38);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.WebСервисы", "WebСервис", "Web-сервисы", 39);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.HTTPСервисы", "HTTPСервис", "HTTP-сервисы", 40);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.WSСсылки", "WSСсылка", "WS-ссылки", 41);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ЭлементыСтиля", "ЭлементСтиля", "Элементы стиля", 42);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.Языки", "Язык", "Языки", 43);

	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Константы", "Константа", "Константы", 3);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Справочники", "Справочник", "Справочники", 4);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Документы", "Документ", "Документы", 5);
	//ДобавитьЗаписьОписанияКоллекцииОМ(Результат, "Документы.НумераторыДокументов", "НумераторДокументов", "Нумераторы");
	//ДобавитьЗаписьОписанияКоллекцииОМ(Результат, "Документы.Последовательности", "Последовательность", "Последовательности");
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ЖурналыДокументов", "ЖурналДокументов", "Журналы документов", 6);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Перечисления", "Перечисление", "Перечисления", 7);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Отчеты", "Отчет", "Отчеты", 8);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Обработки", "Обработка", "Обработки", 9);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ПланыВидовХарактеристик", "ПланВидовХарактеристик", "Планы видов характеристик", 10);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ПланыСчетов", "ПланСчетов", "Планы счетов", 11);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ПланыВидовРасчета", "ПланВидовРасчета", "Планы видов расчета", 12);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "РегистрыСведений", "РегистрСведений", "Регистры сведений", 13);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "РегистрыНакопления", "РегистрНакопления", "Регистры накопления", 14);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "РегистрыБухгалтерии", "РегистрБухгалтерии", "Регистры бухгалтерии", 15);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "РегистрыРасчета", "РегистрРасчета", "Регистры расчета", 16);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "БизнесПроцессы", "БизнесПроцесс", "Бизнес-процессы", 17);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Задачи", "Задача", "Задачи", 18);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ВнешниеИсточникиДанных", "ВнешнийИсточникДанных", "Внешние источники данных", 19);

	Возврат Результат;

КонецФункции

// Можно отображать список элементов коллекции.
//
// Параметры:
//	ИмяКоллекции - Строка, имя коллекции объектов метаданных (например: "Справочники").
//
// Возвращаемое значение:
// 	Булево. Истина, отображение списка элементов доступно. Ложь, нет.
//
Функция ОтображениеСпискаЭлементовКоллекцииДоступно(ИмяКоллекции) Экспорт

	#Область Предусловия

	Если Не ЗначениеЗаполнено(ИмяКоллекции) Тогда
		Возврат Ложь;
	КонецЕсли;

	#КонецОбласти

	Если ИмяКоллекции = "Отчеты" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяКоллекции = "Обработки" Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Элемент коллекции - это обработка или отчет.
//
// Параметры:
//	ИмяКоллекции - Строка - имя коллекции объектов метаданных, например: "Отчеты", "Обработки".
//
// Возвращаемое значение:
//	Тип: Булево
//	Для элемента коллекции доступно открытие основной формы.
//
Функция ЭлементКоллекцииЯвляетсяСредствомОбработкиДанных(ИмяКоллекции) Экспорт

	#Область Предусловия

	Если Не ЗначениеЗаполнено(ИмяКоллекции) Тогда
		Возврат Ложь;
	КонецЕсли;

	#КонецОбласти

	Если ИмяКоллекции = "Отчеты" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяКоллекции = "Обработки" Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Определяет имя основной формы объекта - отчета или обработки.
//
// Параметры:
//	СвойстваОбъекта - Структура - свойства объекта, см. Тип_СвойстваОбъектаОбработкиДанных()
//
// Возвращаемое значение:
//	Тип: Строка
//	Имя основной формы объекта обработки данных, например: "Отчет.АА_БанковскиеГарантии.Форма.ФормаОтчета".
//
Функция ИмяОсновнойФормыОбъектаОбработкиДанных(СвойстваОбъекта) Экспорт

	Результат = "";
	ПустойРезультат = "";

	#Область Предусловия

	Если СвойстваОбъекта = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	ИмяОсновнойФормы = Метаданные[СвойстваОбъекта.ИмяКоллекции][СвойстваОбъекта.Имя].ОсновнаяФорма.Имя;

	Если ИмяОсновнойФормы = "ФормаОтчета" Тогда
		ПолноеИмяОсновнойФормыОбъекта = ПодставитьПараметрыВСтроку("%1.%2.%3", СвойстваОбъекта.ИмяЭлементаКоллекции, СвойстваОбъекта.Имя, "Форма");
	Иначе
		ПолноеИмяОсновнойФормыОбъекта = ПодставитьПараметрыВСтроку("%1.%2.Форма.%3", СвойстваОбъекта.ИмяЭлементаКоллекции, СвойстваОбъекта.Имя, ИмяОсновнойФормы);
	КонецЕсли;

	Результат = ПолноеИмяОсновнойФормыОбъекта;

	Возврат Результат;

КонецФункции

// Имя основной таблицы элементов объекта метаданных.
//
// Параметры:
//	ИмяКоллекцииМетаданных - Строка, имя коллекции объекта метаданных (например: "Справочник"). 
//	ИмяОбъектаМетаданных - Строка, имя объекта метаданных (например: "Номенклатура").
//
// Возвращаемое значение:
//	Строка. Имя основной таблицы списка элементов объекта метаданных (например: "Справочник.Номенклатура").
//	
Функция ИмяОсновнойТаблицыЭлементовОбъектаМетаданных(ИмяКоллекцииМетаданных,
		ИмяОбъектаМетаданных) Экспорт

	Результат = "";
	ПустойРезультат = "";

	#Область Предусловия

	Если Не ЗначениеЗаполнено(ИмяКоллекцииМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	Результат = ПодставитьПараметрыВСтроку("%1.%2", ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);

	Возврат Результат;

КонецФункции

Функция ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(ИмяКоллекции,
		ИмяОбъектаМетаданных) Экспорт

	Результат = Новый Структура;
	ПустойРезультат = Неопределено;

	#Область Предусловия

	Если Не ЗначениеЗаполнено(ИмяКоллекции) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Попытка
		ОбъектМд = Метаданные[ИмяКоллекции][ИмяОбъектаМетаданных];
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;

	#КонецОбласти

	Если ИмяКоллекции = "ПланыОбмена" Тогда

	// Стандартные реквизиты
		СтандартныеРеквизиты = Новый Массив;

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];

		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		Если ОбъектМд.ДлинаКода > 0 Тогда

			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЕсли;

		Если ОбъектМд.ДлинаНаименования > 0 Тогда

			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЕсли;

		// ... остальные стандартные реквизиты.
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;
			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;
			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;

			ВидимостьРеквизита = Истина;

			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		// Реквизиты
		Реквизиты = Новый Массив;

		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, СтРеквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);

	ИначеЕсли ИмяКоллекции = "Справочники" Тогда

	// Стандартные реквизиты
		СтандартныеРеквизиты = Новый Массив;

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];

		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		Если ОбъектМд.ДлинаКода > 0 Тогда

			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЕсли;

		Если ОбъектМд.ДлинаНаименования > 0 Тогда

			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЕсли;

		// ... остальные стандартные реквизиты.
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;

			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;

			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;

			ВидимостьРеквизита = Истина;

			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		// Реквизиты
		Реквизиты = Новый Массив;

		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);

	ИначеЕсли ИмяКоллекции = "Перечисления" Тогда

		СтандартныеРеквизиты = Новый Массив;

		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);

	ИначеЕсли ИмяКоллекции = "Документы" Тогда

	// Стандартные реквизиты
		СтандартныеРеквизиты = Новый Массив;

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];

		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Дата"];

		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Номер"];

		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			Если СтРеквизит.Имя = "Номер" Тогда
				Продолжить;
			ИначеЕсли СтРеквизит.Имя = "Дата" Тогда
				Продолжить;
			ИначеЕсли СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;

			ВидимостьРеквизита = Истина;

			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Проведен" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Реквизиты = Новый Массив;

		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);

	ИначеЕсли ИмяКоллекции = "РегистрыСведений"
			Или ИмяКоллекции = "РегистрыНакопления"
			Или ИмяКоллекции = "РегистрыБухгалтерии"
			Или ИмяКоллекции = "РегистрыРасчета" Тогда

		Результат = Новый Структура;

		СтандартныеРеквизиты = Новый Массив;

		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Измерения = Новый Массив;

		Для каждого СтРеквизит Из ОбъектМд["Измерения"] Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			Измерения.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Ресурсы = Новый Массив;

		Для каждого СтРеквизит Из ОбъектМд["Ресурсы"] Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			Ресурсы.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Реквизиты = Новый Массив;

		Для каждого СтРеквизит Из ОбъектМд["Реквизиты"] Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Перерасчеты = Новый Массив;

		Попытка

			Для каждого СтРеквизит Из ОбъектМд["Перерасчеты"] Цикл

				ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
				Реквизиты.Добавить(ПараметрыКолонки);

			КонецЦикла;

		Исключение
		//
		КонецПопытки;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Измерения", Измерения);
		Результат.Вставить("Ресурсы", Ресурсы);
		Результат.Вставить("Реквизиты", Реквизиты);
		Результат.Вставить("Перерасчеты", Перерасчеты);

	ИначеЕсли ИмяКоллекции = "ЖурналыДокументов" Тогда

		СтандартныеРеквизиты = Новый Массив;

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Дата"];
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Номер"];
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			ВидимостьРеквизита = Истина;

			Если СтРеквизит.Имя = "Номер" Тогда
				Продолжить;
			ИначеЕсли СтРеквизит.Имя = "Дата" Тогда
				Продолжить;
			ИначеЕсли СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;

			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Проведен" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Графы = Новый Массив;

		Для каждого СтРеквизит Из ОбъектМд["Графы"] Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			Графы.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Графы", Графы);

	ИначеЕсли ИмяКоллекции = "ПланыСчетов" Тогда

		СтандартныеРеквизиты = Новый Массив;

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];

		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		Если ОбъектМд.ДлинаКода > 0 Тогда

			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЕсли;

		Если ОбъектМд.ДлинаНаименования > 0 Тогда

			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЕсли;

		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;

			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;

			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;

			ВидимостьРеквизита = Истина;

			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Реквизиты = Новый Массив;

		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);

	ИначеЕсли ИмяКоллекции = "ПланыВидовРасчета" Тогда

		СтандартныеРеквизиты = Новый Массив;

		Если ОбъектМд.ДлинаКода > 0 Тогда

			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЕсли;

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];

		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		Если ОбъектМд.ДлинаНаименования > 0 Тогда
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		КонецЕсли;

		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;

			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;

			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;

			ВидимостьРеквизита = Истина;

			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ПериодДействияБазовый" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Реквизиты = Новый Массив;

		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, СтРеквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);

	ИначеЕсли ИмяКоллекции = "ПланыВидовХарактеристик" Тогда

		СтандартныеРеквизиты = Новый Массив;

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];

		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		Если ОбъектМд.ДлинаКода > 0 Тогда

			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЕсли;

		Если ОбъектМд.ДлинаНаименования > 0 Тогда

			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЕсли;

		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;

			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;

			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;

			ВидимостьРеквизита = Истина;

			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ТипЗначения" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Реквизиты = Новый Массив;

		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);

	ИначеЕсли ИмяКоллекции = "Задачи" Тогда

		СтандартныеРеквизиты = Новый Массив;

		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];

		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;

			ВидимостьРеквизита = Истина;

			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Выполнена" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Наименование" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Реквизиты = Новый Массив;

		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		РеквизитыАдресации = Новый Массив;

		Для Каждого Реквизит Из ОбъектМд.РеквизитыАдресации Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			РеквизитыАдресации.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);
		Результат.Вставить("РеквизитыАдресации", РеквизитыАдресации);

	ИначеЕсли ИмяКоллекции = "БизнесПроцессы" Тогда

		СтандартныеРеквизиты = Новый Массив;

		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл

			ВидимостьРеквизита = Истина;

			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл

			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);

		КонецЦикла;

		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает массив имен табличных частей объекта метаданных.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных, объект метаданных конфигурации.
//
// Возвращаемое значение:
//	Массив. Массив элементов типа Строка, имена табличных чатей объекта метаданных.
//	
Функция ИменаТабличныхЧастейОбъектаМетаданных(ОбъектМетаданных) Экспорт

	Результат = Новый Массив;
	ПустойРезультат = Новый Массив;

	#Область Предусловия

	Если ОбъектМетаданных = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Попытка
		ТабличныеЧастиОбъекта = ОбъектМетаданных.ТабличныеЧасти;
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;

	#КонецОбласти

	Для Каждого ТабличнаяЧастьОбъекта Из ОбъектМетаданных.ТабличныеЧасти Цикл

		Результат.Добавить(ТабличнаяЧастьОбъекта.Имя);

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Полное имя указанной табличной части переданного объекта метаданных.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных, метаданные объекта.
//	ИмяТабличнойЧасти - Строка, имя табличной части объекта метаданных (например: "Товары").
//
// Возвращаемое значение:
//	Строка. Полное имя табличной части объекта метаданных (например: "Документ.ПриходнаяНакладная.Товары").
// 			 
Функция ПолноеИмяТабличнойЧастиОбъектаМетаданных(ОбъектМетаданных,
		ИмяТабличнойЧасти) Экспорт

	Результат = "";
	ПустойРезультат = "";

	#Область Предусловия

	Если (ОбъектМетаданных = Неопределено) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	ИмяТипаОбъекта = ИмяТипаОбъектаМетаданных(ОбъектМетаданных);

	Если (Не ЗначениеЗаполнено(ИмяТипаОбъекта)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Результат = ПодставитьПараметрыВСтроку("%1.%2.%3", ИмяТипаОбъекта, ОбъектМетаданных.Имя, ИмяТабличнойЧасти);

	Возврат Результат;

КонецФункции

Функция ИмяТипаОбъектаМетаданных(ОбъектМетаданных)

	Результат = "";
	ПустойРезультат = "";

	#Область Предусловия

	Если (ОбъектМетаданных = Неопределено) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	Если (ЭтоСправочник(ОбъектМетаданных)) Тогда
		Результат = "Справочник";
	ИначеЕсли (ЭтоДокумент(ОбъектМетаданных)) Тогда
		Результат = "Документ";
	ИначеЕсли (ЭтоПланВидовХарактеристик(ОбъектМетаданных)) Тогда
		Результат = "ПланВидовХарактеристик";
	ИначеЕсли (ЭтоПланСчетов(ОбъектМетаданных)) Тогда
		Результат = "ПланСчетов";
	ИначеЕсли (ЭтоПланВидовРасчета(ОбъектМетаданных)) Тогда
		Результат = "ПланВидовРасчета";
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Количество элементов коллекции указанного типа объекта метаданных,
// например, сколько записей в справочнике "Номенклатура".
//
// Параметры:
//	ИмяКоллекцииМетаданных - Строка - имя коллекции метаданных, например: "Справочник", 
//	ИмяОбъектаМетаданных - Строка - имя объекта метаданных, например: "Номенклатура".
//
// Возвращаемое значение:
//	Тип: Число
//	Количество элементов коллекции указанного типа.
//	
Функция КоличествоЭлементовКоллекцииТипаОбъектаМетаданных(ИмяКоллекцииМетаданных,
		ИмяОбъектаМетаданных) Экспорт

	Результат = 0;
	ПустойРезультат = 0;

	#Область Предусловия

	Если Не ЗначениеЗаполнено(ИмяКоллекцииМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	Запрос = КоличествоЭлементовКоллекцииТипаОбъектаМетаданныхЗапрос(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);

	Если Запрос = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	КоличествоЭлементов = Выборка.КоличествоЭлементов;

	Результат = КоличествоЭлементов;

	Возврат Результат;

КонецФункции

Функция КоличествоЭлементовКоллекцииТипаОбъектаМетаданныхЗапрос(ИмяКоллекцииМетаданных,
		ИмяОбъектаМетаданных)

	Результат = Новый Запрос;
	ПустойРезультат = Неопределено;

	ТекстЗапроса = КоличествоЭлементовКоллекцииТипаОбъектаМетаданныхТекстЗапроса(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);

	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Результат.Текст = ТекстЗапроса;

	Возврат Результат;

КонецФункции

Функция КоличествоЭлементовКоллекцииТипаОбъектаМетаданныхТекстЗапроса(ИмяКоллекцииМетаданных,
		ИмяОбъектаМетаданных)

	Результат = "";
	ПустойРезультат = "";

	ИмяОсновнойТаблицы = ИмяОсновнойТаблицыЭлементовОбъектаМетаданных(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);

	Если Не ЗначениеЗаполнено(ИмяОсновнойТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Результат = ПодставитьПараметрыВСтроку("ВЫБРАТЬ КОЛИЧЕСТВО(*) КАК КоличествоЭлементов ИЗ %1 КАК Т", ИмяОсновнойТаблицы);

	Возврат Результат;

КонецФункции

Функция ПредставлениеТипаОбъектаКонфигурации(ОбъектКонфигурации) Экспорт

	Результат = "";

	ИмяТипа = "";

	ОбъектМд = ОбъектКонфигурации.Метаданные();

	Если ЭтоСправочник(ОбъектМд) Тогда
		ИмяТипа = "Справочник";
	ИначеЕсли ЭтоДокумент(ОбъектМд) Тогда
		ИмяТипа = "Документ";
	ИначеЕсли ЭтоПеречисление(ОбъектМд) Тогда
		ИмяТипа = "Перечисление";
	ИначеЕсли ЭтоБизнесПроцесс(ОбъектМд) Тогда
		ИмяТипа = "БизнесПроцесс";
	ИначеЕсли ЭтоЗадача(ОбъектМд) Тогда
		ИмяТипа = "Задача";
	ИначеЕсли ЭтоПланОбмена(ОбъектМд) Тогда
		ИмяТипа = "ПланОбмена";
	ИначеЕсли ЭтоПланВидовХарактеристик(ОбъектМд) Тогда
		ИмяТипа = "ПланВидовХарактеристик";
	ИначеЕсли ЭтоПланСчетов(ОбъектМд) Тогда
		ИмяТипа = "ПланСчетов";
	ИначеЕсли ЭтоВнешнийИсточникДанных(ОбъектМд) Тогда
		ИмяТипа = "ВнешнийИсточникДанных";
	КонецЕсли;

	ИмяМд = ОбъектМд.Имя;

	Результат = ПодставитьПараметрыВСтроку("%1.%2", ИмяТипа, ИмяМд);

	Возврат Результат;

КонецФункции

Функция МетаданныеПользователяИнформационнойБазы() Экспорт

	Результат = Новый Массив;

	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("АутентификацияOpenID"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("АутентификацияОС"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("АутентификацияСтандартная"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ЗапрещеноИзменятьПароль"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ЗащитаОтОпасныхДействий"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("Имя"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ОсновнойИнтерфейс"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("Пароль"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ПарольУстановлен"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ПоказыватьВСпискеВыбора"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ПолноеИмя"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ПользовательОС"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("РазделениеДанных"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("РежимЗапуска"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("Роли"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("СохраняемоеЗначениеПароля"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("УникальныйИдентификатор"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("Язык"));

	Возврат Результат;

КонецФункции

Функция НомерКартинки(ТипОбъекта) Экспорт

	Результат = 0;
	ПустойРезультат = 0;

	#Область Предусловия

	Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	Возврат Результат;

КонецФункции

// Возвращает строку описания типов.
//
// Параметры:
//	Тип - ОписаниеТипов - описание типов.
//
// Возвращаемое значение:
//	Тип значения: Строка
//	Представление описания типов (например: "Справочник.Номенклатура;Справочник.ХарактеристикиНоменклатуры").
//
Функция СтрокаОписанияТипов(Тип) Экспорт

	ПустойРезультат = "";

	#Область Предусловия

	Если Не ЗначениеЗаполнено(Тип) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	СтрокаОписания = "";

	Типы = Тип.Типы();

	Если Типы.Количество() = 1 Тогда

		УдалитьПоследнийРазделитель = Ложь;

		ТипЗначения = Типы[0];

		Если ТипЗначения = ТипЗнч("") Тогда
			СтрокаОписания = ПодставитьПараметрыВСтроку("Строка (%1,%2)", Тип.КвалификаторыСтроки.Длина, ?(Тип.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная, "*", ""));
		ИначеЕсли ТипЗначения = ТипЗнч(0) Тогда
			СтрокаОписания = ПодставитьПараметрыВСтроку("Число (%1,%2,%3)", Тип.КвалификаторыЧисла.Разрядность, Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, ?(Тип.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Любой, "+-", "+"));
		ИначеЕсли ТипЗначения = ТипЗнч(Истина) Тогда
			СтрокаОписания = "Булево";
		ИначеЕсли ТипЗначения = ТипЗнч('00010101') Тогда
			СтрокаОписания = ПодставитьПараметрыВСтроку("Дата (%1)", ?(Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, "Д", ?(Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время, "В", "Д+В")));
		Иначе

			МетаданныеТипаРеквизита = Метаданные.НайтиПоТипу(ТипЗначения);

			Если Не (МетаданныеТипаРеквизита = Неопределено) Тогда

				ПолноеИмяТипа = МетаданныеТипаРеквизита.ПолноеИмя();
				ПредставлениеТипа = ПолноеИмяТипа;

				СтрокаОписания = ПредставлениеТипа;

			Иначе

				СтрокаОписания = Строка(ТипЗначения);

			КонецЕсли;

		КонецЕсли;

	Иначе

		УдалитьПоследнийРазделитель = Истина;

		Для каждого ТипЗначения Из Типы Цикл

			МетаданныеТипаРеквизита = Метаданные.НайтиПоТипу(ТипЗначения);

			Если Не (МетаданныеТипаРеквизита = Неопределено) Тогда

				ПолноеИмяТипа = МетаданныеТипаРеквизита.ПолноеИмя();
				ПредставлениеТипа = ПолноеИмяТипа;

				СтрокаОписания = СтрокаОписания + ПредставлениеТипа + ";";

			ИначеЕсли ТипЗначения = ТипЗнч("") Тогда
				СтрокаОписания = СтрокаОписания
					+ ПодставитьПараметрыВСтроку("Строка (%1,%2)", Тип.КвалификаторыСтроки.Длина, ?(Тип.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная, "*", ""))
					+ ";";
			ИначеЕсли ТипЗначения = ТипЗнч(0) Тогда
				СтрокаОписания = СтрокаОписания
					+ ПодставитьПараметрыВСтроку("Число (%1,%2,%3)", Тип.КвалификаторыЧисла.Разрядность, Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, ?(Тип.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Любой, "+-", "+"))
					+ ";";
			ИначеЕсли ТипЗначения = ТипЗнч(Истина) Тогда
				СтрокаОписания = СтрокаОписания + "Булево" + ";";
			ИначеЕсли ТипЗначения = ТипЗнч('00010101') Тогда
				СтрокаОписания = СтрокаОписания
					+ ПодставитьПараметрыВСтроку("Дата (%1)", ?(Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, "Д", ?(Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время, "В", "Д+В")))
					+ ";";
			Иначе

				СтрокаОписания = СтрокаОписания + Строка(ТипЗначения) + ";";

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если УдалитьПоследнийРазделитель Тогда
		СтрокаОписания = Лев(СтрокаОписания, СтрДлина(СтрокаОписания) - 1);
	КонецЕсли;

	Возврат СтрокаОписания;

КонецФункции

Функция ПолучитьСсылкуНаЭлементИзНавигационнойСсылки(НавигационнаяСсылка) Экспорт

	Результат = Неопределено;
	ПустойРезультат = Неопределено;

	#Область Предусловия

	Если (Не ЗначениеЗаполнено(НавигационнаяСсылка)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
	ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");

	ПредставлениеТипа = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка
		- ПерваяТочка - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа
		+ ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигационнаяСсылка, ВтораяТочка
		+ 5));

	Результат = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);

	Возврат Результат;

КонецФункции

Функция НомерКартинкиДляТипаОбъекта(ТипОбъекта) Экспорт

	Результат = 0;
	ПустойРезультат = Неопределено;

	#Область Предусловия

	Если (Не ЗначениеЗаполнено(ТипОбъекта)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	Результат = мСоответствиеКартинок.Получить(ТипОбъекта);

	Возврат Результат;

КонецФункции

// Максимальное количество субконто плана счетов регистра бухгалтерии.
//
// Параметры:
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный").
//
// Возвращаемое значение:
//	Число. Максимальное количество субконто.  
//
Функция МаксКоличествоСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии) Экспорт
	
	Результат = 0;
	ПустойРезультат = 0;
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Попытка
		МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	Результат = МетаданныеРегистра.ПланСчетов.МаксКоличествоСубконто;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру описания корреспондирующих полей регистра бухгалтерии.
//
// Параметры:
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный").
//
// Возвращаемое значение:
//	Структура. Описание корреспондирующих полей регистра бухгалтерии (См. Тип_КоррПоляРегистраБухгалтерии()).  
//
Функция ПоляРегистраБухгалтерииДтКт(ИмяРегистраБухгалтерии) Экспорт

	Результат = Тип_ПоляРегистраБухгалтерииДтКт();
	ПустойРезультат = Тип_ПоляРегистраБухгалтерииДтКт();

	#Область Предусловия

	Если Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	Попытка
		МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;

	Если Не МетаданныеРегистра.Корреспонденция Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	// Измерения.
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл

		Если Не (Измерение.ПризнакУчета = Неопределено)
				Или Не Измерение.Балансовый Тогда
			ЗапомнитьКоррПолеРегистраБухгалтерии(Результат, "Измерения", Измерение.Имя);
		КонецЕсли;

	КонецЦикла;

	// Ресурсы.
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл

		Если Не (Ресурс.ПризнакУчета = Неопределено) Или Не Ресурс.Балансовый Тогда
			ЗапомнитьКоррПолеРегистраБухгалтерии(Результат, "Ресурсы", Ресурс.Имя);

		КонецЕсли;

	КонецЦикла;

	// Количество видов субконто.
	Результат.МаксКоличествоСубконто = МаксКоличествоСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии);

	Возврат Результат;

КонецФункции
#КонецОбласти

#Область Библиотеки

#Область СтроковыеФункции

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",",
		Знач ПропускатьПустыеСтроки = Неопределено,
		СокращатьНепечатаемыеСимволы = Ложь) Экспорт

	Результат = Новый Массив;

	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;

	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
//
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
		Знач Параметр1, Знач Параметр2 = Неопределено,
		Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено,
		Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено,
		Знач Параметр9 = Неопределено)

	Результат = "";
	Позиция = СтрНайти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = СтрНайти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;

	Возврат Результат;
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//	СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//	Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//	Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//	ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//	В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//	рекомендуется использовать функцию платформы СтрШаблон.
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки, Знач Параметр1,
		Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
		Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено,
		Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено,
		Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт

	ИспользоватьАльтернативныйАлгоритм = СтрНайти(Параметр1, "%")
		Или СтрНайти(Параметр2, "%") Или СтрНайти(Параметр3, "%")
		Или СтрНайти(Параметр4, "%") Или СтрНайти(Параметр5, "%")
		Или СтрНайти(Параметр6, "%") Или СтрНайти(Параметр7, "%")
		Или СтрНайти(Параметр8, "%") Или СтрНайти(Параметр9, "%");

	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;

	Возврат СтрокаПодстановки;

КонецФункции

Функция СтрокаИзМассиваПодстрок(Знач ЧастиСтроки, Знач Разделитель = "",
		ПропускатьПустыеСтроки = Ложь, СокращатьНепечатаемыеСимволы = Ложь) Экспорт

	Результат = "";
	ПустойРезультат = "";

	#Область Предусловия

	Если ЧастиСтроки.Количество() = 0 Тогда
		Возврат ПустойРезультат;
	КонецЕсли;

	#КонецОбласти

	Для каждого ЧастьСтроки Из ЧастиСтроки Цикл

		Если СокращатьНепечатаемыеСимволы Тогда
			ЧастьСтроки = СокрЛП(ЧастьСтроки);
		КонецЕсли;

		Если ПропускатьПустыеСтроки Тогда
			Если Не ЗначениеЗаполнено(ЧастьСтроки) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Результат = Результат + ЧастьСтроки + Разделитель;

	КонецЦикла;

	Если СтрДлина(Разделитель) > 0 Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - СтрДлина(Разделитель));
	КонецЕсли;

	Возврат Результат;

КонецФункции
#КонецОбласти

#КонецОбласти

#Область ОпределениеТиповОбъектовМетаданных

////////////////////////////////////////////////////////////////////////////////
// Функции определения типов объектов метаданных.

// Ссылочные типы данных

// Определяет принадлежность объекта метаданных к общему типу "Документ".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к документам.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является документом.
//
Функция ЭтоДокумент(ОбъектМетаданных) Экспорт

	Возврат Метаданные.Документы.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Справочник".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является справочником.
//
Функция ЭтоСправочник(ОбъектМетаданных) Экспорт

	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Перечисление".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является перечислением.
//
Функция ЭтоПеречисление(ОбъектМетаданных) Экспорт

	Возврат Метаданные.Перечисления.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План обмена".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом обмена.
//
Функция ЭтоПланОбмена(ОбъектМетаданных) Экспорт

	Возврат Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов характеристик".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом видов характеристик.
//
Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных) Экспорт

	Возврат Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Бизнес-процесс".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является бизнес-процессом.
//
Функция ЭтоБизнесПроцесс(ОбъектМетаданных) Экспорт

	Возврат Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Задача".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является задачей.
//
Функция ЭтоЗадача(ОбъектМетаданных) Экспорт

	Возврат Метаданные.Задачи.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План счетов".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом счетов.
//
Функция ЭтоПланСчетов(ОбъектМетаданных) Экспорт

	Возврат Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов расчета".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом видов расчета.
//
Функция ЭтоПланВидовРасчета(ОбъектМетаданных) Экспорт

	Возврат Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных);

КонецФункции

// Регистры

// Определяет принадлежность объекта метаданных к общему типу "Регистр сведений".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром сведений.
//
Функция ЭтоРегистрСведений(ОбъектМетаданных) Экспорт

	Возврат Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Регистр накопления".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром накопления.
//
Функция ЭтоРегистрНакопления(ОбъектМетаданных) Экспорт

	Возврат Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Регистр бухгалтерии".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром бухгалтерии.
//
Функция ЭтоРегистрБухгалтерии(ОбъектМетаданных) Экспорт

	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных);

КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Регистр расчета".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром расчета.
//
Функция ЭтоРегистрРасчета(ОбъектМетаданных) Экспорт

	Возврат Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных);

КонецФункции

// Константы

// Определяет принадлежность объекта метаданных к общему типу "Константа".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является константой.
//
Функция ЭтоКонстанта(ОбъектМетаданных) Экспорт

	Возврат Метаданные.Константы.Содержит(ОбъектМетаданных);

КонецФункции

// Журналы документов

// Определяет принадлежность объекта метаданных к общему типу "Журнал документов".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является журналом документов.
//
Функция ЭтоЖурналДокументов(ОбъектМетаданных) Экспорт

	Возврат Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных);

КонецФункции

// Последовательности

// Определяет принадлежность объекта метаданных к общему типу "Последовательности".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является последовательностью.
//
Функция ЭтоПоследовательность(ОбъектМетаданных) Экспорт

	Возврат Метаданные.Последовательности.Содержит(ОбъектМетаданных);

КонецФункции

// РегламентныеЗадания

// Определяет принадлежность объекта метаданных к общему типу "Регламентные задания".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регламентным заданием.
//
Функция ЭтоРегламентноеЗадание(ОбъектМетаданных) Экспорт

	Возврат Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных);

КонецФункции

// Общие

// Определяет принадлежность объекта метаданных к типу регистр.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является каким-либо регистром.
//
Функция ЭтоРегистр(ОбъектМетаданных) Экспорт

	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);

КонецФункции

Функция ЭтоПодсистема(ОбъектМд) Экспорт

	Результат = Метаданные.Подсистемы.Содержит(ОбъектМд);
	Возврат Результат;

КонецФункции

Функция ЭтоОбщийМодуль(ОбъектМд) Экспорт

	Результат = Метаданные.ОбщиеМодули.Содержит(ОбъектМд);
	Возврат Результат;

КонецФункции

Функция ЭтоПараметрСеанса(ОбъектМд) Экспорт

	Результат = Метаданные.ПараметрыСеанса.Содержит(ОбъектМд);
	Возврат Результат;

КонецФункции

Функция ЭтоОтчет(ОбъектМд) Экспорт

	Результат = Метаданные.Отчеты.Содержит(ОбъектМд);
	Возврат Результат;

КонецФункции

Функция ЭтоОбработка(ОбъектМд) Экспорт

	Результат = Метаданные.Обработки.Содержит(ОбъектМд);
	Возврат Результат;

КонецФункции

Функция ЭтоВнешнийИсточникДанных(ОбъектМд) Экспорт

	Результат = Метаданные.ВнешниеИсточникиДанных.Содержит(ОбъектМд);
	Возврат Результат;

КонецФункции

// Определяет принадлежность объекта метаданных к ссылочному типу.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект ссылочного типа.
//
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт

	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Позиция = СтрНайти(ИмяОбъектаМетаданных, ".");
	Если Позиция > 0 Тогда
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа = "Справочник" Или ИмяБазовогоТипа = "Документ"
			Или ИмяБазовогоТипа = "БизнесПроцесс" Или ИмяБазовогоТипа = "Задача"
			Или ИмяБазовогоТипа = "ПланСчетов" Или ИмяБазовогоТипа = "ПланОбмена"
			Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
			Или ИмяБазовогоТипа = "ПланВидовРасчета";
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции
#КонецОбласти

#Область Типы

Функция Тип_СтруктураМетаданныхКонфигурации() Экспорт

	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("ТипЗаписи"); // Тип записи структуры метаданных конфигурации, например: "КоллекцияОбъектовМетаданных", "ОбъектМетаданных"
	Результат.Колонки.Добавить("ИмяКоллекции"); // Имя коллекции, например: "Справочники"
	Результат.Колонки.Добавить("ИмяЭлементаКоллекции"); // Имя элемента коллекции, например: "Справочник"
	Результат.Колонки.Добавить("Имя"); // Имя объекта метаданных, например: "Номенклатура"
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Синоним"); // Синоним имени объекта метаданных, например: "Номенклатура"
	Результат.Колонки.Добавить("Комментарий"); // Имя объекта метаданных, например: "Номенклатура"
	Результат.Колонки.Добавить("КоличествоЗаписей"); // Количество записей элементов данного вида, например количество записей в справочнике
	Результат.Колонки.Добавить("НомерКартинки");

	Возврат Результат;

КонецФункции

Функция Тип_ЗаписьСтруктурыМетаданныхКонфигурации() Экспорт

	Результат = Новый Структура;

	СтруктураМетаданныхКонфигурации = Тип_СтруктураМетаданныхКонфигурации();

	Для Каждого Колонка Из СтруктураМетаданныхКонфигурации.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(ИмяРеквизита = "",
		Синоним = "", Комментарий = "", ТипЗначенияКолонки = Неопределено,
		Видимость = Ложь) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", ИмяРеквизита);
	Результат.Вставить("Синоним", Синоним);
	Результат.Вставить("Комментарий", Комментарий);
	Результат.Вставить("Видимость", Видимость);

	ПредставлениеТипа = СтрокаОписанияТипов(ТипЗначенияКолонки);
	Результат.Вставить("ПредставлениеТипа", ПредставлениеТипа);

	Возврат Результат;

КонецФункции

Функция Тип_СвойстваОбъектаОбработкиДанных() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИмяКоллекции");
	Результат.Вставить("ИмяЭлементаКоллекции");
	Результат.Вставить("Имя");

	Возврат Результат;

КонецФункции

Функция Тип_СвойстваПользователяИнформационнойБазы(ИмяСвойства = "",
		СинонимСвойства = "", КомментарийСвойства = "")

	Результат = Новый Структура;
	Результат.Вставить("Имя", ИмяСвойства);
	Результат.Вставить("Синоним", СинонимСвойства);
	Результат.Вставить("Комментарий", КомментарийСвойства);

	Возврат Результат;

КонецФункции

Функция Тип_ПоляРегистраБухгалтерииДтКт()

	Результат = Новый Структура;
	Результат.Вставить("Измерения", Новый Массив);
	Результат.Вставить("Ресурсы", Новый Массив);
	Результат.Вставить("МаксКоличествоСубконто", 0);

	Возврат Результат;

КонецФункции

Функция Тип_ПоляСубконтоСпискаРегистраБухгалтерии() Экспорт
	
	Результат = Новый Структура("ВидСубконто, Субконто");
	
	Результат.ВидСубконто = Новый Структура("Дт, Кт, ГруппаДт, ГруппаКт", Новый Массив(), Новый Массив(), Неопределено, Неопределено);
	Результат.Субконто    = Новый Структура("Дт, Кт, ГруппаДт, ГруппаКт", Новый Массив(), Новый Массив(), Неопределено, Неопределено);
	
	Возврат Результат; 
	
КонецФункции
#КонецОбласти

Система_РазделительЧастейИмен = "_777_";
ЗаполнитьСоответствиеКартинок();