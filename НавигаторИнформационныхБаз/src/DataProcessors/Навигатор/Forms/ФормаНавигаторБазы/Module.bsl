#Область Форма

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаОбработка = ЭтаОбработка();
	
	//
	
	ВосстановитьСостояниеРаботы();
	
	//
	
	тз_СтруктураМетаданныхКонфигурации = ЭтаОбработка.СтруктураМетаданныхКонфигурации();
	ЗначениеВРеквизитФормы(тз_СтруктураМетаданныхКонфигурации, "СтруктураМетаданныхКонфигурации");
	
	//
	
	Элементы.СтруктураМетаданныхКонфигурацииПредставление.Заголовок = ЭтаОбработка.КраткаяИнформацияОКонфигурации();
	
	//
	
	Элементы.СтраницаИстория.Видимость                   = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
	Элементы.КомандаСкрытьПоказатьИсториюБыстрая.Пометка = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
	Элементы.КомандаСкрытьПоказатьИсторию.Пометка        = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
	
	//
	
	Элементы.СтраницаИзбранное.Видимость                                  = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
	Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементовБыстрая.Пометка = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
	Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементов.Пометка        = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "Навигатор_ФормаРедакторОбъекта" Тогда
		
		Если ИмяСобытия = "ДобавитьВИзбранное" Тогда
			
			ДобавитьЭлементВИзбранное(Параметр);
			
			ПоказатьОповещениеПользователя("Избранное:", , "" + Параметр + " добавлен в избранное.", БиблиотекаКартинок.Избранное);
			
		ИначеЕсли ИмяСобытия = "ДобавитьВИсторию" Тогда
			
			ДобавитьЭлементВИсторию(Параметр);
			
		КонецЕсли;
		
	ИначеЕсли Источник = "Навигатор_НастройкиНавигатора" Тогда
		
		Если ИмяСобытия = "ИзменениеНастроек" Тогда
			
			//
			
			Элементы.СтраницаИстория.Видимость = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
			Элементы.КомандаСкрытьПоказатьИсториюБыстрая.Пометка = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
			Элементы.КомандаСкрытьПоказатьИсторию.Пометка = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
			
			//
			
			Элементы.СтраницаИзбранное.Видимость = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
			Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементовБыстрая.Пометка = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
			Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементов.Пометка = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьВсеОкнаРедакторов();
	
	Попытка
		СохранитьСостояниеРаботы();
	Исключение
		//
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Элементы

&НаКлиенте
Процедура Настройки_ОтображатьПанельИзбранногоПриОткрытииПриИзменении(Элемент)
	
	ОбработкаОповещения("ИзменениеНастроек", Неопределено, "Навигатор_НастройкиНавигатора");
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ОтображатьПанельИсторииПриОткрытииПриИзменении(Элемент)
	
	ОбработкаОповещения("ИзменениеНастроек", Неопределено, "Навигатор_НастройкиНавигатора");
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ОтображатьКоличествоЭлементовПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаДляПереходаПриИзменении(Элемент)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(НавигационнаяСсылкаДляПерехода) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭлСписка = Элементы.НавигационнаяСсылкаДляПерехода.СписокВыбора.НайтиПоЗначению(НавигационнаяСсылкаДляПерехода);
	
	Если ЭлСписка = Неопределено Тогда
		Элементы.НавигационнаяСсылкаДляПерехода.СписокВыбора.Добавить(НавигационнаяСсылкаДляПерехода);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ОткрытьЭлементПоНавигационнойСсылкеВРедакторе();
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура КомандаОткрытьИспользованныйСписокЭлементов(Элемент)
	// TODO: Разобрать имя элемента, и обработать команду открытия.
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЭлементовОМНастроитьКолонки(Элемент)
	
	СписокЭлементовОбъектаМетаданныхНастроитьКолонки(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЭлементовОМЗакрыть(Элемент)
	
	Попытка
		СписокЭлементовОбъектаМетаданныхЗакрыть(Элемент.Имя);
	Исключение
		//
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЭлементовОМДобавитьВИзбранное(Элемент)
	
	Перем ДобавленныйЭлемент;
	
	СписокЭлементовОМДобавитьВИзбранное(Элемент.Имя, ДобавленныйЭлемент);
	
	ПоказатьОповещениеПользователя("Избранное:", , "" + ДобавленныйЭлемент + " добавлен в избранное.", БиблиотекаКартинок.Избранное);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьСтруктуруОМ(Команда)
	
	#Область Предусловия
	
	Если Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтобразитьСтруктуруОбъектаМетаданных(Элементы.СтруктураМетаданныхКонфигурации.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьСвойстваОМ(Команда)
	
	ОтобразитьСвойстваОбъектаМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьСтруктуруМетаданныхКонфигурации(Команда)
	
	СкрытьПоказатьСтруктураМетаданныхКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьКоличество(Команда)
	
	ОтобразитьКоличествоЭлементовКоллекции(Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСписокЭлементовОМ(Команда)
	
	ДанныеСтроки = СтруктураСтрокиМетаданныхКонфигурации(Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные);
	
	ПриВыбореСтрокиСтруктурыМетаданныхКонфигурации(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьНастройкиКолонокСписка(Команда)
	
	Элементы.ГруппаНастройкаКолонокСписка.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуОПрограмме(Команда)
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаОПрограмме");
	ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьНастройкиНавигатора(Команда)
	
	Элементы.СтраницаНастройки.Видимость = Не Элементы.СтраницаНастройки.Видимость;
	
	Элементы.КомандаОткрытьНастройкиНавигатораБыстрая.Пометка = Элементы.СтраницаНастройки.Видимость;
	Элементы.КомандаОткрытьНастройкиНавигатора.Пометка = Элементы.СтраницаНастройки.Видимость;
	
	Элементы.СтраницыНавигатора.ТекущаяСтраница = Элементы.СтраницаНастройки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьВсеОкна(Команда)
	
	ЗакрытьВсеОкнаРедакторов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьКоличествоВсехЭлементов(Команда)
	
	ОтобразитьКоличествоВсехЭлементовВсехКоллекций();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЭлементПоНавигационнойСсылкеВРедакторе(Команда)
	
	ОткрытьЭлементПоНавигационнойСсылкеВРедакторе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьПанельИзбранныхЭлементов(Команда)
	
	СкрытьПоказатьПанельИзбранныхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуСпискаПользователей(Команда)
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаПользователиБазы");
	ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьИсторию(Команда)
	
	СкрытьПоказатьИсториюНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсторияНвигацииОткрытьФормуЭлемента(Команда)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ИсторияНавигации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзбранныеЭлементыОткрытьФормуЭлемента(Команда)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ИзбранныеЭлементы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьСтраницуНастроек(Команда)
	
	Элементы.СтраницаНастройки.Видимость = Ложь;
	
	Элементы.КомандаОткрытьНастройкиНавигатораБыстрая.Пометка = Элементы.СтраницаНастройки.Видимость;
	Элементы.КомандаОткрытьНастройкиНавигатора.Пометка = Элементы.СтраницаНастройки.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьОтобразитьПанельСтраниц(Команда)
	
	СкрытьОтобразитьПанельСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьКолонкуКомментарий(Команда)
	
	СкрытьПоказатьКолонкуКомментарий();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьКолонкуСиноним(Команда)
	
	СкрытьПоказатьКолонкуСиноним();
	
КонецПроцедуры

#КонецОбласти

#Область Таблицы

#Область СтруктураМетаданныхКонфигурации

&НаКлиенте
Процедура СтруктураМетаданныхКонфигурацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ТекущиеДанные.Имя = "Константы"
		И ТекущиеДанные.ТипЗаписи = "КоллекцияОбъектовМетаданных"
		И ТекущиеДанные.ИмяКоллекции = "Константы" Тогда
		
		ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаЗначенияКонстант");
		ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
		
		Возврат;
		
	КонецЕсли;
	
	Если Поле.Имя = "КоличествоЗаписей" Тогда
		ОтобразитьКоличествоЭлементовКоллекции(ТекущиеДанные);
	Иначе
		
		ОтобразитьКоличествоЭлементовКоллекции(ТекущиеДанные);
		
		// Обработать выбор строки дерева метаданных.
		
		СтруктураСтрокиМетаданных = СтруктураСтрокиМетаданныхКонфигурации(ТекущиеДанные);
		ПриВыбореСтрокиСтруктурыМетаданныхКонфигурации(СтруктураСтрокиМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область КолонкиСпискаВидимостьКолонки

&НаКлиенте
Процедура НастройкиКолонокСпискаНачалоПеретаскивания(Элемент,
	ПараметрыПеретаскивания, Выполнение)
	//
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокСпискаОкончаниеПеретаскивания(Элемент,
	ПараметрыПеретаскивания, СтандартнаяОбработка)
	//
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокСпискаВидимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиКолонокСписка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы[ТекущиеДанные.ИмяКолонки].Видимость = ТекущиеДанные.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокСпискаПриИзменении(Элемент)
	
	// Сделать:
	// Добавить возможность изменять порядок колонок.
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиКолонокСпискаОтметитьВсе(Команда)
	
	НастройкиКолонокСпискаУстановитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиКолонокСпискаСнятьВсе(Команда)
	
	НастройкиКолонокСпискаУстановитьПометки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокСпискаУстановитьПометки(Пометка)
	
	ЭлементыНастройкиКолонокСписка = НастройкиКолонокСписка.ПолучитьЭлементы();
	
	Для каждого ЭлементСтрокаНастройкиКолонокСписка Из ЭлементыНастройкиКолонокСписка Цикл
		
		ВлЭлементы = ЭлементСтрокаНастройкиКолонокСписка.ПолучитьЭлементы();
		
		Для каждого ВлЭлемент Из ВлЭлементы Цикл
			Если Не ЗначениеЗаполнено(ВлЭлемент.ИмяКолонки) Тогда
				Продолжить;
			КонецЕсли;
			
			ВлЭлемент.Видимость = Пометка;
			Элементы[ВлЭлемент.ИмяКолонки].Видимость = ВлЭлемент.Видимость;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область ИзбранныеЭлементы

&НаКлиенте
Процедура ИзбранныеЭлементыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ИзбранныеЭлементы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыОткрытия = Новый Структура("ОбъектБазы", ТекущиеДанные.Ссылка);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаРедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыОткрытия, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область ИсторияНавигации

&НаКлиенте
Процедура ИсторияНавигацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ИсторияНавигации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыОткрытия = Новый Структура("ОбъектБазы", ТекущиеДанные.Ссылка);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаРедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыОткрытия, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область Процедуры

&НаКлиенте
Процедура ПриВыбореСтрокиСтруктурыМетаданныхКонфигурации(ДанныеСтроки)
	
	#Область Предусловия
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтображениеСпискаЭлементовДоступно = ОтображениеСпискаЭлементовКоллекцииДоступно(ДанныеСтроки.ИмяКоллекции);
	
	Если ДанныеСтроки.ТипЗаписи = "ОбъектМетаданных" Тогда
		
		Если ДанныеСтроки.ИмяЭлементаКоллекции = "Форма" Тогда
			
			// TODO: Сформировать имя формы (это надо подняться до элемента-родителя), открыть форму.
			
		Иначе
			Если ОтображениеСпискаЭлементовДоступно Тогда
				
				УстановитьВидимостьПанелиСтраницНавигатора(Истина);
				ОтобразитьСписокЭлементовКоллекции(ДанныеСтроки);
				
			Иначе
				ОбработатьВыборСтрокиОбъектаОбработкиДанных(ДанныеСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтрокиОбъектаОбработкиДанных(ДанныеСтроки)
	
	#Область Предусловия
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЯвляетсяСредствомОбработки = ЭлементКоллекцииЯвляетсяСредствомОбработкиДанных(ДанныеСтроки.ИмяКоллекции);
	
	Если Не ЯвляетсяСредствомОбработки Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваОбъекта = Тип_СвойстваОбъектаОбработкиДанных();
	СвойстваОбъекта.ИмяКоллекции = ДанныеСтроки.ИмяКоллекции;
	СвойстваОбъекта.ИмяЭлементаКоллекции = ДанныеСтроки.ИмяЭлементаКоллекции;
	СвойстваОбъекта.Имя = ДанныеСтроки.Имя;
	
	ИмяОсновнойФормы = ИмяОсновнойФормыОбъектаОбработкиДанных(СвойстваОбъекта);
	
	Если Не ЗначениеЗаполнено(ИмяОсновнойФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ИмяОсновнойФормы, , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКоличествоЭлементовКоллекции(ДанныеСтроки)
	
	#Область Предусловия
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	КолЗаписей = КоличествоЭлементовКоллекцииТипаОбъектаМетаданных(ДанныеСтроки.ИмяЭлементаКоллекции, ДанныеСтроки.Имя);
	
	ДанныеСтроки.КоличествоЗаписей = КолЗаписей;
	
	Если КолЗаписей = 0 Тогда
		ДанныеСтроки.Представление = ПодставитьПараметрыВСтроку("%1", ДанныеСтроки.Имя);
	Иначе
		ДанныеСтроки.Представление = ПодставитьПараметрыВСтроку("%1 (%2)", ДанныеСтроки.Имя, КолЗаписей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСвойстваОбъектаМетаданных()
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные;
	
	Если Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыФормы = Новый Структура("ИмяКоллекции, ИмяЭлементаКоллекции, ИмяОбъектаБазы");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	ПараметрыФормы.ИмяОбъектаБазы = ТекущиеДанные.Имя;
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаСвойстваОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтруктуруОбъектаМетаданных(ИдСтроки)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИдСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	СтрокаДерева = СтруктураМетаданныхКонфигурации.НайтиПоИдентификатору(ИдСтроки);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбъекта = СтруктураОбъектаМетаданных(СтрокаДерева.ИмяКоллекции, СтрокаДерева.Имя);
	
	Если СтруктураОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	ПодчиненныеСтроки.Очистить();
	
	Для каждого КлючЗначение Из СтруктураОбъекта Цикл
		
		СтрокаКоллекции = ПодчиненныеСтроки.Добавить();
		СтрокаКоллекции.Имя = КлючЗначение.Ключ;
		СтрокаКоллекции.Представление = КлючЗначение.Ключ;
		СтрокаКоллекции.Синоним = КлючЗначение.Значение.Коллекция.Синоним;
		СтрокаКоллекции.ТипЗаписи = КлючЗначение.Значение.Коллекция.ТипЗаписи;
		СтрокаКоллекции.ИмяКоллекции = КлючЗначение.Значение.Коллекция.ИмяКоллекции;
		СтрокаКоллекции.ИмяЭлементаКоллекции = КлючЗначение.Значение.Коллекция.ИмяЭлементаКоллекции;
		СтрокаКоллекции.НомерКартинки = КлючЗначение.Значение.Коллекция.НомерКартинки;
		
		СтрокиКоллекции = СтрокаКоллекции.ПолучитьЭлементы();
		
		Для каждого ДанныеЭлементаКоллекции Из КлючЗначение.Значение.ДанныеКоллекции Цикл
			
			СтрокаЭлементаКоллекции = СтрокиКоллекции.Добавить();
			СтрокаЭлементаКоллекции.Имя = ДанныеЭлементаКоллекции.Имя;
			СтрокаЭлементаКоллекции.Представление = ДанныеЭлементаКоллекции.Имя;
			СтрокаЭлементаКоллекции.Синоним = ДанныеЭлементаКоллекции.Синоним;
			СтрокаЭлементаКоллекции.ТипЗаписи = ДанныеЭлементаКоллекции.ТипЗаписи;
			СтрокаЭлементаКоллекции.ИмяКоллекции = КлючЗначение.Значение.Коллекция.ИмяКоллекции;
			СтрокаЭлементаКоллекции.ИмяЭлементаКоллекции = КлючЗначение.Значение.Коллекция.ИмяЭлементаКоллекции;
			СтрокаЭлементаКоллекции.НомерКартинки = КлючЗначение.Значение.Коллекция.НомерКартинки;
			
			Если Не ДанныеЭлементаКоллекции.ДанныеКоллекции.Количество() = 0 Тогда
				
				СтрокиКоллекцииРеквизиты = СтрокаЭлементаКоллекции.ПолучитьЭлементы();
				
				Для каждого СтруктураРеквизита Из ДанныеЭлементаКоллекции.ДанныеКоллекции Цикл
					
					СтрокаРеквизита = СтрокиКоллекцииРеквизиты.Добавить();
					СтрокаРеквизита.Имя = СтруктураРеквизита.Имя;
					СтрокаРеквизита.Представление = СтруктураРеквизита.Имя;
					СтрокаРеквизита.Синоним = СтруктураРеквизита.Синоним;
					СтрокаРеквизита.ТипЗаписи = СтруктураРеквизита.ТипЗаписи;
					СтрокаРеквизита.ИмяКоллекции = "Реквизиты";
					СтрокаРеквизита.ИмяЭлементаКоллекции = "Реквизит";
					СтрокаРеквизита.НомерКартинки = 45;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.СтруктураМетаданныхКонфигурации.Развернуть(ИдСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьСтруктураМетаданныхКонфигурации()
	
	Элементы.СтруктураМетаданныхКонфигурации.Видимость = Не Элементы.СтруктураМетаданныхКонфигурации.Видимость;
	
	Элементы.КомандаСкрытьПоказатьСтруктуруМетаданныхКонфигурации.Пометка = Элементы.СтруктураМетаданныхКонфигурации.Видимость;
	Элементы.КомандаСкрытьПоказатьСтруктуруМетаданныхКонфигурацииБыстрая.Пометка = Элементы.СтруктураМетаданныхКонфигурации.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлементПоНавигационнойСсылкеВРедакторе()
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(НавигационнаяСсылкаДляПерехода) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Сформировать определитель типа элементов.
	
	СтрокаДереваМд = Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные;
	
	ОпределительТипаЭлементов = "";
	Если Не (СтрокаДереваМд = Неопределено) Тогда
		ОпределительТипаЭлементов = ПодставитьПараметрыВСтроку("%1.%2", СтрокаДереваМд.ИмяЭлементаКоллекции, СтрокаДереваМд.Имя);
	КонецЕсли;
	
	СсылкаНаЭлемент = ПолучитьСсылкуНаЭлементБазыПоАдресу(НавигационнаяСсылкаДляПерехода, ОпределительТипаЭлементов);
	
	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ОбъектБазы", СсылкаНаЭлемент);
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаРедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыОткрытия, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПанельИзбранныхЭлементов()
	
	Элементы.СтраницаИзбранное.Видимость = Не Элементы.СтраницаИзбранное.Видимость;
	
	Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементовБыстрая.Пометка = Элементы.СтраницаИзбранное.Видимость;
	Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементов.Пометка = Элементы.СтраницаИзбранное.Видимость;
	
	Элементы.СтраницыНавигатора.ТекущаяСтраница = Элементы.СтраницаИзбранное;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьИсториюНавигации()
	
	Элементы.СтраницаИстория.Видимость = Не Элементы.СтраницаИстория.Видимость;
	
	Элементы.КомандаСкрытьПоказатьИсториюБыстрая.Пометка = Элементы.СтраницаИстория.Видимость;
	Элементы.КомандаСкрытьПоказатьИсторию.Пометка = Элементы.СтраницаИстория.Видимость;
	
	Элементы.СтраницыНавигатора.ТекущаяСтраница = Элементы.СтраницаИстория;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВсеОкнаРедакторов()
	
	Оповестить("ЗакрытьВсеОкнаРедакторов", Неопределено, "Навигатор");
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьПанельСтраниц()
	
	ФлВидимость = Не Элементы.СтраницыНавигатора.Видимость;
	
	УстановитьВидимостьПанелиСтраницНавигатора(ФлВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПанелиСтраницНавигатора(ФлВидимость)
	
	Элементы.СтраницыНавигатора.Видимость = ФлВидимость;
	
	Элементы.КомандаСкрытьОтобразитьПанельСтраниц.Пометка = Элементы.СтраницыНавигатора.Видимость;
	Элементы.КомандаСкрытьОтобразитьПанельСтраницБыстрая.Пометка = Элементы.СтраницыНавигатора.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьКолонкуКомментарий()
	
	Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость = Не Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость;
	
	ФлВидимость = Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость;
	
	Элементы.КомандаСкрытьПоказатьКолонкуКомментарий.Пометка = ФлВидимость;
	Элементы.КомандаСкрытьПоказатьКолонкуКомментарийБыстрая.Пометка = ФлВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьКолонкуСиноним()
	
	Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость = Не Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость;
	
	ФлВидимость = Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость;
	
	Элементы.КомандаСкрытьПоказатьКолонкуСиноним.Пометка = ФлВидимость;
	Элементы.КомандаСкрытьПоказатьКолонкуСинонимБыстрая.Пометка = ФлВидимость;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСписокЭлементовКоллекции(ДанныеСтроки)
	
	// Добавить страницу списка элементов объекта метаданных.
	
	СтраницаСпискаЭлементовОМ = Неопределено;
	ДобавитьСтраницуСпискаЭлементовОбъектаМетаданных(ДанныеСтроки, СтраницаСпискаЭлементовОМ);
	
	Если СтраницаСпискаЭлементовОМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Добавить список элементов объекта метаданных.
	
	СписокЭлементовОМ = Неопределено;
	ДобавитьСписокЭлементовОбъектаМетаданных(ДанныеСтроки, СтраницаСпискаЭлементовОМ, СписокЭлементовОМ);
	ДобавитьКолонкиСпискаЭлементовОбъектаМетаданных(СписокЭлементовОМ, ДанныеСтроки);
	
	// Активизировать добавленную страницу.
	
	Элементы.СтраницыНавигатора.ТекущаяСтраница = СтраницаСпискаЭлементовОМ;
	
	ДобавитьКомандуДляОткрытыхОбъектов(ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуДляОткрытыхОбъектов(ДанныеСтроки)
	
	ИмяКоманды = "КомандаОткрытьИспользованныйСписокЭлементов"
	+ Формат(Элементы.ФормаПодменюПоследниеОбъекты.ПодчиненныеЭлементы.Количество()
	+ 1, "ЧГ=0");
	ЗаголовокКоманды = ""
	+ Элементы.ФормаПодменюПоследниеОбъекты.ПодчиненныеЭлементы.Количество() + 1
	+ " " + ДанныеСтроки.ИмяЭлементаКоллекции + "." + ДанныеСтроки.Имя;
	
	ПодсказкаКоманды = "";
	ДействиеКоманды = "КомандаОткрытьИспользованныйСписокЭлементов";
	
	КомандаИспСписок = Команды.Добавить(ИмяКоманды);
	КомандаИспСписок.Заголовок = ЗаголовокКоманды;
	КомандаИспСписок.Подсказка = ПодсказкаКоманды;
	КомандаИспСписок.Действие = ДействиеКоманды;
	
	ИмяЭлемента = ИмяКоманды;
	
	ЭлИспСписок = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ФормаПодменюПоследниеОбъекты);
	ЭлИспСписок.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ЭлИспСписок.Заголовок = ЗаголовокКоманды;
	ЭлИспСписок.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСписокЭлементовОбъектаМетаданных(СтрокаСтруктуры,
	СтраницаСписка, СписокЭлементов)
	
	// TODO: В зависимости от типа источника требуется отображать список по-разному.
	// Например, для регистра бухгалтерии потребуется отображать таблицу "ДвижениясСубконто".
	// Сбор текста запроса динамического списка необходимо выполнять с помощью схемы запроса.
	
	ИмяСпискаЭлементов = ИмяСпискаЭлементовОбъектаМетаданных(СтрокаСтруктуры);
	ИмяОсновнойТаблицыСписка = ИмяОсновнойТаблицыСпискаЭлементовОбъектаМетаданных(СтрокаСтруктуры);
	
	// Добавить реквизит формы списка элементов.
	РеквизитФормы = Новый РеквизитФормы(
		ИмяСпискаЭлементов, 
		Новый ОписаниеТипов("ДинамическийСписок"), 
		, 
		СтрокаСтруктуры.ИмяЭлементаКоллекции + "." + СтрокаСтруктуры.Имя
	);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтаФорма[ИмяСпискаЭлементов].ОсновнаяТаблица = ИмяОсновнойТаблицыСписка;
	
	// Добавить элемент формы - список.
	СписокЭлементов = ЭтаФорма.Элементы.Добавить(ИмяСпискаЭлементов, Тип("ТаблицаФормы"), СтраницаСписка);
	СписокЭлементов.ПутьКДанным = ИмяСпискаЭлементов;
	СписокЭлементов.Видимость = Истина;
	
	ДобавитьКомандуНастройкиКолонокСпискаЭлементовОбъектаМетаданных(СписокЭлементов);
	ДобавитьКомандуДобавленияВИзбранноеСпискаЭлементовОбъектаМетаданных(СписокЭлементов);
	ДобавитьКомандуЗакрытияСпискаЭлементовОбъектаМетаданных(СписокЭлементов);
	
	
	СписокЭлементов.УстановитьДействие("Выбор", "ПодключаемыйСписокЭлементовОбъектаМетаданныхВыбор");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиСпискаЭлементовОбъектаМетаданных(СписокЭлементов, СтрокаСтруктуры)
	
	ИмяСписка = СписокЭлементов.Имя;
	
	ПараметрыКолонок = ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(СтрокаСтруктуры);
	
	Для каждого КлючЗначение Из ПараметрыКолонок Цикл
		
		КоллекцияКолонок = КлючЗначение.Значение;
		
		Для Каждого ПараметрыКолонки Из КоллекцияКолонок Цикл
			
			ИмяКолонкиСписка = ИмяКолонкиСпискаЭлементовОбъектаМетаданных(ПараметрыКолонки.ИмяРеквизита, СтрокаСтруктуры);
			ПутьКДаннымКолонкиСписка = ПутьКДаннымКолонкиСпискаЭлементовОбъектаМетаданных(ИмяСписка, ПараметрыКолонки.ИмяРеквизита);
			
			Попытка
				
				Колонка = Элементы.Добавить(ИмяКолонкиСписка, Тип("ПолеФормы"), Элементы[ИмяСписка]);
				Колонка.Вид = ВидПоляФормы.ПолеНадписи;
				Колонка.ПутьКДанным = ПутьКДаннымКолонкиСписка;
				Колонка.Заголовок = ПараметрыКолонки.ИмяРеквизита;
				Колонка.Видимость = ПараметрыКолонки.Видимость;
				
			Исключение
				//
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуНастройкиКолонокСпискаЭлементовОбъектаМетаданных(СписокЭлементов)
	
	#Область Предусловия
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяКоманды = ИмяДопКомандыСпискаЭлементовОбъектаМетаданных(СписокЭлементов.Имя, "НастройкаКолонок");
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие = "КомандаСписокЭлементовОМНастроитьКолонки";
	Команда.Подсказка = "Настроить видимость колонок";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[СписокЭлементов.Имя].КоманднаяПанель);
	
	Элемент.ИмяКоманды = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок = "Колонки";
	Элемент.Отображение = ОтображениеКнопки.Картинка;
	Элемент.Картинка = БиблиотекаКартинок.НастройкиОтчета;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуДобавленияВИзбранноеСпискаЭлементовОбъектаМетаданных(СписокЭлементов)
	
	#Область Предусловия
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяКоманды = ИмяДопКомандыСпискаЭлементовОбъектаМетаданных(СписокЭлементов.Имя, "ДобавитьВИзбранное");
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие = "КомандаСписокЭлементовОМДобавитьВИзбранное";
	Команда.Подсказка = "Добавить в избранное";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[СписокЭлементов.Имя].КоманднаяПанель);
	
	Элемент.ИмяКоманды = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок = "Добавить в избранное";
	Элемент.Отображение = ОтображениеКнопки.Картинка;
	Элемент.Картинка = Элементы.КартинкаБыстрыйДоступДобавить.Картинка;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуЗакрытияСпискаЭлементовОбъектаМетаданных(СписокЭлементов, Подменю = Неопределено)
	
	#Область Предусловия
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяКоманды = ИмяДопКомандыСпискаЭлементовОбъектаМетаданных(СписокЭлементов.Имя, "Закрыть");
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие = "КомандаСписокЭлементовОМЗакрыть";
	Команда.Подсказка = "Закрыть страницу";
	
	Если (Подменю = Неопределено) Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[СписокЭлементов.Имя].КоманднаяПанель);
	Иначе
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Подменю);
	КонецЕсли;
	
	Элемент.ИмяКоманды = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок = "Закрыть";
	Элемент.Отображение = ОтображениеКнопки.Картинка;
	Элемент.Картинка = Элементы.КартинкаЗакрыть.Картинка;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуСпискаЭлементовОбъектаМетаданных(СтрокаСтруктурыМетаданныхКонфигурации,
	СтраницаСписка)
	
	СтраницаСписка = Неопределено;
	
	ИмяСтраницы = ИмяСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаСтруктурыМетаданныхКонфигурации);
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Сформировать заголовок страницы.
	ЗаголовокСтраницы = ЗаголовокСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаСтруктурыМетаданныхКонфигурации);
	
	// Добавить страницу для списка элементов.
	СтраницаСписка = ЭтаФорма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), ЭтаФорма.Элементы.СтраницыНавигатора);
	СтраницаСписка.Заголовок = ЗаголовокСтраницы;
	
КонецПроцедуры

&НаСервере
Процедура УвеличитьСчетчикДобавленныхЭлементов()
	
	СчетчикДобавленныхЭлементов = СчетчикДобавленныхЭлементов + 1;
	
КонецПроцедуры

&НаСервере
Процедура СписокЭлементовОМДобавитьВИзбранное(ИмяЭлементаКомандыДобавленияВИзбранное, ДобавленныйЭлемент = Неопределено);
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаКомандыДобавленияВИзбранное) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	ЧастиСтроки = ЭтаОбработка.РазложитьСтрокуВМассивПодстрок(
		ИмяЭлементаКомандыДобавленияВИзбранное, 
		РЧИ
	); // "Команда_Закрыть_Список_Справочники_Справочник_ДоговорыКонтрагентов_2"
	
	ИмяСписка = ЭтаОбработка.ПодставитьПараметрыВСтроку("Список"
	+ РЧИ + "%1"
	+ РЧИ + "%2"
	+ РЧИ + "%3"
	+ РЧИ
	+ "%4", ЧастиСтроки[3], ЧастиСтроки[4], ЧастиСтроки[5], ЧастиСтроки[6]);
	
	ДобавленныйЭлемент = Элементы[ИмяСписка].ТекущаяСтрока;
	
	ДобавитьЭлементВИзбранное(ДобавленныйЭлемент);
	
КонецПроцедуры

&НаСервере
Процедура СписокЭлементовОбъектаМетаданныхЗакрыть(ИмяЭлементаКомандыЗакрытия)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаКомандыЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	// Удаляет элементы и реквизиты.
	
	ЧастиСтроки = ЭтаОбработка.РазложитьСтрокуВМассивПодстрок(
		ИмяЭлементаКомандыЗакрытия, 
		Объект.Система_РазделительЧастейИмен
	); // "Команда_Закрыть_Список_Справочники_Справочник_ДоговорыКонтрагентов_2"
	
	// TODO: 
	// Переделать на централизованные функции определения имен элементов. 
	// Иначе расползется и костей не собрать.
	
	ИмяСписка = ЭтаОбработка.ПодставитьПараметрыВСтроку("Список"
	+ РЧИ + "%1"
	+ РЧИ + "%2"
	+ РЧИ + "%3"
	+ РЧИ
	+ "%4", ЧастиСтроки[3], ЧастиСтроки[4], ЧастиСтроки[5], ЧастиСтроки[6]);
	
	ИмяСтраницы = "";
	
	Для каждого Страница Из Элементы.СтраницыНавигатора.ПодчиненныеЭлементы Цикл
		
		Для каждого ПодчиненныйЭлемент Из Страница.ПодчиненныеЭлементы Цикл
			
			Если ПодчиненныйЭлемент.Имя = ИмяСписка Тогда
				ИмяСтраницы = Страница.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяКомандыЗакрытия = ИмяЭлементаКомандыЗакрытия;
	
	// Сформировать списки реквизитов и элементов на удаление.
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ИмяКомандыЗакрытия);
	МассивЭлементов.Добавить(ИмяСписка);
	МассивЭлементов.Добавить(ИмяСтраницы);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(ИмяСписка);
	
	// ... удаляем элементы в начале.
	Для каждого ИмяЭлемента Из МассивЭлементов Цикл
		Элементы.Удалить(Элементы[ИмяЭлемента]);
	КонецЦикла;
	
	// ... потом реквизиты.
	ЭтаФорма.ИзменитьРеквизиты(, МассивРеквизитов);
	ЭтаФорма.Команды.Удалить(ЭтаФорма.Команды[ИмяКомандыЗакрытия]);
	
КонецПроцедуры

&НаСервере
Процедура СписокЭлементовОбъектаМетаданныхНастроитьКолонки(ИмяЭлементаКомандыНастройки)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаКомандыНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	ЧастиСтроки = ЭтаОбработка.РазложитьСтрокуВМассивПодстрок(ИмяЭлементаКомандыНастройки, Объект.Система_РазделительЧастейИмен);
	
	ИмяКоллекции = ЧастиСтроки[3];
	ИмяОбъектаМетаданных = ЧастиСтроки[5];
	
	// Установить заголовок.
	Элементы.НастройкиКолонокСпискаИмя.Заголовок = ЧастиСтроки[4] + "."
	+ ЧастиСтроки[5];
	
	// Определить имя элемента списка.
	ЧастиСтрокиИмениЭлементаСписка = Новый Массив;
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[2]);
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[3]);
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[4]);
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[5]);
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[6]);
	
	ИмяЭлементаСписка = ЭтаОбработка.СтрокаИзМассиваПодстрок(ЧастиСтрокиИмениЭлементаСписка, Объект.Система_РазделительЧастейИмен);
	
	// Получить таблицу элементов списка.
	тз_ТаблицаКолонокЭлементаСписка = Новый ТаблицаЗначений;
	тз_ТаблицаКолонокЭлементаСписка.Колонки.Добавить("ИмяКолонки");
	тз_ТаблицаКолонокЭлементаСписка.Колонки.Добавить("ИмяРеквизита");
	тз_ТаблицаКолонокЭлементаСписка.Колонки.Добавить("Видимость");
	
	Для каждого ЭлКолонка Из Элементы[ИмяЭлементаСписка].ПодчиненныеЭлементы Цикл
		
		СтрокаТз = тз_ТаблицаКолонокЭлементаСписка.Добавить();
		СтрокаТз.ИмяКолонки = ЭлКолонка.Имя;
		
		ЧастиСтрокиПутьКДанным = ЭтаОбработка.РазложитьСтрокуВМассивПодстрок(ЭлКолонка.ПутьКДанным, ".");
		СтрокаТз.ИмяРеквизита = ЧастиСтрокиПутьКДанным[1];
		СтрокаТз.Видимость = ЭлКолонка.Видимость;
		
	КонецЦикла;
	
	// Получить параметры колонок списка.
	ПараметрыКолонокСписка = ЭтаОбработка.ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(ИмяКоллекции, ИмяОбъектаМетаданных);
	
	дз_НастройкиКолонокСписка = РеквизитФормыВЗначение("НастройкиКолонокСписка");
	дз_НастройкиКолонокСписка.Строки.Очистить();
	
	Для каждого КлючЗначение Из ПараметрыКолонокСписка Цикл
		
		Если КлючЗначение.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		стр_ГруппаРеквизитов = дз_НастройкиКолонокСписка.Строки.Добавить();
		стр_ГруппаРеквизитов.ТипЗаписи = "ГруппаКолонок";
		стр_ГруппаРеквизитов.Имя = КлючЗначение.Ключ;
		
		Если КлючЗначение.Ключ = "СтандартныеРеквизиты" Тогда
			стр_ГруппаРеквизитов.НомерКартинки = 1;
		ИначеЕсли КлючЗначение.Ключ = "Реквизиты" Тогда
			стр_ГруппаРеквизитов.НомерКартинки = 2;
		ИначеЕсли КлючЗначение.Ключ = "Измерения" Тогда
			стр_ГруппаРеквизитов.НомерКартинки = 3;
		ИначеЕсли КлючЗначение.Ключ = "Ресурсы" Тогда
			стр_ГруппаРеквизитов.НомерКартинки = 4;
		КонецЕсли;
		
		стр_ГруппаРеквизитов.ИмяЭлементаСписка = ИмяЭлементаСписка;
		
		Для каждого ПараметрыКолонки Из КлючЗначение.Значение Цикл
			
			стр_Реквизит = стр_ГруппаРеквизитов.Строки.Добавить();
			стр_Реквизит.ТипЗаписи = "Колонка";
			стр_Реквизит.Имя = ПараметрыКолонки.ИмяРеквизита;
			стр_Реквизит.НомерКартинки = стр_ГруппаРеквизитов.НомерКартинки;
			стр_Реквизит.ИмяЭлементаСписка = ИмяЭлементаСписка;
			стр_Реквизит.ПредставлениеТипа = ПараметрыКолонки.ПредставлениеТипа;
			
			СтрокаТаблицыКолонок = тз_ТаблицаКолонокЭлементаСписка.Найти(ПараметрыКолонки.ИмяРеквизита, "ИмяРеквизита");
			
			Если Не (СтрокаТаблицыКолонок = Неопределено) Тогда
				
				стр_Реквизит.ИмяКолонки = СтрокаТаблицыКолонок.ИмяКолонки;
				стр_Реквизит.Видимость = СтрокаТаблицыКолонок.Видимость;
				
			КонецЕсли;
			
		КонецЦикла;
		
		стр_ГруппаРеквизитов.Строки.Сортировать("Имя");
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(дз_НастройкиКолонокСписка, "НастройкиКолонокСписка");
	
	Элементы.ГруппаНастройкаКолонокСписка.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКоличествоВсехЭлементовВсехКоллекций()
	
	#Область КонтекстнаяПодсказка
	
	Если (Ложь) Тогда
		дз_СтруктураМетаданныхКонфигурации = Новый ДеревоЗначений;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	ИменаКоллекцийДляРасчетаКоличества = Новый Массив;
	ИменаКоллекцийДляРасчетаКоличества.Добавить("Справочники");
	ИменаКоллекцийДляРасчетаКоличества.Добавить("Документы");
	ИменаКоллекцийДляРасчетаКоличества.Добавить("ПланыВидовХарактеристик");
	ИменаКоллекцийДляРасчетаКоличества.Добавить("ПланыСчетов");
	ИменаКоллекцийДляРасчетаКоличества.Добавить("РегистрыСведений");
	ИменаКоллекцийДляРасчетаКоличества.Добавить("РегистрыНакопления");
	ИменаКоллекцийДляРасчетаКоличества.Добавить("РегистрыБухгалтерии");
	ИменаКоллекцийДляРасчетаКоличества.Добавить("РегистрыРасчета");
	ИменаКоллекцийДляРасчетаКоличества.Добавить("Задачи");
	ИменаКоллекцийДляРасчетаКоличества.Добавить("БизнесПроцессы");
	
	дз_СтруктураМетаданныхКонфигурации = РеквизитФормыВЗначение("СтруктураМетаданныхКонфигурации");
	
	Для Каждого ИмяКоллекции Из ИменаКоллекцийДляРасчетаКоличества Цикл
		
		стк_СтруктураМетаданныхКонфигурации = дз_СтруктураМетаданныхКонфигурации.Строки.НайтиСтроки(Новый Структура("ИмяКоллекции", ИмяКоллекции), Истина);
		
		Если (стк_СтруктураМетаданныхКонфигурации.Количество() = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		стр_КоллекцияОбъектовМетаданных = стк_СтруктураМетаданныхКонфигурации[0].Строки;
		
		Для Каждого стр_СтрокаКоллекции Из стр_КоллекцияОбъектовМетаданных Цикл
			
			стр_СтрокаКоллекции.КоличествоЗаписей = ЭтаОбработка.КоличествоЭлементовКоллекцииТипаОбъектаМетаданных(стр_СтрокаКоллекции.ИмяЭлементаКоллекции, стр_СтрокаКоллекции.Имя);
			
			Если стр_СтрокаКоллекции.КоличествоЗаписей = 0 Тогда
				стр_СтрокаКоллекции.Представление = ПодставитьПараметрыВСтроку("%1", стр_СтрокаКоллекции.Имя);
			Иначе
				стр_СтрокаКоллекции.Представление = ПодставитьПараметрыВСтроку("%1 (%2)", стр_СтрокаКоллекции.Имя, стр_СтрокаКоллекции.КоличествоЗаписей);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(дз_СтруктураМетаданныхКонфигурации, "СтруктураМетаданныхКонфигурации");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВИсторию(ЭлементБазы)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ЭлементБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	НайденныеСтроки = Объект.ИсторияНавигации.НайтиСтроки(Новый Структура("Ссылка", ЭлементБазы));
	
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		
		ВГраница = НайденныеСтроки.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			Объект.ИсторияНавигации.Удалить(НайденныеСтроки[ВГраница - ОбрИндекс]);
		КонецЦикла;
		
	КонецЕсли;
	
	стр_История = Объект.ИсторияНавигации.Добавить();
	стр_История.ИдЗаписи = Новый УникальныйИдентификатор();
	стр_История.Представление = ЭлементБазы;
	стр_История.Ссылка = ЭлементБазы;
	стр_История.ДатаСобытия = ТекущаяДата();
	стр_История.НавигационнаяСсылка = ЭтаОбработка.НавигационнаяСсылкаНаЭлемент(ЭлементБазы);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(ЭлементБазы));
	
	стр_История.ТипЗначения = ЭтаОбработка.СтрокаОписанияТипов(Новый ОписаниеТипов(МассивТипов));
	
	Объект.ИсторияНавигации.Сортировать("ДатаСобытия Убыв");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВИзбранное(ЭлементБазы)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ЭлементБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	НайденныеСтроки = Объект.ИзбранныеЭлементы.НайтиСтроки(Новый Структура("Ссылка", ЭлементБазы));
	
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		
		ВГраница = НайденныеСтроки.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			Объект.ИзбранныеЭлементы.Удалить(НайденныеСтроки[ВГраница - ОбрИндекс]);
		КонецЦикла;
		
	КонецЕсли;
	
	стр_ИзбранныеЭлементы = Объект.ИзбранныеЭлементы.Добавить();
	стр_ИзбранныеЭлементы.ИдЗаписи = Новый УникальныйИдентификатор();
	стр_ИзбранныеЭлементы.Представление = ЭлементБазы;
	стр_ИзбранныеЭлементы.Ссылка = ЭлементБазы;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(ЭлементБазы));
	
	стр_ИзбранныеЭлементы.ТипЗначения = ЭтаОбработка.СтрокаОписанияТипов(Новый ОписаниеТипов(МассивТипов));
	
	стр_ИзбранныеЭлементы.НавигационнаяСсылка = ЭтаОбработка.НавигационнаяСсылкаНаЭлемент(ЭлементБазы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСостояниеРаботы()
	
	//
	
	КлючОбъекта = "Навигатор1С_ИзбранныеЭлементы";
	КлючНастроек = "ИзбранныеЭлементы";
	НастройкиИзбранное = ЗначениеВСтрокуВнутр(РеквизитФормыВЗначение("Объект").ИзбранныеЭлементы.Выгрузить());
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиИзбранное);
	
	//
	
	КлючОбъекта = "Навигатор1С_ИсторияНавигации";
	КлючНастроек = "ИсторияНавигации";
	НастройкиИсторияНавигации = ЗначениеВСтрокуВнутр(РеквизитФормыВЗначение("Объект").ИсторияНавигации.Выгрузить());
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиИсторияНавигации);
	
	//
	
	КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "ОтображатьПанельИсторииПриОткрытии";
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Объект.Настройки_ОтображатьПанельИсторииПриОткрытии);
	
	//
	
	КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "ОтображатьПанельИзбранногоПриОткрытии";
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии);
	
	//
	
	КлючОбъекта = "Навигатор1С_ДополнительныеНастройки";
	КлючНастроек = "КолонкаКомментарийВидимость";
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость);
	
	//
	
	КлючОбъекта = "Навигатор1С_ДополнительныеНастройки";
	КлючНастроек = "КолонкаСинонимВидимость";
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСостояниеРаботы()
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	//
	
	КлючОбъекта = "Навигатор1С_ИзбранныеЭлементы";
	КлючНастроек = "ИзбранныеЭлементы";
	
	СтрокаИзбранное = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если ЗначениеЗаполнено(СтрокаИзбранное) Тогда
		
		ЭтаОбработка.ИзбранныеЭлементы.Очистить();
		
		Попытка
			ЭтаОбработка.ИзбранныеЭлементы.Загрузить(ЗначениеИзСтрокиВнутр(СтрокаИзбранное));
		Исключение
			//
		КонецПопытки;
		
	КонецЕсли;
	
	//
	
	КлючОбъекта = "Навигатор1С_ИсторияНавигации";
	КлючНастроек = "ИсторияНавигации";
	
	СтрокаИсторияНавигации = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если ЗначениеЗаполнено(СтрокаИсторияНавигации) Тогда
		
		ЭтаОбработка.ИсторияНавигации.Очистить();
		
		Попытка
			ЭтаОбработка.ИсторияНавигации.Загрузить(ЗначениеИзСтрокиВнутр(СтрокаИсторияНавигации));
		Исключение
			//
		КонецПопытки;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ЭтаОбработка, "Объект");
	
	//
	
	КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "ОтображатьПанельИсторииПриОткрытии";
	
	Объект.Настройки_ОтображатьПанельИсторииПриОткрытии = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	//
	
	КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "ОтображатьПанельИзбранногоПриОткрытии";
	
	Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	//
	
	КлючОбъекта = "Навигатор1С_ДополнительныеНастройки";
	КлючНастроек = "КолонкаКомментарийВидимость";
	
	ФлВидимость = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если Не (ФлВидимость = Неопределено) Тогда
		
		Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость = ФлВидимость;
		Элементы.КомандаСкрытьПоказатьКолонкуКомментарий.Пометка = ФлВидимость;
		Элементы.КомандаСкрытьПоказатьКолонкуКомментарийБыстрая.Пометка = ФлВидимость;
		
	КонецЕсли;
	
	//
	
	КлючОбъекта = "Навигатор1С_ДополнительныеНастройки";
	КлючНастроек = "КолонкаСинонимВидимость";
	
	ФлВидимость = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если Не (ФлВидимость = Неопределено) Тогда
		
		Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость = ФлВидимость;
		Элементы.КомандаСкрытьПоказатьКолонкуСиноним.Пометка = ФлВидимость;
		Элементы.КомандаСкрытьПоказатьКолонкуСинонимБыстрая.Пометка = ФлВидимость;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Функции

&НаКлиенте
Функция СтруктураСтрокиМетаданныхКонфигурации(ДанныеСтроки)
	
	ЗаписьСтруктурыМетаданныхКонфигурации = Тип_ЗаписьСтруктурыМетаданныхКонфигурации();
	
	ЗаполнитьЗначенияСвойств(ЗаписьСтруктурыМетаданныхКонфигурации, ДанныеСтроки);
	
	Результат = ЗаписьСтруктурыМетаданныхКонфигурации;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки)
	
	Результат = ЭтаОбработка().ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяОсновнойФормыОбъектаОбработкиДанных(СвойстваОбъекта)
	
	Результат = ЭтаОбработка().ИмяОсновнойФормыОбъектаОбработкиДанных(СвойстваОбъекта);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭлементКоллекцииЯвляетсяСредствомОбработкиДанных(ИмяКоллекции)
	
	Результат = ЭтаОбработка().ЭлементКоллекцииЯвляетсяСредствомОбработкиДанных(ИмяКоллекции);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОтображениеСпискаЭлементовКоллекцииДоступно(ИмяКоллекции)
	
	Результат = ЭтаОбработка().ОтображениеСпискаЭлементовКоллекцииДоступно(ИмяКоллекции);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПутьКДаннымКолонкиСпискаЭлементовОбъектаМетаданных(ИмяСписка, ИмяКолонки)
	
	Результат = "";
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("%1.%2", ИмяСписка, ИмяКолонки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяКолонкиСпискаЭлементовОбъектаМетаданных(ИмяКолонки,
	СтрокаСтруктурыМетаданныхКонфигурации)
	
	Результат = "";
	
	УвеличитьСчетчикДобавленныхЭлементов();
	
	НомерЭлемента = СчетчикДобавленныхЭлементов;
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("Колонка"
	+ Объект.Система_РазделительЧастейИмен + "%1"
	+ Объект.Система_РазделительЧастейИмен + "%2"
	+ Объект.Система_РазделительЧастейИмен + "%3"
	+ Объект.Система_РазделительЧастейИмен + "%4"
	+ Объект.Система_РазделительЧастейИмен
	+ "%5", СтрокаСтруктурыМетаданныхКонфигурации.ИмяКоллекции, СтрокаСтруктурыМетаданныхКонфигурации.ИмяЭлементаКоллекции, СтрокаСтруктурыМетаданныхКонфигурации.Имя, ИмяКолонки, НомерЭлемента);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(СтрокаСтруктурыМд)
	
	Результат = Новый Массив;
	ПустойРезультат = Новый Массив;
	
	#Область Предусловия
	
	Если СтрокаСтруктурыМд = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = ЭтаОбработка().ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(СтрокаСтруктурыМд.ИмяКоллекции, СтрокаСтруктурыМд.Имя);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяОсновнойТаблицыСпискаЭлементовОбъектаМетаданных(СтрокаДереваМд)
	
	Если СтрокаДереваМд.ИмяЭлементаКоллекции = "РегистрБухгалтерии" Тогда
		Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку(
			"%1.%2.ДвиженияССубконто", 
			СтрокаДереваМд.ИмяЭлементаКоллекции, 
			СтрокаДереваМд.Имя
		);
	Иначе
		Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку(
			"%1.%2", 
			СтрокаДереваМд.ИмяЭлементаКоллекции, 
			СтрокаДереваМд.Имя
		);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Имя списка элементов.
//
// Параметры:
//	СтрокаСтруктурыМетаданныхКонфигурации - Строка - данные выбранной строки дерева метаданных.
//
// Возвращаемое значение:
//	Тип: Строка
//	Имя списка элементов, например: "Список_Справочники_Справочник_Товары_1".
//	
&НаСервере
Функция ИмяСпискаЭлементовОбъектаМетаданных(СтрокаСтруктурыМетаданныхКонфигурации)
	
	Результат = "";
	
	// TODO: Рефакторинг. Разнести по разным функциям увеличение счетчика добавленных
	// элементов и составление имени элемента из всех "ингредиентов".
	УвеличитьСчетчикДобавленныхЭлементов();
	
	НомерЭлемента = СчетчикДобавленныхЭлементов;
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("Список"
	+ Объект.Система_РазделительЧастейИмен + "%1"
	+ Объект.Система_РазделительЧастейИмен + "%2"
	+ Объект.Система_РазделительЧастейИмен + "%3"
	+ Объект.Система_РазделительЧастейИмен
	+ "%4", СтрокаСтруктурыМетаданныхКонфигурации.ИмяКоллекции, СтрокаСтруктурыМетаданныхКонфигурации.ИмяЭлементаКоллекции, СтрокаСтруктурыМетаданныхКонфигурации.Имя, НомерЭлемента);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаголовокСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаСтруктурыМетаданныхКонфигурации)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если СтрокаСтруктурыМетаданныхКонфигурации = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("%1.%2", СтрокаСтруктурыМетаданныхКонфигурации.ИмяЭлементаКоллекции, СтрокаСтруктурыМетаданныхКонфигурации.Имя);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаДереваМд)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если СтрокаДереваМд = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	УвеличитьСчетчикДобавленныхЭлементов();
	
	НомерЭлемента = СчетчикДобавленныхЭлементов;
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("Страница"
		+ РЧИ + "%1"
		+ РЧИ + "%2"
		+ РЧИ + "%3"
		+ РЧИ
		+ "%4", 
		СтрокаДереваМд.ИмяКоллекции, 
		СтрокаДереваМд.ИмяЭлементаКоллекции, 
		СтрокаДереваМд.Имя, 
		НомерЭлемента
	);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтаОбработка()
	
	Результат = РеквизитФормыВЗначение("Объект");
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КоличествоЭлементовКоллекцииТипаОбъектаМетаданных(ИмяКоллекцииМетаданных,
	ИмяОбъектаМетаданных)
	
	Результат = ЭтаОбработка().КоличествоЭлементовКоллекцииТипаОбъектаМетаданных(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяДопКомандыСпискаЭлементовОбъектаМетаданных(ИмяСпискаЭлементов, ТипДопКоманды)
	
	Результат = ЭтаОбработка().ИмяДополнительнойКомандыСпискаЭлементов(ИмяСпискаЭлементов, ТипДопКоманды);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПутьКДаннымПоляСпискаЭлементов(ИмяПоляСписка)
	
	ЧастиСтроки = ЭтаОбработка().РазложитьСтрокуВМАссивПодстрок(ИмяПоляСписка, Объект.Система_РазделительЧастейИмен);
	
	Результат = ЧастиСтроки[ЧастиСтроки.Количество() - 2];
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки, Знач Параметр1,
	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено,
	Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено,
	Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку(СтрокаПодстановки, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаЭлементБазыПоАдресу(НавигационнаяСсылка, ОпределительТипаЭлементов = "")
	
	Результат = ЭтаОбработка().ПолучитьСсылкуНаЭлементБазыПоАдресу(НавигационнаяСсылка, ОпределительТипаЭлементов);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураОбъектаМетаданных(ИмяКоллекции, ИмяОбъектаМетаданных)
	
	Результат = Новый Структура;
	ПустойРезультат = Неопределено;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяКоллекции) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Попытка
		ОбъектМд = Метаданные[ИмяКоллекции][ИмяОбъектаМетаданных];
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	КоллекцииСвойств = КоллекцииСвойствОбъектаМетаданных();
	
	Для каждого КоллекцияСвойств Из КоллекцииСвойств Цикл
		
		Попытка
			КоллекцияСвойствМд = ОбъектМд[КоллекцияСвойств.Имя];
		Исключение
			Продолжить;
		КонецПопытки;
		
		ДанныеКоллекции = Новый Массив;
		
		Если ТипЗнч(КоллекцияСвойствМд) = Тип("ОписанияСтандартныхРеквизитов")
			Или ТипЗнч(КоллекцияСвойствМд) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных")
			Или ТипЗнч(КоллекцияСвойствМд) = Тип("КоллекцияОбъектовМетаданных") Тогда
			
			Для каждого ЭлементКоллекции Из КоллекцияСвойствМд Цикл
				
				ДанныеЭлементаКоллекции = Новый Структура("ТипЗаписи, Имя, Синоним, Комментарий, ДанныеКоллекции");
				ЗаполнитьЗначенияСвойств(ДанныеЭлементаКоллекции, ЭлементКоллекции);
				
				ДанныеЭлементаКоллекции.ДанныеКоллекции = Новый Массив;
				ДанныеЭлементаКоллекции.ТипЗаписи = "ОбъектМетаданных";
				
				Если КоллекцияСвойств.Имя = "ТабличныеЧасти" Тогда
					
					Для каждого Реквизит Из ЭлементКоллекции.Реквизиты Цикл
						
						СтруктураРеквизита = Новый Структура("ТипЗаписи, Имя, Синоним, Комментарий");
						ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Реквизит);
						
						СтруктураРеквизита.ТипЗаписи = "ОбъектМетаданных";
						
						ДанныеЭлементаКоллекции.ДанныеКоллекции.Добавить(СтруктураРеквизита);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДанныеКоллекции.Добавить(ДанныеЭлементаКоллекции);
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(КоллекцияСвойствМд) = Тип("ОписаниеТипов") Тогда
			
			// TODO: Это ветка для построения списка источников. Надо разделять их по типам: справочники, документы и т.п.
			
			КоллекцияСвойствМд = КоллекцияСвойствМд.Типы();
			
			Для А = 0 По КоллекцияСвойствМд.Количество() - 1 Цикл
				
				ЭлементКоллекции = КоллекцияСвойствМд[А];
				ДанныеЭлементаКоллекции = Новый Структура("ТипЗаписи, Имя, Синоним, Комментарий, ДанныеКоллекции");
				
				ОбъектТипа = Новый (ЭлементКоллекции);
				МетаданныеОбъектТипа = ОбъектТипа.Метаданные();
				ЗаполнитьЗначенияСвойств(ДанныеЭлементаКоллекции, МетаданныеОбъектТипа);
				
				ДанныеЭлементаКоллекции.ДанныеКоллекции = Новый Массив;
				ДанныеЭлементаКоллекции.ТипЗаписи = "ОбъектМетаданных";
				
				Если КоллекцияСвойств.Имя = "ТабличныеЧасти" Тогда
					
					Для каждого Реквизит Из МетаданныеОбъектТипа.Реквизиты Цикл
						
						СтруктураРеквизита = Новый Структура("ТипЗаписи, Имя, Синоним, Комментарий");
						ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Реквизит);
						
						СтруктураРеквизита.ТипЗаписи = "ОбъектМетаданных";
						
						ДанныеЭлементаКоллекции.ДанныеКоллекции.Добавить(СтруктураРеквизита);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДанныеКоллекции.Добавить(ДанныеЭлементаКоллекции);
				
				А = А + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Результат.Вставить(КоллекцияСвойств.Имя, Новый Структура("Коллекция, ДанныеКоллекции", КоллекцияСвойств, ДанныеКоллекции));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоллекцииСвойствОбъектаМетаданных()
	
	Результат = Новый Массив;
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "СтандартныеРеквизиты", "СтандартныйРеквизит", "СтандартныеРеквизиты", "Стандартные реквизиты", 44));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "СтандартныеТабличныеЧасти", "СтандартнаяТабличнаяЧасть", "СтандартныеТабличныеЧасти", "Стандартные табличные части", 46));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Графы", "Граф", "Графы", "Графы"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "ЗначенияПеречисления", "ЗначениеПеречисления", "ЗначенияПеречисления", "Значения", 45));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Измерения", "Измерение", "Измерения", "Измерения", 47));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Ресурсы", "Ресурс", "Ресурсы", "Ресурсы", 48));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Реквизиты", "Реквизит", "Реквизиты", "Реквизиты", 45));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "ПризнакиУчета", "ПризнакУчета", "ПризнакиУчета", "Признаки учета"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "ПризнакиУчетаСубконто", "ПризнакУчетаСубконто", "ПризнакиУчетаСубконто", "Признаки учета субконто"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Перерасчеты", "Перерасчет", "Перерасчеты", "Перерасчеты"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "ТабличныеЧасти", "ТабличнаяЧасть", "ТабличныеЧасти", "Табличные части", 46));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Формы", "Форма", "Формы", "Формы", 33));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Команды", "Команда", "Команды", "Команды", 34));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Макеты", "Макет", "Макеты", "Макеты", 36));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Операции", "Операция", "Операции", "Операции"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Источник", "Источник", "Источник", "Источник"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Состав", "Состав", "Состав", "Состав"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "РеквизитыАдресации", "РеквизитАдресации", "РеквизитыАдресации", "Реквизиты адресации"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Перерасчеты", "Перерасчет", "Перерасчеты", "Перерасчеты"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "ПризнакиУчета", "ПризнакУчета", "ПризнакиУчета", "Признаки учета"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "ПризнакиУчетаСубконто", "ПризнакУчетаСубконто", "ПризнакиУчетаСубконто", "Признаки учета субконто"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Поля", "Поле", "Поля", "Поля"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Таблицы", "Таблица", "Таблицы", "Таблицы"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Кубы", "Куб", "Кубы", "Кубы"));
	
	Результат.Добавить(Новый Структура("ТипЗаписи, ИмяКоллекции, ИмяЭлементаКоллекции, Имя, Синоним, НомерКартинки", "ГруппаОбъектовМетаданных", "Функции", "Функция", "Функции", "Функции"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Подключаемые

&НаКлиенте
Процедура ПодключаемыйСписокЭлементовОбъектаМетаданныхВыбор(Элемент,
	ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПутьКДаннымПоля = ПутьКДаннымПоляСпискаЭлементов(Поле.Имя);
	
	Попытка
		ПараметрыФормы = Новый Структура("ОбъектБазы", Элемент.ТекущиеДанные[ПутьКДаннымПоля]);
	Исключение
		Возврат;
	КонецПопытки;
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаРедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Типы

&НаСервере
Функция Тип_ЗаписьСтруктурыМетаданныхКонфигурации()
	
	Результат = ЭтаОбработка().Тип_ЗаписьСтруктурыМетаданныхКонфигурации();
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Тип_СвойстваОбъектаОбработкиДанных()
	
	Результат = ЭтаОбработка().Тип_СвойстваОбъектаОбработкиДанных();
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Тип_ПараметрыФормированияИмениЭлементаСписка()
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти