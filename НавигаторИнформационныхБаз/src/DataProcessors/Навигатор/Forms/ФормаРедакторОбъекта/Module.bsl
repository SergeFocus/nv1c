#Область Форма

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область Предусловия
	
	Если Не ТипЗнч(Параметры.ОбъектБазы) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если Не ЗначениеЗаполнено(Параметры.ОбъектБазы) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		МетаданныеОбъекта = Параметры.ОбъектБазы.Метаданные();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Попытка
		ДанныеОбъекта = Параметры.ОбъектБазы.ПолучитьОбъект();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	#КонецОбласти
	
	ОбъектБазы = Параметры.ОбъектБазы;
	
	//
	
	ЗаполнитьПоДаннымОбъектаИнформационнойБазы();
	
	//
	
	ВключенРежимРедактированияОбъекта = Ложь;
	УстановитьСвойстваЭлементовФормы();
	
	//
	
	ВсеТабличныеЧастиРежимОтображения = "Все";
	
	//
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповестить("ДобавитьВИсторию", ОбъектБазы, "Навигатор_ФормаРедакторОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "Навигатор" Тогда
		
		Если ИмяСобытия = "ЗакрытьВсеОкнаРедакторов" Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//
КонецПроцедуры

#КонецОбласти

#Область Таблицы

#Область ДанныеСвойства

&НаКлиенте
Процедура ВсеРеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле,
	СтандартнаяОбработка)
	
	#Область Предусловия
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Элемент.ТекущиеДанные.РеквизитИмя = "Ссылка" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.РеквизитЗначение);
	Иначе
		
		Если (Не ВключенРежимРедактированияОбъекта) Тогда
			
			ПараметрыФормы = Новый Структура("ОбъектБазы", Элемент.ТекущиеДанные.РеквизитЗначение);
			ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаРедакторОбъекта");
			
			ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ВсеРеквизиты

&НаКлиенте
Процедура ВсеРеквизитыРеквизитЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВсеРеквизиты.ТекущиеДанные;
	
	Если (ТекущиеДанные = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.РеквизитИзменен = Истина;
	
	Модифицированность = Истина;
	
КонецПроцедуры
#КонецОбласти

#Область ВсеТабличныеЧасти

&НаКлиенте
Процедура ВсеТабличныеЧастиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Область Предусловия
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТекущиеДанные.ТабличнаяЧастьТипСтроки = "ТабличнаяЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеТабличныеЧасти(ТекущиеДанные.ТабличнаяЧастьИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТабличныеЧастиРежимОтображенияПриИзменении(Элемент)
	
	ЗаполнитьВсеТабличныеЧасти();
	
КонецПроцедуры

#КонецОбласти

#Область ВсеРегистрыНакопления

&НаКлиенте
Процедура ВсеРегистрыНакопленияВыбор(Элемент, ВыбраннаяСтрока, Поле,
	СтандартнаяОбработка)
	
	#Область Предусловия
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеРегистрыНакопления(Элемент.ТекущиеДанные);
	
КонецПроцедуры
#КонецОбласти

#Область ВсеРегистрыСведений

&НаКлиенте
Процедура ВсеРегистрыСведенийВыбор(Элемент, ВыбраннаяСтрока, Поле,
	СтандартнаяОбработка)
	
	#Область Предусловия
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеРегистрыСведений(Элемент.ТекущиеДанные);
	
КонецПроцедуры
#КонецОбласти

#Область ВсеРегистрыБухгалтерии

&НаКлиенте
Процедура ВсеРегистрыБухгалтерииВыбор(Элемент, ВыбраннаяСтрока, Поле,
	СтандартнаяОбработка)
	
	#Область Предусловия
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеРегистрыБухгалтерии(Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ВсеРегистрыРасчета

&НаКлиенте
Процедура ВсеРегистрыРасчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Область Предусловия
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеРегистрыРасчета(Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоПодчиненныеОбъекты

&НаКлиенте
Процедура ДеревоПодчиненныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ОбъектБазы", Элемент.ТекущиеДанные.Ссылка);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаРедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область ДеревоУзловОбмена

&НаКлиенте
Процедура ДеревоУзловОбменаПометкаПриИзменении(Элемент)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ДеревоУзловОбмена.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Уровень = 0 Тогда
		ТекущиеДанные.Пометка = ?(ТекущиеДанные.Пометка = 1, 0, 1);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИзмВыполнено = Ложь;
	
	ЗарегистрироватьУдалитьИзмененияНаУзле(ТекущиеДанные.Ссылка, ТекущиеДанные.Пометка, ИзмВыполнено);
	
	Если ИзмВыполнено Тогда
		Если ТекущиеДанные.Пометка = 1 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Регистрация изменений:'");
			ТекстПредупреждения = НСтр("ru = 'Зарегистрировано изменение %1
			|на узле ""%0""'");
		ИначеЕсли ТекущиеДанные.Пометка = 0 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Отмена регистрации:'");
			ТекстПредупреждения = НСтр("ru = 'Отменена регистрация изменения %1
			|на узле ""%0"".'");
		КонецЕсли; 
	Иначе
		Если ТекущиеДанные.Пометка = 1 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Регистрация изменений:'");
			ТекстПредупреждения = НСтр("ru = 'Регистрация изменения %1
			|на узле ""%0""' не выполнена.");
		ИначеЕсли ТекущиеДанные.Пометка = 0 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Отмена регистрации:'");
			ТекстПредупреждения = НСтр("ru = 'Отмена регистрации изменения %1
			|на узле ""%0"" не выполнена.'");
		КонецЕсли; 
	КонецЕсли;
	
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%0", ТекущиеДанные.Ссылка);
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ОбъектБазы);
	
	ПоказатьОповещениеПользователя(ЗаголовокПредупреждения,
			НавигационнаяСсылкаНаУзелПланаОбмена(ТекущиеДанные.Ссылка),
			ТекстПредупреждения,
			Элементы.КартинкаИнформация32.Картинка);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура КомандаСтруктураПодчиненности(Команда)
	
	СтруктураПодчиненности();
	
	// Развернуть дерево цепочки найденных документов.
	
	КоллекцияЭлементовДерева = ДеревоПодчиненныеОбъекты.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из КоллекцияЭлементовДерева Цикл
		
		ИдЭлемента = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.ДеревоПодчиненныеОбъекты.Развернуть(ИдЭлемента, Истина);
		
	КонецЦикла;
	
	Элементы.СтраницаПодчиненныеДокументы.Видимость = Истина;
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПодчиненныеДокументы;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИзмененияОбъекта(Команда)
	
	ЗаписатьИзмененияОбъекта();
	УстановитьСвойстваЭлементовФормы();
	
	ПоказатьОповещениеПользователя("Изменение:", , "'" + ОбъектБазы + "' записан.", БиблиотекаКартинок.Записать);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьЗакрыть(Команда)
	
	ЗаписатьИзмененияОбъекта();
	
	ПоказатьОповещениеПользователя("Изменение:", , "'" + ОбъектБазы + "' записан.", БиблиотекаКартинок.Записать);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьЗначениеРеквизита(Команда)
	
	ИзменитьЗначениеРеквизита();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьОбъект(Команда)
	
	СсылкаНаОбъект = СсылкаНаОбъект();
	
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, СсылкаНаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиДокумент(Команда)
	
	ПровестиДокумент();
	УстановитьСвойстваЭлементовФормы();
	
	// Развернуть дерево всех реквизитов.
	
	КоллекцияЭлементовДерева = ВсеРеквизиты.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из КоллекцияЭлементовДерева Цикл
		ИдЭлемента = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.ВсеРеквизиты.Развернуть(ИдЭлемента, Истина);
	КонецЦикла;
	
	ПоказатьОповещениеПользователя("Изменение:", , "'" + ОбъектБазы + "' проведен.", БиблиотекаКартинок.Провести);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьПроведениеДокумента(Команда)
	
	ОтменитьПроведениеДокумента();
	УстановитьСвойстваЭлементовФормы();
	
	// Развернуть дерево всех реквизитов.
	
	КоллекцияЭлементовДерева = ВсеРеквизиты.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из КоллекцияЭлементовДерева Цикл
		ИдЭлемента = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.ВсеРеквизиты.Развернуть(ИдЭлемента, Истина);
	КонецЦикла;
	
	ПоказатьОповещениеПользователя("Изменение:", , "'" + ОбъектБазы + "' проведение отменено.", БиблиотекаКартинок.ОтменаПроведения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигационнаяСсылкаПерейти(Команда)
	
	ПерейтиПоНавигационнойСсылкеНаЭлемент();
	Оповестить("ДобавитьВИсторию", ОбъектБазы, "Навигатор_ФормаРедакторОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВИзбранное(Команда)
	
	ДобавитьВИзбранное();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВключитьРежимРедактированияОбъекта(Команда)
	
	ВключитьРежимРедактированияОбъекта();
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеречитатьДанныеОбъекта(Команда)
	
	ПеречитатьДанныеОбъекта();
	
	//
	
	КоллекцияЭлементовДерева = ВсеРеквизиты.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из КоллекцияЭлементовДерева Цикл
		
		ИдЭлемента = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.ВсеРеквизиты.Развернуть(ИдЭлемента, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьXML(Команда)
	
	ОтобразитьДанныеXMLОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигационнаяСсылкаПерейтиНазад(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаНавигационнаяСсылкаПерейтиВперед(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПометкуУдаления(Команда)
	
	Перем ПометкаУдаленияУстановлена;
	
	УстановитьПометкуУдаления(ПометкаУдаленияУстановлена);
	
	Если ПометкаУдаленияУстановлена Тогда
		ПоказатьОповещениеПользователя("Пометка удаления:", , Строка(ОбъектБазы) + " пометка удаления установлена.", БиблиотекаКартинок.ПометитьНаУдаление);
	Иначе
		ПоказатьОповещениеПользователя("Пометка удаления:", , Строка(ОбъектБазы) + " пометка удаления не установлена!", Элементы.КартинкаПредупреждение.Картинка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьПометкуУдаления(Команда)
	
	Перем ПометкаУдаленияСнята;
	
	СнятьПометкуУдаления(ПометкаУдаленияСнята);
	
	Если ПометкаУдаленияСнята Тогда
		ПоказатьОповещениеПользователя("Пометка удаления:", , Строка(ОбъектБазы) + " пометка удаления снята.", Элементы.КартинкаПометкаУдаленияСнята.Картинка);
	Иначе
		ПоказатьОповещениеПользователя("Пометка удаления:", , Строка(ОбъектБазы) + " пометка удаления не снята!", Элементы.КартинкаПредупреждение.Картинка);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Процедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеТабличныеЧасти(ИмяТабличнойЧасти)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтобразитьДанныеТабличнойЧасти(ИмяТабличнойЧасти);
	АктивизироватьСтраницуТаблицыОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеРегистрыНакопления(СвойстваРегистра)
	
	#Область Предусловия
	
	Если СвойстваРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтобразитьДанныеДвиженийПоРегистру("РегистрНакопления", СвойстваРегистра.РегистрНакопленияИмя);
	АктивизироватьСтраницуТаблицыОбъекта("РегистрНакопления", СвойстваРегистра.РегистрНакопленияИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеРегистрыСведений(СвойстваРегистра)
	
	#Область Предусловия
	
	Если СвойстваРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтобразитьДанныеДвиженийПоРегистру("РегистрСведений", СвойстваРегистра.РегистрСведенийИмя);
	АктивизироватьСтраницуТаблицыОбъекта("РегистрСведений", СвойстваРегистра.РегистрСведенийИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеРегистрыБухгалтерии(СвойстваРегистра)
	
	ОтобразитьДанныеДвиженийПоРегистру("РегистрБухгалтерии", СвойстваРегистра.РегистрБухгалтерииИмя);
	АктивизироватьСтраницуТаблицыОбъекта("РегистрБухгалтерии", СвойстваРегистра.РегистрБухгалтерииИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеРегистрыРасчета(СвойстваРегистра)
	
	ОтобразитьДанныеДвиженийПоРегистру("РегистрРасчета", СвойстваРегистра.РегистрРасчетаИмя);
	АктивизироватьСтраницуТаблицыОбъекта("РегистрРасчета", СвойстваРегистра.РегистрРасчетаИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеРеквизита()
	
	ТекущиеДанные = Элементы.ВсеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРеквизита = ТекущиеДанные.РеквизитЗначение;
	
	ПараметрыРедактирования = Новый Структура("РеквизитИмя, РеквизитЗначение");
	ЗаполнитьЗначенияСвойств(ПараметрыРедактирования, ТекущиеДанные);
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьЗначениеРеквизитаЗавершение", ЭтотОбъект, ПараметрыРедактирования);
	ПоказатьВводЗначения(Оповещение, ЗначениеРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеРеквизитаЗавершение(Значение,
	ПараметрыРедактирования) Экспорт
	
	//#Область Предусловия
	//
	//Если Значение = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если (Значение = ПараметрыРедактирования.РеквизитЗначение) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//#КонецОбласти
	//
	//Строки = ВсеРеквизиты.НайтиСтроки(Новый Структура("РеквизитИмя", ПараметрыРедактирования.РеквизитИмя));
	//
	//Если Строки.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Строки[0].РеквизитЗначение = Значение;
	//Строки[0].РеквизитИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранное()
	
	Оповестить("ДобавитьВИзбранное", ОбъектБазы, "Навигатор_ФормаРедакторОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьОбъект(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаУдалитьОбъектЗавершение", ЭтотОбъект), "Удалить " + ОбъектБазы + "?", РежимДиалогаВопрос.ОКОтмена, , , "Непосредственное удаление");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьОбъектЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Перем УдалениеВыполнено, ПредставлениеОбъекта;
	
	#Область Предусловия
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	УдалитьОбъектБазы(УдалениеВыполнено, ПредставлениеОбъекта);
	
	Если УдалениеВыполнено Тогда
		ПоказатьОповещениеПользователя("Удаление:", , ПредставлениеОбъекта + " удален.", БиблиотекаКартинок.УдалитьНепосредственно);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСтрокуВРедактореЗаписи(Элемент)
	
	ОткрытьСтрокуВРедактореЗаписи(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтрокуВРедактореЗаписи(ИмяЭлементаКоманды)
	
	#Область Предусловия
	
	ИмяСпискаЭлементов = ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если Не ЗначениеЗаполнено(ИмяСпискаЭлементов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТаблицы = ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если ПараметрыТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяСпискаЭлементов].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	НомерЗаписи = ТекущиеДанные[ИмяСпискаЭлементов + Объект.Система_РазделительЧастейИмен + "НомерСтроки"];
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТипТаблицы",  ПараметрыТаблицы.ТипТаблицы);
	ПараметрыЗаписи.Вставить("ИмяТаблицы",  ПараметрыТаблицы.ИмяТаблицы);
	ПараметрыЗаписи.Вставить("НомерЗаписи", НомерЗаписи);
	
	ПараметрыОткрытия = Новый Структура("ОбъектБазы, ПараметрыЗаписи", ОбъектБазы, ПараметрыЗаписи);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаРедакторЗаписи");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыОткрытия, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Регистр_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "НомерСтроки" Тогда
		
		// Сделать:
		// Сформировать структру данных и передать в форму редактора.
	Иначе
		ПараметрыФормы = Новый Структура("ОбъектБазы", Элемент.ТекущиеДанные[Поле.Имя]);
	КонецЕсли;
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаРедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТабличнаяЧасть_Выбор(Элемент, ВыбраннаяСтрока, Поле,
	СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	#Область Предусловия
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыФормы = Новый Структура("ОбъектБазы", ТекущиеДанные[Поле.Имя]);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ФормаРедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеРеквизиты()
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = ОбъектБазы.Метаданные();
	
	Если Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	дз_ВсеРеквизиты = РеквизитФормыВЗначение("ВсеРеквизиты");
	дз_ВсеРеквизиты.Строки.Очистить();
	
	// Заполнить системные реквизиты.
	
	//
	
	ПорядокСортировки = 0;
	
	стр_СистемныеРеквизиты = дз_ВсеРеквизиты.Строки.Добавить();
	стр_СистемныеРеквизиты.РеквизитИмя = "СистемныеРеквизиты";
	стр_СистемныеРеквизиты.РеквизитПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("СистемныеРеквизиты (%1)", 2);
	стр_СистемныеРеквизиты.РеквизитПорядокСортировки = ПорядокСортировки;
	стр_СистемныеРеквизиты.РеквизитЭтоСистемный = Истина;
	стр_СистемныеРеквизиты.РеквизитТипСтроки = "СистемныеРеквизиты";
	стр_СистемныеРеквизиты.РеквизитНомерКартинки = 51;
	
	//
	
	ПорядокСортировки = ПорядокСортировки + 1;
	
	стр_СистемныйРеквизит = стр_СистемныеРеквизиты.Строки.Добавить();
	стр_СистемныйРеквизит.РеквизитИмя = "IdRef";
	стр_СистемныйРеквизит.РеквизитПредставление = "IdRef";
	стр_СистемныйРеквизит.РеквизитПорядокСортировки = ПорядокСортировки;
	стр_СистемныйРеквизит.РеквизитЭтоСистемный = Истина;
	стр_СистемныйРеквизит.РеквизитТипСтроки = "СистемныйРеквизит";
	стр_СистемныйРеквизит.РеквизитТип = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36), , );
	стр_СистемныйРеквизит.РеквизитПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(стр_СистемныйРеквизит.РеквизитТип);
	стр_СистемныйРеквизит.РеквизитСиноним = "Ref";
	стр_СистемныйРеквизит.РеквизитЗначение = ОбъектБазы.Ссылка.УникальныйИдентификатор();
	стр_СистемныйРеквизит.РеквизитНомерКартинки = 51;
	
	//
	
	НвСсылка = ЭтаОбработка.НавигационнаяСсылкаНаЭлемент(ОбъектБазы.Ссылка);
	
	Если ЗначениеЗаполнено(НвСсылка) Тогда
		
		ПорядокСортировки = ПорядокСортировки + 1;
		
		стр_СистемныйРеквизит = стр_СистемныеРеквизиты.Строки.Добавить();
		стр_СистемныйРеквизит.РеквизитИмя = "НавигационнаяСсылка";
		стр_СистемныйРеквизит.РеквизитПредставление = "НавигационнаяСсылка";
		стр_СистемныйРеквизит.РеквизитПорядокСортировки = ПорядокСортировки;
		стр_СистемныйРеквизит.РеквизитЭтоСистемный = Истина;
		стр_СистемныйРеквизит.РеквизитТипСтроки = "СистемныйРеквизит";
		стр_СистемныйРеквизит.РеквизитТип = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0), , );
		стр_СистемныйРеквизит.РеквизитПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(стр_СистемныйРеквизит.РеквизитТип);
		стр_СистемныйРеквизит.РеквизитСиноним = "Навигационная ссылка";
		стр_СистемныйРеквизит.РеквизитЗначение = НвСсылка;
		стр_СистемныйРеквизит.РеквизитНомерКартинки = 51;
		
	КонецЕсли;
	
	//
	
	ПорядокСортировки = ПорядокСортировки + 1;
	
	стр_СистемныйРеквизит = стр_СистемныеРеквизиты.Строки.Добавить();
	стр_СистемныйРеквизит.РеквизитИмя = "ВерсияДанных";
	стр_СистемныйРеквизит.РеквизитПредставление = "ВерсияДанных";
	стр_СистемныйРеквизит.РеквизитПорядокСортировки = ПорядокСортировки;
	стр_СистемныйРеквизит.РеквизитЭтоСистемный = Истина;
	стр_СистемныйРеквизит.РеквизитТипСтроки = "СистемныйРеквизит";
	стр_СистемныйРеквизит.РеквизитТип = Новый ОписаниеТипов("Строка");
	стр_СистемныйРеквизит.РеквизитПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(стр_СистемныйРеквизит.РеквизитТип);
	стр_СистемныйРеквизит.РеквизитСиноним = "Версия данных";
	стр_СистемныйРеквизит.РеквизитЗначение = ОбъектБазы.Ссылка.ВерсияДанных;
	стр_СистемныйРеквизит.РеквизитНомерКартинки = 51;
	
	//
	
	ПорядокСортировки = ПорядокСортировки + 1;
	
	стр_СистемныйРеквизит = стр_СистемныеРеквизиты.Строки.Добавить();
	стр_СистемныйРеквизит.РеквизитИмя = "Представление";
	стр_СистемныйРеквизит.РеквизитПредставление = "Представление";
	стр_СистемныйРеквизит.РеквизитПорядокСортировки = ПорядокСортировки;
	стр_СистемныйРеквизит.РеквизитЭтоСистемный = Истина;
	стр_СистемныйРеквизит.РеквизитТипСтроки = "СистемныйРеквизит";
	стр_СистемныйРеквизит.РеквизитТип = Новый ОписаниеТипов("Строка");
	стр_СистемныйРеквизит.РеквизитПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(стр_СистемныйРеквизит.РеквизитТип);
	стр_СистемныйРеквизит.РеквизитСиноним = "Представление";
	стр_СистемныйРеквизит.РеквизитЗначение = Строка(ОбъектБазы);
	стр_СистемныйРеквизит.РеквизитНомерКартинки = 51;
	
	//
	
	Если МетаданныеОбъекта.СтандартныеРеквизиты.Количество() > 0 Тогда
		
		ПорядокСортировки = ПорядокСортировки + 1;
		
		стр_СтРеквизиты = дз_ВсеРеквизиты.Строки.Добавить();
		стр_СтРеквизиты.РеквизитИмя = "СтандартныеРеквизиты";
		стр_СтРеквизиты.РеквизитПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("СтандартныеРеквизиты (%1)", МетаданныеОбъекта.СтандартныеРеквизиты.Количество());
		стр_СтРеквизиты.РеквизитПорядокСортировки = ПорядокСортировки;
		стр_СтРеквизиты.РеквизитЭтоСтандартный = Истина;
		стр_СтРеквизиты.РеквизитНомерКартинки = 44;
		стр_СтРеквизиты.РеквизитТипСтроки = "СтандартныеРеквизиты";
		
		Для каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			
			ПорядокСортировки = ПорядокСортировки + 1;
			
			стр_СтРеквизит = стр_СтРеквизиты.Строки.Добавить();
			стр_СтРеквизит.РеквизитИмя = СтандартныйРеквизит.Имя;
			стр_СтРеквизит.РеквизитПредставление = СтандартныйРеквизит.Имя;
			стр_СтРеквизит.РеквизитТип = СтандартныйРеквизит.Тип;
			стр_СтРеквизит.РеквизитПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(СтандартныйРеквизит.Тип);
			стр_СтРеквизит.РеквизитСиноним = СтандартныйРеквизит.Синоним;
			стр_СтРеквизит.РеквизитЗначение = ОбъектБазы[СтандартныйРеквизит.Имя];
			стр_СтРеквизит.РеквизитПорядокСортировки = ПорядокСортировки;
			стр_СтРеквизит.РеквизитЭтоСтандартный = Истина;
			стр_СтРеквизит.РеквизитНомерКартинки = 44;
			стр_СтРеквизит.РеквизитТипСтроки = "СтандартныйРеквизит";
			
		КонецЦикла;
		
		стр_СтРеквизиты.Строки.Сортировать("РеквизитИмя");
		
	КонецЕсли;
	
	//
	
	Если МетаданныеОбъекта.Реквизиты.Количество() > 0 Тогда
		
		стр_Реквизиты = дз_ВсеРеквизиты.Строки.Добавить();
		стр_Реквизиты.РеквизитИмя = "Реквизиты";
		стр_Реквизиты.РеквизитПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Реквизиты (%1)", МетаданныеОбъекта.Реквизиты.Количество());
		стр_Реквизиты.РеквизитПорядокСортировки = ПорядокСортировки;
		стр_Реквизиты.РеквизитЭтоСтандартный = Истина;
		стр_Реквизиты.РеквизитНомерКартинки = 45;
		стр_Реквизиты.РеквизитТипСтроки = "Реквизиты";
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			
			стр_Реквизит = стр_Реквизиты.Строки.Добавить();
			стр_Реквизит.РеквизитИмя = Реквизит.Имя;
			стр_Реквизит.РеквизитПредставление = Реквизит.Имя;
			стр_Реквизит.РеквизитТип = Реквизит.Тип;
			стр_Реквизит.РеквизитПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Реквизит.Тип);
			стр_Реквизит.РеквизитСиноним = Реквизит.Синоним;
			стр_Реквизит.РеквизитКомментарий = Реквизит.Комментарий;
			стр_Реквизит.РеквизитЗначение = ОбъектБазы[Реквизит.Имя];
			стр_Реквизит.РеквизитПорядокСортировки = МетаданныеОбъекта.Реквизиты.Количество();
			стр_Реквизит.РеквизитНомерКартинки = 45;
			стр_Реквизит.РеквизитУдалить = Врег(Лев(Реквизит.Имя, СтрДлина("Удалить"))) = Врег("Удалить");
			
		КонецЦикла;
		
		стр_Реквизиты.Строки.Сортировать("РеквизитИмя");
		
	КонецЕсли;
	
	дз_ВсеРеквизиты.Строки.Сортировать("РеквизитПорядокСортировки, РеквизитИмя");
	
	ЗначениеВРеквизитФормы(дз_ВсеРеквизиты, "ВсеРеквизиты");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеТабличныеЧасти()
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	дз_ВсеТабличныеЧасти = РеквизитФормыВЗначение("ВсеТабличныеЧасти");
	дз_ВсеТабличныеЧасти.Строки.Очистить();
	
	ЕстьТабличныеЧасти = Ложь;
	ОбъектМд = ОбъектБазы.Метаданные();
	
	Попытка
		ТЧ = ОбъектМд.ТабличныеЧасти;
		ЕстьТабличныеЧасти = Истина;
	Исключение
		//
	КонецПопытки;
	
	Если (ЕстьТабличныеЧасти) Тогда
		
		Для каждого ТаблЧастьМд Из ОбъектМд.ТабличныеЧасти Цикл
			
			КоличествоСтрокТаблЧасти = ОбъектБазы[ТаблЧастьМд.Имя].Количество();
			
			Если Не (ВсеТабличныеЧастиРежимОтображения = "Все") Тогда
				Если ВсеТабличныеЧастиРежимОтображения = "ЕстьЗаписи" И КоличествоСтрокТаблЧасти = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ВсеТабличныеЧастиРежимОтображения = "НетЗаписей" И КоличествоСтрокТаблЧасти > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			стр_ТабличнаяЧасть = дз_ВсеТабличныеЧасти.Строки.Добавить();
			стр_ТабличнаяЧасть.ТабличнаяЧастьИмя = ТаблЧастьМд.Имя;
			стр_ТабличнаяЧасть.ТабличнаяЧастьСиноним = ТаблЧастьМд.Синоним;
			
			КоличествоСтрокТаблЧасти = ОбъектБазы[ТаблЧастьМд.Имя].Количество();
			стр_ТабличнаяЧасть.ТабличнаяЧастьКоличествоСтрок = КоличествоСтрокТаблЧасти;
			
			стр_ТабличнаяЧасть.ТабличнаяЧастьНомерКартинки = 46;
			стр_ТабличнаяЧасть.ТабличнаяЧастьТипСтроки = "ТабличнаяЧасть";
			
			ПредставлениеТаблЧасти = ?(КоличествоСтрокТаблЧасти > 0, ЭтаОбработка.ПодставитьПараметрыВСтроку("%1 (%2)", ТаблЧастьМд.Имя, КоличествоСтрокТаблЧасти), ТаблЧастьМд.Имя);
			
			стр_ТабличнаяЧасть.ТабличнаяЧастьПредставление = ПредставлениеТаблЧасти;
			
			Если ВРег(Лев(ТаблЧастьМд.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
				стр_ТабличнаяЧасть.ТабличнаяЧастьВыводитьЗачеркнутым = Истина;
			КонецЕсли;
			
			Для каждого РеквизитТаблЧасти Из ТаблЧастьМд.Реквизиты Цикл
				
				стр_Реквизит = стр_ТабличнаяЧасть.Строки.Добавить();
				стр_Реквизит.ТабличнаяЧастьИмя = РеквизитТаблЧасти.Имя;
				стр_Реквизит.ТабличнаяЧастьПредставление = РеквизитТаблЧасти.Имя;
				стр_Реквизит.ТабличнаяЧастьПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(РеквизитТаблЧасти.Тип);
				стр_Реквизит.ТабличнаяЧастьСиноним = РеквизитТаблЧасти.Синоним;
				стр_Реквизит.ТабличнаяЧастьКомментарий = РеквизитТаблЧасти.Комментарий;
				стр_Реквизит.ТабличнаяЧастьНомерКартинки = 45;
				стр_Реквизит.ТабличнаяЧастьТипСтроки = "Реквизит";
				
			КонецЦикла;
			
		КонецЦикла;
		
		дз_ВсеТабличныеЧасти.Строки.Сортировать("ТабличнаяЧастьИмя");
		
	КонецЕсли;
	
	Элементы.СтраницаТабличныеЧасти.Видимость = ЕстьТабличныеЧасти;
	
	ЗначениеВРеквизитФормы(дз_ВсеТабличныеЧасти, "ВсеТабличныеЧасти");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзмененияНаУзлахОбмена()
	
	ЭтаОбработка = ЭтаОбработка();
	
	ОбъектБазыМД = ОбъектБазы.Метаданные();
	
	дз_ДеревоУзловОбмена = РеквизитФормыВЗначение("ДеревоУзловОбмена");
	дз_ДеревоУзловОбмена.Строки.Очистить();
	
	Для каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если ПланОбмена.Состав.Найти(ОбъектБазыМД) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзлыПланаОбмена = ЭтаОбработка.УзлыПланаОбмена(ПланОбмена.Имя);
		
		Если УзлыПланаОбмена.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		стр_ДеревоУзловОбмена = дз_ДеревоУзловОбмена.Строки.Добавить();
		стр_ДеревоУзловОбмена.Наименование = ПланОбмена.Имя;
		стр_ДеревоУзловОбмена.ИндексКартинки = 0;
		
		//
		
		Для каждого стр_УзлыПланаОбмена Из УзлыПланаОбмена Цикл
			
			стр_Узел = стр_ДеревоУзловОбмена.Строки.Добавить();
			стр_Узел.Наименование = стр_УзлыПланаОбмена.Наименование;
			стр_Узел.Код = стр_УзлыПланаОбмена.Код;
			
			стр_Узел.Ссылка = стр_УзлыПланаОбмена.Ссылка;
			стр_Узел.Уровень = 1;
			стр_Узел.ИндексКартинки = 1;
			стр_Узел.Пометка = ЭтаОбработка.ОбъектБазыЗарегистрированНаУзлеПланаОбмена(ОбъектБазы, стр_УзлыПланаОбмена.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(дз_ДеревоУзловОбмена, "ДеревоУзловОбмена");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязанныеОбъекты()
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеДвижения()
	
	// TODO: Рефакторинг. Переделать на универсальное заполнение.
	// Работа с реквизитами всех регистров должна быть единой.
	
	ЭтаОбработка = ЭтаОбработка();
	
	дз_ВсеРегистрыНакопления = РеквизитФормыВЗначение("ВсеРегистрыНакопления");
	дз_ВсеРегистрыНакопления.Строки.Очистить();
	
	дз_ВсеРегистрыСведений = РеквизитФормыВЗначение("ВсеРегистрыСведений");
	дз_ВсеРегистрыСведений.Строки.Очистить();
	
	дз_ВсеРегистрыБухгалтерии = РеквизитФормыВЗначение("ВсеРегистрыБухгалтерии");
	дз_ВсеРегистрыБухгалтерии.Строки.Очистить();
	
	дз_ВсеРегистрыРасчета = РеквизитФормыВЗначение("ВсеРегистрыРасчета");
	дз_ВсеРегистрыРасчета.Строки.Очистить();
	
	МетаданныеОбъекта = ОбъектБазы.Метаданные();
	ЭтоДокумент = Метаданные.Документы.Содержит(МетаданныеОбъекта);
	
	Если ЭтоДокумент Тогда
		
		Для каждого МетаданныеРегистра Из МетаданныеОбъекта.Движения Цикл
			
			Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
				
				стр_Регистр = дз_ВсеРегистрыНакопления.Строки.Добавить();
				стр_Регистр.РегистрНакопленияИмя = МетаданныеРегистра.Имя;
				стр_Регистр.РегистрНакопленияСиноним = МетаданныеРегистра.Синоним;
				стр_Регистр.РегистрНакопленияВид = МетаданныеРегистра.ВидРегистра;
				стр_Регистр.РегистрНакопленияТипСтроки = "РегистрНакопления";
				стр_Регистр.РегистрНакопленияНомерКартинки = 14;
				
				КолЗаписей = КоличествоЗаписейПоРегистру(МетаданныеРегистра);
				стр_Регистр.РегистрНакопленияКоличествоЗаписей = КолЗаписей;
				
				ПредставлениеРегистра = ?(КолЗаписей > 0, ЭтаОбработка.ПодставитьПараметрыВСтроку("%1 (%2)", МетаданныеРегистра.Имя, КолЗаписей), МетаданныеРегистра.Имя);
				стр_Регистр.РегистрНакопленияПредставление = ПредставлениеРегистра;
				
				стр_СтРеквизиты = стр_Регистр.Строки.Добавить();
				стр_СтРеквизиты.РегистрНакопленияИмя = "СтандартныеРеквизиты";
				стр_СтРеквизиты.РегистрНакопленияПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("СтандартныеРеквизиты (%1)", МетаданныеРегистра.СтандартныеРеквизиты.Количество());
				стр_СтРеквизиты.РегистрНакопленияНомерКартинки = 44;
				стр_СтРеквизиты.РегистрНакопленияТипСтроки = "СтандартныеРеквизиты";
				
				Для каждого СтРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
					
					стр_СтРеквизит = стр_СтРеквизиты.Строки.Добавить();
					стр_СтРеквизит.РегистрНакопленияИмя = СтРеквизит.Имя;
					стр_СтРеквизит.РегистрНакопленияПредставление = СтРеквизит.Имя;
					стр_СтРеквизит.РегистрНакопленияСиноним = СтРеквизит.Синоним;
					стр_СтРеквизит.РегистрНакопленияКомментарий = СтРеквизит.Комментарий;
					стр_СтРеквизит.РегистрНакопленияНомерКартинки = 44;
					стр_СтРеквизит.РегистрНакопленияТипСтроки = "СтандартныйРеквизит";
					стр_СтРеквизит.РегистрНакопленияПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(СтРеквизит.Тип);
					
				КонецЦикла;
				
				стр_СтРеквизиты.Строки.Сортировать("РегистрНакопленияИмя");
				
				стр_Измерения = стр_Регистр.Строки.Добавить();
				стр_Измерения.РегистрНакопленияИмя = "Измерения";
				стр_Измерения.РегистрНакопленияПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Измерения (%1)", МетаданныеРегистра.Измерения.Количество());
				стр_Измерения.РегистрНакопленияНомерКартинки = 47;
				стр_Измерения.РегистрНакопленияТипСтроки = "Измерения";
				
				Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
					
					стр_Измерение = стр_Измерения.Строки.Добавить();
					стр_Измерение.РегистрНакопленияИмя = Измерение.Имя;
					стр_Измерение.РегистрНакопленияПредставление = Измерение.Имя;
					стр_Измерение.РегистрНакопленияСиноним = Измерение.Синоним;
					стр_Измерение.РегистрНакопленияКомментарий = Измерение.Комментарий;
					стр_Измерение.РегистрНакопленияНомерКартинки = 47;
					стр_Измерение.РегистрНакопленияТипСтроки = "Измерение";
					стр_Измерение.РегистрНакопленияПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Измерение.Тип);
					
				КонецЦикла;
				
				стр_Измерения.Строки.Сортировать("РегистрНакопленияИмя");
				
				стр_Ресурсы = стр_Регистр.Строки.Добавить();
				стр_Ресурсы.РегистрНакопленияИмя = "Ресурсы";
				стр_Ресурсы.РегистрНакопленияПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Ресурсы (%1)", МетаданныеРегистра.Ресурсы.Количество());
				стр_Ресурсы.РегистрНакопленияНомерКартинки = 48;
				стр_Ресурсы.РегистрНакопленияТипСтроки = "Ресурсы";
				
				Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					
					стр_Ресурс = стр_Ресурсы.Строки.Добавить();
					стр_Ресурс.РегистрНакопленияИмя = Ресурс.Имя;
					стр_Ресурс.РегистрНакопленияПредставление = Ресурс.Имя;
					стр_Ресурс.РегистрНакопленияСиноним = Ресурс.Синоним;
					стр_Ресурс.РегистрНакопленияКомментарий = Ресурс.Комментарий;
					стр_Ресурс.РегистрНакопленияНомерКартинки = 48;
					стр_Ресурс.РегистрНакопленияТипСтроки = "Ресурс";
					стр_Ресурс.РегистрНакопленияПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Ресурс.Тип);
					
				КонецЦикла;
				
				стр_Ресурсы.Строки.Сортировать("РегистрНакопленияИмя");
				
				Если МетаданныеРегистра.Реквизиты.Количество() > 0 Тогда
					
					стр_Реквизиты = стр_Регистр.Строки.Добавить();
					стр_Реквизиты.РегистрНакопленияИмя = "Реквизиты";
					стр_Реквизиты.РегистрНакопленияПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Реквизиты (%1)", МетаданныеРегистра.Ресурсы.Количество());
					стр_Реквизиты.РегистрНакопленияНомерКартинки = 45;
					стр_Реквизиты.РегистрНакопленияТипСтроки = "Реквизиты";
					
					Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
						
						стр_Реквизит = стр_Реквизиты.Строки.Добавить();
						стр_Реквизит.РегистрНакопленияИмя = Реквизит.Имя;
						стр_Реквизит.РегистрНакопленияПредставление = Реквизит.Имя;
						стр_Реквизит.РегистрНакопленияСиноним = Реквизит.Синоним;
						стр_Реквизит.РегистрНакопленияКомментарий = Реквизит.Комментарий;
						стр_Реквизит.РегистрНакопленияНомерКартинки = 45;
						стр_Реквизит.РегистрНакопленияТипСтроки = "Реквизит";
						стр_Реквизит.РегистрНакопленияПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Реквизит.Тип);
						
					КонецЦикла;
					
					стр_Реквизиты.Строки.Сортировать("РегистрНакопленияИмя");
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра) Тогда
				
				стр_Регистр = дз_ВсеРегистрыСведений.Строки.Добавить();
				стр_Регистр.РегистрСведенийИмя = МетаданныеРегистра.Имя;
				стр_Регистр.РегистрСведенийСиноним = МетаданныеРегистра.Синоним;
				стр_Регистр.РегистрСведенийТипСтроки = "РегистрСведений";
				стр_Регистр.РегистрСведенийНомерКартинки = 13;
				
				КолЗаписей = КоличествоЗаписейПоРегистру(МетаданныеРегистра);
				стр_Регистр.РегистрСведенийКоличествоЗаписей = КолЗаписей;
				
				ПредставлениеРегистра = ?(КолЗаписей > 0, ЭтаОбработка.ПодставитьПараметрыВСтроку("%1 (%2)", МетаданныеРегистра.Имя, КолЗаписей), МетаданныеРегистра.Имя);
				стр_Регистр.РегистрСведенийПредставление = ПредставлениеРегистра;
				
				стр_СтРеквизиты = стр_Регистр.Строки.Добавить();
				стр_СтРеквизиты.РегистрСведенийИмя = "СтандартныеРеквизиты";
				стр_СтРеквизиты.РегистрСведенийПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("СтандартныеРеквизиты (%1)", МетаданныеРегистра.СтандартныеРеквизиты.Количество());
				стр_СтРеквизиты.РегистрСведенийНомерКартинки = 44;
				стр_СтРеквизиты.РегистрСведенийТипСтроки = "СтандартныеРеквизиты";
				
				Для каждого СтРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
					
					стр_СтРеквизит = стр_СтРеквизиты.Строки.Добавить();
					стр_СтРеквизит.РегистрСведенийИмя = СтРеквизит.Имя;
					стр_СтРеквизит.РегистрСведенийПредставление = СтРеквизит.Имя;
					стр_СтРеквизит.РегистрСведенийСиноним = СтРеквизит.Синоним;
					стр_СтРеквизит.РегистрСведенийКомментарий = СтРеквизит.Комментарий;
					стр_СтРеквизит.РегистрСведенийНомерКартинки = 44;
					стр_СтРеквизит.РегистрСведенийТипСтроки = "СтандартныйРеквизит";
					стр_СтРеквизит.РегистрСведенийПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(СтРеквизит.Тип);
					
				КонецЦикла;
				
				стр_СтРеквизиты.Строки.Сортировать("РегистрСведенийИмя");
				
				стр_Измерения = стр_Регистр.Строки.Добавить();
				стр_Измерения.РегистрСведенийИмя = "Измерения";
				стр_Измерения.РегистрСведенийПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Измерения (%1)", МетаданныеРегистра.Измерения.Количество());
				стр_Измерения.РегистрСведенийНомерКартинки = 47;
				стр_Измерения.РегистрСведенийТипСтроки = "Измерения";
				
				Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
					
					стр_Измерение = стр_Измерения.Строки.Добавить();
					стр_Измерение.РегистрСведенийИмя = Измерение.Имя;
					стр_Измерение.РегистрСведенийПредставление = Измерение.Имя;
					стр_Измерение.РегистрСведенийСиноним = Измерение.Синоним;
					стр_Измерение.РегистрСведенийКомментарий = Измерение.Комментарий;
					стр_Измерение.РегистрСведенийНомерКартинки = 47;
					стр_Измерение.РегистрСведенийТипСтроки = "Измерение";
					стр_Измерение.РегистрСведенийПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Измерение.Тип);
					
				КонецЦикла;
				
				стр_Измерения.Строки.Сортировать("РегистрСведенийИмя");
				
				стр_Ресурсы = стр_Регистр.Строки.Добавить();
				стр_Ресурсы.РегистрСведенийИмя = "Ресурсы";
				стр_Ресурсы.РегистрСведенийПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Ресурсы (%1)", МетаданныеРегистра.Ресурсы.Количество());
				стр_Ресурсы.РегистрСведенийНомерКартинки = 48;
				стр_Ресурсы.РегистрСведенийТипСтроки = "Ресурсы";
				
				Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					
					стр_Ресурс = стр_Ресурсы.Строки.Добавить();
					стр_Ресурс.РегистрСведенийИмя = Ресурс.Имя;
					стр_Ресурс.РегистрСведенийПредставление = Ресурс.Имя;
					стр_Ресурс.РегистрСведенийСиноним = Ресурс.Синоним;
					стр_Ресурс.РегистрСведенийКомментарий = Ресурс.Комментарий;
					стр_Ресурс.РегистрСведенийНомерКартинки = 48;
					стр_Ресурс.РегистрСведенийТипСтроки = "Ресурс";
					стр_Ресурс.РегистрСведенийПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Ресурс.Тип);
					
				КонецЦикла;
				
				стр_Ресурсы.Строки.Сортировать("РегистрСведенийИмя");
				
				Если МетаданныеРегистра.Реквизиты.Количество() > 0 Тогда
					
					стр_Реквизиты = стр_Регистр.Строки.Добавить();
					стр_Реквизиты.РегистрСведенийИмя = "Реквизиты";
					стр_Реквизиты.РегистрСведенийПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Реквизиты (%1)", МетаданныеРегистра.Ресурсы.Количество());
					стр_Реквизиты.РегистрСведенийНомерКартинки = 45;
					стр_Реквизиты.РегистрСведенийТипСтроки = "Реквизиты";
					
					Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
						
						стр_Реквизит = стр_Реквизиты.Строки.Добавить();
						стр_Реквизит.РегистрСведенийИмя = Реквизит.Имя;
						стр_Реквизит.РегистрСведенийПредставление = Реквизит.Имя;
						стр_Реквизит.РегистрСведенийСиноним = Реквизит.Синоним;
						стр_Реквизит.РегистрСведенийКомментарий = Реквизит.Комментарий;
						стр_Реквизит.РегистрСведенийНомерКартинки = 45;
						стр_Реквизит.РегистрСведенийТипСтроки = "Реквизит";
						стр_Реквизит.РегистрСведенийПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Реквизит.Тип);
						
					КонецЦикла;
					
					стр_Реквизиты.Строки.Сортировать("РегистрСведенийИмя");
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистра) Тогда
				
				стр_Регистр = дз_ВсеРегистрыБухгалтерии.Строки.Добавить();
				стр_Регистр.РегистрБухгалтерииИмя = МетаданныеРегистра.Имя;
				стр_Регистр.РегистрБухгалтерииСиноним = МетаданныеРегистра.Синоним;
				стр_Регистр.РегистрБухгалтерииТипСтроки = "РегистрБухгалтерии";
				стр_Регистр.РегистрБухгалтерииНомерКартинки = 15;
				
				КолЗаписей = КоличествоЗаписейПоРегистру(МетаданныеРегистра);
				стр_Регистр.РегистрБухгалтерииКоличествоЗаписей = КолЗаписей;
				
				ПредставлениеРегистра = ?(КолЗаписей > 0, ЭтаОбработка.ПодставитьПараметрыВСтроку("%1 (%2)", МетаданныеРегистра.Имя, КолЗаписей), МетаданныеРегистра.Имя);
				стр_Регистр.РегистрБухгалтерииПредставление = ПредставлениеРегистра;
				
				стр_СтРеквизиты = стр_Регистр.Строки.Добавить();
				стр_СтРеквизиты.РегистрБухгалтерииИмя = "СтандартныеРеквизиты";
				стр_СтРеквизиты.РегистрБухгалтерииПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("СтандартныеРеквизиты (%1)", МетаданныеРегистра.СтандартныеРеквизиты.Количество());
				стр_СтРеквизиты.РегистрБухгалтерииНомерКартинки = 44;
				стр_СтРеквизиты.РегистрБухгалтерииТипСтроки = "СтандартныеРеквизиты";
				
				Для каждого СтРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
					
					стр_СтРеквизит = стр_СтРеквизиты.Строки.Добавить();
					стр_СтРеквизит.РегистрБухгалтерииИмя = СтРеквизит.Имя;
					стр_СтРеквизит.РегистрБухгалтерииПредставление = СтРеквизит.Имя;
					стр_СтРеквизит.РегистрБухгалтерииСиноним = СтРеквизит.Синоним;
					стр_СтРеквизит.РегистрБухгалтерииКомментарий = СтРеквизит.Комментарий;
					стр_СтРеквизит.РегистрБухгалтерииНомерКартинки = 44;
					стр_СтРеквизит.РегистрБухгалтерииТипСтроки = "СтандартныйРеквизит";
					стр_СтРеквизит.РегистрБухгалтерииПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(СтРеквизит.Тип);
					
				КонецЦикла;
				
				стр_СтРеквизиты.Строки.Сортировать("РегистрБухгалтерииИмя");
				
				стр_Измерения = стр_Регистр.Строки.Добавить();
				стр_Измерения.РегистрБухгалтерииИмя = "Измерения";
				стр_Измерения.РегистрБухгалтерииПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Измерения (%1)", МетаданныеРегистра.Измерения.Количество());
				стр_Измерения.РегистрБухгалтерииНомерКартинки = 47;
				стр_Измерения.РегистрБухгалтерииТипСтроки = "Измерения";
				
				Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
					
					стр_Измерение = стр_Измерения.Строки.Добавить();
					стр_Измерение.РегистрБухгалтерииИмя = Измерение.Имя;
					стр_Измерение.РегистрБухгалтерииПредставление = Измерение.Имя;
					стр_Измерение.РегистрБухгалтерииСиноним = Измерение.Синоним;
					стр_Измерение.РегистрБухгалтерииКомментарий = Измерение.Комментарий;
					стр_Измерение.РегистрБухгалтерииНомерКартинки = 47;
					стр_Измерение.РегистрБухгалтерииТипСтроки = "Измерение";
					стр_Измерение.РегистрБухгалтерииПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Измерение.Тип);
					
				КонецЦикла;
				
				стр_Измерения.Строки.Сортировать("РегистрБухгалтерииИмя");
				
				стр_Ресурсы = стр_Регистр.Строки.Добавить();
				стр_Ресурсы.РегистрБухгалтерииИмя = "Ресурсы";
				стр_Ресурсы.РегистрБухгалтерииПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Ресурсы (%1)", МетаданныеРегистра.Ресурсы.Количество());
				стр_Ресурсы.РегистрБухгалтерииНомерКартинки = 48;
				стр_Ресурсы.РегистрБухгалтерииТипСтроки = "Ресурсы";
				
				Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					
					стр_Ресурс = стр_Ресурсы.Строки.Добавить();
					стр_Ресурс.РегистрБухгалтерииИмя = Ресурс.Имя;
					стр_Ресурс.РегистрБухгалтерииПредставление = Ресурс.Имя;
					стр_Ресурс.РегистрБухгалтерииСиноним = Ресурс.Синоним;
					стр_Ресурс.РегистрБухгалтерииКомментарий = Ресурс.Комментарий;
					стр_Ресурс.РегистрБухгалтерииНомерКартинки = 48;
					стр_Ресурс.РегистрБухгалтерииТипСтроки = "Ресурс";
					стр_Ресурс.РегистрБухгалтерииПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Ресурс.Тип);
					
				КонецЦикла;
				
				стр_Ресурсы.Строки.Сортировать("РегистрБухгалтерииИмя");
				
				Если МетаданныеРегистра.Реквизиты.Количество() > 0 Тогда
					
					стр_Реквизиты = стр_Регистр.Строки.Добавить();
					стр_Реквизиты.РегистрБухгалтерииИмя = "Реквизиты";
					стр_Реквизиты.РегистрБухгалтерииПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Реквизиты (%1)", МетаданныеРегистра.Ресурсы.Количество());
					стр_Реквизиты.РегистрБухгалтерииНомерКартинки = 45;
					стр_Реквизиты.РегистрБухгалтерииТипСтроки = "Реквизиты";
					
					Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
						
						стр_Реквизит = стр_Реквизиты.Строки.Добавить();
						стр_Реквизит.РегистрБухгалтерииИмя = Реквизит.Имя;
						стр_Реквизит.РегистрБухгалтерииПредставление = Реквизит.Имя;
						стр_Реквизит.РегистрБухгалтерииСиноним = Реквизит.Синоним;
						стр_Реквизит.РегистрБухгалтерииКомментарий = Реквизит.Комментарий;
						стр_Реквизит.РегистрБухгалтерииНомерКартинки = 45;
						стр_Реквизит.РегистрБухгалтерииТипСтроки = "Реквизит";
						стр_Реквизит.РегистрБухгалтерииПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Реквизит.Тип);
						
					КонецЦикла;
					
					стр_Реквизиты.Строки.Сортировать("РегистрБухгалтерииИмя");
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Метаданные.РегистрыРасчета.Содержит(МетаданныеРегистра) Тогда
				
				стр_Регистр = дз_ВсеРегистрыРасчета.Строки.Добавить();
				стр_Регистр.РегистрРасчетаИмя = МетаданныеРегистра.Имя;
				стр_Регистр.РегистрРасчетаСиноним = МетаданныеРегистра.Синоним;
				стр_Регистр.РегистрРасчетаТипСтроки = "РегистрРасчета";
				стр_Регистр.РегистрРасчетаНомерКартинки = 16;
				
				КолЗаписей = КоличествоЗаписейПоРегистру(МетаданныеРегистра);
				стр_Регистр.РегистрРасчетаКоличествоЗаписей = КолЗаписей;
				
				ПредставлениеРегистра = ?(КолЗаписей > 0, ЭтаОбработка.ПодставитьПараметрыВСтроку("%1 (%2)", МетаданныеРегистра.Имя, КолЗаписей), МетаданныеРегистра.Имя);
				стр_Регистр.РегистрРасчетаПредставление = ПредставлениеРегистра;
				
				стр_СтРеквизиты = стр_Регистр.Строки.Добавить();
				стр_СтРеквизиты.РегистрРасчетаИмя = "СтандартныеРеквизиты";
				стр_СтРеквизиты.РегистрРасчетаПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("СтандартныеРеквизиты (%1)", МетаданныеРегистра.СтандартныеРеквизиты.Количество());
				стр_СтРеквизиты.РегистрРасчетаНомерКартинки = 44;
				стр_СтРеквизиты.РегистрРасчетаТипСтроки = "СтандартныеРеквизиты";
				
				Для каждого СтРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
					
					стр_СтРеквизит = стр_СтРеквизиты.Строки.Добавить();
					стр_СтРеквизит.РегистрРасчетаИмя = СтРеквизит.Имя;
					стр_СтРеквизит.РегистрРасчетаПредставление = СтРеквизит.Имя;
					стр_СтРеквизит.РегистрРасчетаСиноним = СтРеквизит.Синоним;
					стр_СтРеквизит.РегистрРасчетаКомментарий = СтРеквизит.Комментарий;
					стр_СтРеквизит.РегистрРасчетаНомерКартинки = 44;
					стр_СтРеквизит.РегистрРасчетаТипСтроки = "СтандартныйРеквизит";
					стр_СтРеквизит.РегистрРасчетаПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(СтРеквизит.Тип);
					
				КонецЦикла;
				
				стр_СтРеквизиты.Строки.Сортировать("РегистрРасчетаИмя");
				
				стр_Измерения = стр_Регистр.Строки.Добавить();
				стр_Измерения.РегистрРасчетаИмя = "Измерения";
				стр_Измерения.РегистрРасчетаПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Измерения (%1)", МетаданныеРегистра.Измерения.Количество());
				стр_Измерения.РегистрРасчетаНомерКартинки = 47;
				стр_Измерения.РегистрРасчетаТипСтроки = "Измерения";
				
				Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
					
					стр_Измерение = стр_Измерения.Строки.Добавить();
					стр_Измерение.РегистрРасчетаИмя = Измерение.Имя;
					стр_Измерение.РегистрРасчетаПредставление = Измерение.Имя;
					стр_Измерение.РегистрРасчетаСиноним = Измерение.Синоним;
					стр_Измерение.РегистрРасчетаКомментарий = Измерение.Комментарий;
					стр_Измерение.РегистрРасчетаНомерКартинки = 47;
					стр_Измерение.РегистрРасчетаТипСтроки = "Измерение";
					стр_Измерение.РегистрРасчетаПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Измерение.Тип);
					
				КонецЦикла;
				
				стр_Измерения.Строки.Сортировать("РегистрРасчетаИмя");
				
				стр_Ресурсы = стр_Регистр.Строки.Добавить();
				стр_Ресурсы.РегистрРасчетаИмя = "Ресурсы";
				стр_Ресурсы.РегистрРасчетаПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Ресурсы (%1)", МетаданныеРегистра.Ресурсы.Количество());
				стр_Ресурсы.РегистрРасчетаНомерКартинки = 48;
				стр_Ресурсы.РегистрРасчетаТипСтроки = "Ресурсы";
				
				Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					
					стр_Ресурс = стр_Ресурсы.Строки.Добавить();
					стр_Ресурс.РегистрРасчетаИмя = Ресурс.Имя;
					стр_Ресурс.РегистрРасчетаПредставление = Ресурс.Имя;
					стр_Ресурс.РегистрРасчетаСиноним = Ресурс.Синоним;
					стр_Ресурс.РегистрРасчетаКомментарий = Ресурс.Комментарий;
					стр_Ресурс.РегистрРасчетаНомерКартинки = 48;
					стр_Ресурс.РегистрРасчетаТипСтроки = "Ресурс";
					стр_Ресурс.РегистрРасчетаПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Ресурс.Тип);
					
				КонецЦикла;
				
				стр_Ресурсы.Строки.Сортировать("РегистрРасчетаИмя");
				
				Если МетаданныеРегистра.Реквизиты.Количество() > 0 Тогда
					
					стр_Реквизиты = стр_Регистр.Строки.Добавить();
					стр_Реквизиты.РегистрРасчетаИмя = "Реквизиты";
					стр_Реквизиты.РегистрРасчетаПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Реквизиты (%1)", МетаданныеРегистра.Реквизиты.Количество());
					стр_Реквизиты.РегистрРасчетаНомерКартинки = 45;
					стр_Реквизиты.РегистрРасчетаТипСтроки = "Реквизиты";
					
					Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
						
						стр_Реквизит = стр_Реквизиты.Строки.Добавить();
						стр_Реквизит.РегистрРасчетаИмя = Реквизит.Имя;
						стр_Реквизит.РегистрРасчетаПредставление = Реквизит.Имя;
						стр_Реквизит.РегистрРасчетаСиноним = Реквизит.Синоним;
						стр_Реквизит.РегистрРасчетаКомментарий = Реквизит.Комментарий;
						стр_Реквизит.РегистрРасчетаНомерКартинки = 45;
						стр_Реквизит.РегистрРасчетаТипСтроки = "Реквизит";
						стр_Реквизит.РегистрРасчетаПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Реквизит.Тип);
						
					КонецЦикла;
					
					стр_Реквизиты.Строки.Сортировать("РегистрРасчетаИмя");
					
				КонецЕсли;
				
				Если МетаданныеРегистра.Перерасчеты.Количество() > 0 Тогда
					
					стр_Реквизиты = стр_Регистр.Строки.Добавить();
					стр_Реквизиты.РегистрРасчетаИмя = "Перерасчеты";
					стр_Реквизиты.РегистрРасчетаПредставление = ЭтаОбработка.ПодставитьПараметрыВСтроку("Перерасчеты (%1)", МетаданныеРегистра.Перерасчеты.Количество());
					стр_Реквизиты.РегистрРасчетаНомерКартинки = 45;
					стр_Реквизиты.РегистрРасчетаТипСтроки = "Реквизиты";
					
					Для каждого Перерасчет Из МетаданныеРегистра.Реквизиты Цикл
						
						стр_Реквизит = стр_Реквизиты.Строки.Добавить();
						стр_Реквизит.РегистрРасчетаИмя = Перерасчет.Имя;
						стр_Реквизит.РегистрРасчетаПредставление = Перерасчет.Имя;
						стр_Реквизит.РегистрРасчетаСиноним = Перерасчет.Синоним;
						стр_Реквизит.РегистрРасчетаКомментарий = Перерасчет.Комментарий;
						стр_Реквизит.РегистрРасчетаНомерКартинки = 45;
						стр_Реквизит.РегистрРасчетаТипСтроки = "Перерасчет";
						стр_Реквизит.РегистрРасчетаПредставлениеТипа = ЭтаОбработка.СтрокаОписанияТипов(Перерасчет.Тип);
						
					КонецЦикла;
					
					стр_Реквизиты.Строки.Сортировать("РегистрРасчетаИмя");
					
				КонецЕсли;

				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.СтраницаДвижения.Видимость = ЭтоДокумент;
	
	дз_ВсеРегистрыНакопления.Строки.Сортировать("РегистрНакопленияИмя");
	дз_ВсеРегистрыСведений.Строки.Сортировать("РегистрСведенийИмя");
	дз_ВсеРегистрыБухгалтерии.Строки.Сортировать("РегистрБухгалтерииИмя");
	дз_ВсеРегистрыРасчета.Строки.Сортировать("РегистрРасчетаИмя");
	
	ЗначениеВРеквизитФормы(дз_ВсеРегистрыНакопления, "ВсеРегистрыНакопления");
	ЗначениеВРеквизитФормы(дз_ВсеРегистрыСведений, "ВсеРегистрыСведений");
	ЗначениеВРеквизитФормы(дз_ВсеРегистрыБухгалтерии, "ВсеРегистрыБухгалтерии");
	ЗначениеВРеквизитФормы(дз_ВсеРегистрыРасчета, "ВсеРегистрыРасчета");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтраницыРеквизиты()
	
	ЗаголовокСтраницы = ЭтаОбработка().ПодставитьПараметрыВСтроку("Реквизиты (%1)", РеквизитФормыВЗначение("ВсеРеквизиты").Строки.Количество());
	Элементы.СтраницаРеквизиты.Заголовок = ЗаголовокСтраницы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтраницыТабличныеЧасти()
	
	ЭтаОбработка = ЭтаОбработка();
	
	ЗаголовокСтраницы = ЭтаОбработка.ПодставитьПараметрыВСтроку("Табличные части (%1)", РеквизитФормыВЗначение("ВсеТабличныеЧасти").Строки.Количество());
	Элементы.СтраницаТабличныеЧасти.Заголовок = ЗаголовокСтраницы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтраницыДвижения()
	
	ЭтаОбработка = ЭтаОбработка();
	
	КоличествоРН = РеквизитФормыВЗначение("ВсеРегистрыНакопления").Строки.Количество();
	ЗаголовокСтраницы = ЭтаОбработка.ПодставитьПараметрыВСтроку("Регистры накопления (%1)", КоличествоРН);
	Элементы.СтраницаРегистрыНакопления.Заголовок = ЗаголовокСтраницы;
	
	КоличествоРС = РеквизитФормыВЗначение("ВсеРегистрыСведений").Строки.Количество();
	ЗаголовокСтраницы = ЭтаОбработка.ПодставитьПараметрыВСтроку("Регистры сведений (%1)", КоличествоРС);
	Элементы.СтраницаРегистрыСведений.Заголовок = ЗаголовокСтраницы;
	
	КоличествоРБ = РеквизитФормыВЗначение("ВсеРегистрыБухгалтерии").Строки.Количество();
	ЗаголовокСтраницы = ЭтаОбработка.ПодставитьПараметрыВСтроку("Регистры бухгалтерии (%1)", КоличествоРБ);
	Элементы.СтраницаРегистрыБухгалтерии.Заголовок = ЗаголовокСтраницы;
	
	КоличествоРР = РеквизитФормыВЗначение("ВсеРегистрыРасчета").Строки.Количество();
	ЗаголовокСтраницы = ЭтаОбработка.ПодставитьПараметрыВСтроку("Регистры расчета (%1)", КоличествоРР);
	Элементы.СтраницаРегистрыРасчета.Заголовок = ЗаголовокСтраницы;
	
	// Движения
	
	КоличествоРегистровВсего = 0;
	КоличествоРегистровВсего = КоличествоРН + КоличествоРС + КоличествоРБ + КоличествоРР;
	
	Если КоличествоРегистровВсего > 0 Тогда
		ЗаголовокСтраницыДвижения = ЭтаОбработка.ПодставитьПараметрыВСтроку("Движения (%1)", КоличествоРегистровВсего);
	Иначе
		ЗаголовокСтраницыДвижения = "Движения";
	КонецЕсли; 
	
	Элементы.СтраницаДвижения.Заголовок = ЗаголовокСтраницыДвижения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыТабличныеЧасти()
	
	МетаданныеОбъекта = ОбъектБазы.Метаданные();
	
	Попытка
		ТабличныеЧастиОбъекта = МетаданныеОбъекта.ТабличныеЧасти;
		ВидимостьСтраницы = Истина;
	Исключение
		ВидимостьСтраницы = Ложь;
	КонецПопытки;
	
	ВидимостьСтраницы = Не (РеквизитФормыВЗначение("ВсеТабличныеЧасти").Строки.Количество() = 0);
	
	Элементы.СтраницаТабличныеЧасти.Видимость = ВидимостьСтраницы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыСвязанныеОбъекты()
	
	//
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыИзмененияНаУзлахПлановОбмена()
	
	ДеревоУзловОбменаЭлементы = ДеревоУзловОбмена.ПолучитьЭлементы();
	
	ФлВидимость = (ДеревоУзловОбменаЭлементы.Количество() > 0);
	
	Элементы.СтраницаИзмененияНаУзлахПлановОбмена.Видимость = ФлВидимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыДвижения()
	
	ОбъектБазыМД = ОбъектБазы.Метаданные();
	
	Попытка
		ЕстьДвижения = ОбъектБазыМД.Движения;
		ВидимостьСтраницы = Истина;
	Исключение
		ВидимостьСтраницы = Ложь;
	КонецПопытки;
	
	Элементы.СтраницаДвижения.Видимость = ВидимостьСтраницы;
	
	Если Не Элементы.СтраницаДвижения.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницаРегистрыНакопления.Видимость = Не (РеквизитФормыВЗначение("ВсеРегистрыНакопления").Строки.Количество() = 0);
	Элементы.СтраницаРегистрыСведений.Видимость = Не (РеквизитФормыВЗначение("ВсеРегистрыСведений").Строки.Количество() = 0);
	Элементы.СтраницаРегистрыБухгалтерии.Видимость = Не (РеквизитФормыВЗначение("ВсеРегистрыБухгалтерии").Строки.Количество() = 0);
	Элементы.СтраницаРегистрыРасчета.Видимость = Не (РеквизитФормыВЗначение("ВсеРегистрыРасчета").Строки.Количество() = 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыРеквизиты()
	
	МетаданныеОбъекта = ОбъектБазы.Метаданные();
	
	Попытка
		ЕстьРеквизиты = МетаданныеОбъекта.Реквизиты;
		ВидимостьСтраницы = Истина;
	Исключение
		ВидимостьСтраницы = Ложь;
	КонецПопытки;
	
	Элементы.СтраницаРеквизиты.Видимость = ВидимостьСтраницы;
	
КонецПроцедуры

// Отображает выбранную табличную часть элемента базы на форме.
//
// Параметры:
//	ИмяТабличнойЧасти - Строка - имя табличной части элемента базы, например: "Товары"
//
&НаСервере
Процедура ОтобразитьДанныеТабличнойЧасти(ИмяТабличнойЧасти)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	УжеОтображена = ТаблицаОбъектаУжеОтображена("ТабличнаяЧасть", ИмяТабличнойЧасти);
	
	Если УжеОтображена Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	// Добавить реквизиты формы относящиеся к табличной части.
	
	// ... добавить реквизит - динамический список самой табличной части.
	
	ИмяРеквизита = ИмяРеквизитаФормыТаблицыОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти);
	РеквизитДанныеТабличнойЧасти = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ДинамическийСписок"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитДанныеТабличнойЧасти);
	
	// ... добавить колонки динамического списка данных табличной части.
	
	ОбъектМд = ОбъектБазы.Метаданные();
	
	Для Каждого РеквизитТабличнойЧасти Из ОбъектМд.ТабличныеЧасти[ИмяТабличнойЧасти].СтандартныеРеквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти, РеквизитТабличнойЧасти.Имя);
		РеквизитКолонкаТабличнойЧасти = Новый РеквизитФормы(ИмяРеквизитаКолонка, РеквизитТабличнойЧасти.Тип);
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонкаТабличнойЧасти);
		
	КонецЦикла;
	
	Для Каждого РеквизитТабличнойЧасти Из ОбъектМд.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти, РеквизитТабличнойЧасти.Имя);
		РеквизитКолонкаТабличнойЧасти = Новый РеквизитФормы(ИмяРеквизитаКолонка, РеквизитТабличнойЧасти.Тип);
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонкаТабличнойЧасти);
		
	КонецЦикла;
	
	// ... изменить состав реквизитов формы.
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// ... установить текст запроса для отображения данных табличной части.
	
	ТекстЗапроса = ТекстЗапросаСпискаТаблицыОбъектаКонфигурации("ТабличнаяЧасть", ИмяТабличнойЧасти);
	ЭтаФорма[ИмяРеквизита].ТекстЗапроса = ТекстЗапроса;
	
	// ... установить параметр динамического списка данных табличной части - отбор по ссылке на элемент.
	
	ЭтаФорма[ИмяРеквизита].Параметры.Элементы[0].Значение = ОбъектБазы;
	ЭтаФорма[ИмяРеквизита].Параметры.Элементы[0].Использование = Истина;
	
	// Добавить элементы формы, относящиеся к табличной части.
	
	// ... добавить страницу.
	ИмяСтраницы = ИмяСтраницыТаблицыОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти);
	СтраницаДанныеТабличнойЧасти = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы.СтраницыДанныеТабличныхЧастей);
	
	КолЗаписейТаблЧасти = ОбъектБазы[ИмяТабличнойЧасти].Количество();
	Если КолЗаписейТаблЧасти > 0 Тогда
		СтраницаДанныеТабличнойЧасти.Заголовок = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1 (%2)", ИмяТабличнойЧасти, КолЗаписейТаблЧасти);
	Иначе
		СтраницаДанныеТабличнойЧасти.Заголовок = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1", ИмяТабличнойЧасти);
	КонецЕсли;
	
	// ... добавить табличную часть на страницу.
	ЭлементТаблица = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), СтраницаДанныеТабличнойЧасти);
	ЭлементТаблица.ПутьКДанным = ИмяРеквизита;
	ЭлементТаблица.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементТаблица.Заголовок = ИмяТабличнойЧасти;
	ЭлементТаблица.Видимость = Истина;
	
	// ... добавить колонки табличной части.
	Для Каждого РеквизитТабличнойЧасти Из ОбъектМд.ТабличныеЧасти[ИмяТабличнойЧасти].СтандартныеРеквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти, РеквизитТабличнойЧасти.Имя);
		ПутьКДаннымДляКолонки = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1.%2", ИмяРеквизита, ИмяРеквизитаКолонка);
		
		ЭлементКолонка = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементКолонка.Видимость = Истина;
		ЭлементКолонка.ПутьКДанным = ПутьКДаннымДляКолонки;
		ЭлементКолонка.Заголовок = РеквизитТабличнойЧасти.Имя;
		
		Если РеквизитТабличнойЧасти.Имя = "НомерСтроки" Тогда
			ЭлементКолонка.Заголовок = "№";
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого РеквизитТабличнойЧасти Из ОбъектМд.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти, РеквизитТабличнойЧасти.Имя);
		ПутьКДаннымДляКолонки = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1.%2", ИмяРеквизита, ИмяРеквизитаКолонка);
		
		ЭлементКолонка = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементКолонка.Видимость = Истина;
		ЭлементКолонка.ПутьКДанным = ПутьКДаннымДляКолонки;
		ЭлементКолонка.Заголовок = РеквизитТабличнойЧасти.Имя;
		
	КонецЦикла;
	
	// Установить обработчик событий для таблицы данных табличной части.
	
	ЭлементТаблица.УстановитьДействие("Выбор", "Подключаемый_ТабличнаяЧасть_Выбор");
	
	// Добавить команду открытия текущий строки в редакторе строки таблицы.
	
	ДобавитьКомандуОткрытьСтрокуВРедактореЗаписи(ЭлементТаблица.Имя, "ОткрытьСтрокуВРедактореЗаписи");
	
КонецПроцедуры

&НаСервере
Процедура АктивизироватьСтраницуТаблицыОбъекта(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяСтраницы = ИмяСтраницыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы);
	
	ИмяКоллекции = "";
	
	Если ТипТаблицы = "ТабличнаяЧасть" Тогда
		ИмяКоллекции = "СтраницыДанныеТабличныхЧастей";
	ИначеЕсли ТипТаблицы = "РегистрНакопления" Тогда
		ИмяКоллекции = "СтраницыДанныеРегистрыНакопления";
	ИначеЕсли ТипТаблицы = "РегистрСведений" Тогда
		ИмяКоллекции = "СтраницыДанныеРегистрыСведений";
	ИначеЕсли ТипТаблицы = "РегистрБухгалтерии" Тогда
		ИмяКоллекции = "СтраницыДанныеРегистрыБухгалтерии";
	ИначеЕсли ТипТаблицы = "РегистрРасчета" Тогда
		ИмяКоллекции = "СтраницыДанныеРегистрыРасчета";
	КонецЕсли;
	
	Элементы[ИмяКоллекции].ТекущаяСтраница = Элементы[ИмяСтраницы];
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеДвиженийПоРегистру(ТипРегистра, ИмяРегистра)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	УжеОтображена = ТаблицаДвиженийОбъектаУжеОтображена(ТипРегистра, ИмяРегистра);
	
	Если УжеОтображена Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// TODO: Переделать - отображение регистра бухгалтерии вынести в отдельную
	// процедуру, уж больно там много нюансов. Вообще возможно имеет смысл просто
	// разнести отображение по типам регистров. Но для начала - все таки регистр бухгалтерии.
	
	Если ТипРегистра = "РегистрБухгалтерии" Тогда
		ОтобразитьДанныеДвиженийПоРегиструБухгалтерии(ИмяРегистра);
		Возврат;
	КонецЕсли;
	
	ЭтаОбработка = ЭтаОбработка();
	
	// Добавить реквизиты формы.
	
	// ... добавить реквизит - динамический список.
	ИмяДинамическогоСписка = ИмяРеквизитаФормыТаблицыОбъекта(ТипРегистра, ИмяРегистра);
	РеквизитДанныеРегистра = Новый РеквизитФормы(ИмяДинамическогоСписка, Новый ОписаниеТипов("ДинамическийСписок"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитДанныеРегистра);
	
	// ... добавить колонки динамического списка данных регистра.
	ИмяКоллекции = "";
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		ИмяКоллекции = "РегистрыНакопления";
	ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
		ИмяКоллекции = "РегистрыСведений";
	ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
		ИмяКоллекции = "РегистрыРасчета";
	КонецЕсли;
	
	Для Каждого СтандартныйРеквизит Из Метаданные[ИмяКоллекции][ИмяРегистра].СтандартныеРеквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, СтандартныйРеквизит.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, СтандартныйРеквизит.Тип, "");
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	Для Каждого Измерение Из Метаданные[ИмяКоллекции][ИмяРегистра].Измерения Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Измерение.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, Измерение.Тип, "");
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные[ИмяКоллекции][ИмяРегистра].Реквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Реквизит.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, Реквизит.Тип, "");
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	Для Каждого Ресурс Из Метаданные[ИмяКоллекции][ИмяРегистра].Ресурсы Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Ресурс.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, Ресурс.Тип, "");
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	// ... изменить состав реквизитов формы.
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// ... установить текст запроса для отображения данных регистра.
	ТекстЗапроса = ТекстЗапросаСпискаТаблицыОбъектаКонфигурации(ТипРегистра, ИмяРегистра);
	ЭтаФорма[ИмяДинамическогоСписка].ТекстЗапроса = ТекстЗапроса;
	
	// ... установить параметр динамического списка данных регистра - отбор по ссылке на элемент.
	ИндексПараметраОтбораПоСсылке = 0;
	Если (ТипРегистра = "РегистрБухгалтерии") Тогда
		ИндексПараметраОтбораПоСсылке = 3;
	КонецЕсли;
	
	ЭтаФорма[ИмяДинамическогоСписка].Параметры.Элементы[ИндексПараметраОтбораПоСсылке].Значение = ОбъектБазы;
	ЭтаФорма[ИмяДинамическогоСписка].Параметры.Элементы[ИндексПараметраОтбораПоСсылке].Использование = Истина;
	
	// Добавить элементы формы, относящиеся к регистру.
	
	// ... добавить страницу.
	ИмяКоллекцииСтраниц = "";
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыНакопления";
	ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
		ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыСведений";
	ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
		ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыБухгалтерии";
	ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
		ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыРасчета";
	КонецЕсли;
	
	ИмяСтраницы = ИмяСтраницыТаблицыОбъекта(ТипРегистра, ИмяРегистра);
	СтраницаДанныеРегистра = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы[ИмяКоллекцииСтраниц]);
	СтраницаДанныеРегистра.Заголовок = ИмяРегистра;
	
	// ... добавить таблицу с данными на страницу.
	ЭлементТаблица = Элементы.Добавить(ИмяДинамическогоСписка, Тип("ТаблицаФормы"), СтраницаДанныеРегистра);
	ЭлементТаблица.ПутьКДанным = ИмяДинамическогоСписка;
	ЭлементТаблица.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементТаблица.Заголовок = ИмяРегистра;
	ЭлементТаблица.Видимость = Истина;
	
	// ... добавить колонки табличной части.
	Для Каждого СтандартныйРеквизит Из Метаданные[ИмяКоллекции][ИмяРегистра].СтандартныеРеквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, СтандартныйРеквизит.Имя);
		ПутьКДаннымДляКолонки = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементТаблица);
		Элемент.Видимость = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок = СтандартныйРеквизит.Имя;
		
		// Установить параметры отображения поля.
		Если СтандартныйРеквизит.Имя = "НомерСтроки" Тогда
			Элемент.Заголовок = "№";
		ИначеЕсли СтандартныйРеквизит.Имя = "Активность" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Измерение Из Метаданные[ИмяКоллекции][ИмяРегистра].Измерения Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Измерение.Имя);
		ПутьКДаннымДляКолонки = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементТаблица);
		Элемент.Видимость = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок = Измерение.Имя;
		
		Если Измерение.Имя = "НомерСтроки" Тогда
			Элемент.Заголовок = "№";
		КонецЕсли;
		
		Если Измерение.Имя = "Активность" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные[ИмяКоллекции][ИмяРегистра].Реквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Реквизит.Имя);
		ПутьКДаннымДляКолонки = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементТаблица);
		Элемент.Видимость = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок = Реквизит.Имя;
		
	КонецЦикла;
	
	Для Каждого Ресурс Из Метаданные[ИмяКоллекции][ИмяРегистра].Ресурсы Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Ресурс.Имя);
		ПутьКДаннымДляКолонки = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементТаблица);
		Элемент.Видимость = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок = Ресурс.Имя;
		
	КонецЦикла;
	
	ЭлементТаблица.УстановитьДействие("Выбор", "Подключаемый_Регистр_Выбор");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеДвиженийПоРегиструБухгалтерии(ИмяРегистраБухгалтерии)
	
	ТипРегистра = "РегистрБухгалтерии";
	ИмяКоллекцииРегистров = "РегистрыБухгалтерии";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка: таблица уже отображена.
	УжеОтображена = ТаблицаДвиженийОбъектаУжеОтображена(ТипРегистра, ИмяРегистраБухгалтерии);
	
	Если УжеОтображена Тогда
		ОбновитьСвязаннуюТаблицуДанныхОбъекта(ТипРегистра, ИмяРегистраБухгалтерии);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	// Добавить реквизиты формы.
	//==========================
	
	// Динамический список.
	ИмяДинамическогоСписка = ИмяРеквизитаФормыТаблицыОбъекта(ТипРегистра, ИмяРегистраБухгалтерии);
	РеквизитДанныеРегистра = Новый РеквизитФормы(ИмяДинамическогоСписка, Новый ОписаниеТипов("ДинамическийСписок"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитДанныеРегистра);
	
	ПоляДтКтРегистра = ЭтаОбработка.ПоляРегистраБухгалтерииДтКт(ИмяРегистраБухгалтерии);
	
	// Добавить реквизиты динамического списка.
	//=========================================
	
	// Стандартные реквизиты.
	Для Каждого СтандартныйРеквизит Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].СтандартныеРеквизиты Цикл
		
		Если ЭтоПолеСубконто(СтандартныйРеквизит.Имя)
			Или ЭтоПолеВидаСубконто(СтандартныйРеквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, "СтандартныеРеквизиты", СтандартныйРеквизит.Имя, СтандартныйРеквизит.Тип);
		
	КонецЦикла;
	
	// Субконто.
	ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, , , Неопределено, "СубконтоДтКт", ПоляДтКтРегистра.МаксКоличествоСубконто);
	
	// Счета
	Для Каждого ПараметрыСчета Из ПоляДтКтРегистра.Счета Цикл
		ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, , ПараметрыСчета.ИмяРеквизитаСчета, ПараметрыСчета.ТипСчета);		
	КонецЦикла;
	
	// Измерения.
	Для Каждого Измерение Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Измерения Цикл
		
		ТипОбработки = "";
		Если Не (ПоляДтКтРегистра.Измерения.Найти(Измерение.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, "Измерения", Измерение.Имя, Измерение.Тип, ТипОбработки);
		
	КонецЦикла;
	
	// Реквизиты.
	Для Каждого Реквизит Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Реквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистраБухгалтерии, Реквизит.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, Реквизит.Тип, "");
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	// Ресурсы.
	Для Каждого Ресурс Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Ресурсы Цикл
		
		ТипОбработки = "";
		Если Не (ПоляДтКтРегистра.Ресурсы.Найти(Ресурс.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, "Ресурсы", Ресурс.Имя, Ресурс.Тип, ТипОбработки);
		
	КонецЦикла;
	
	// ... изменить состав реквизитов формы.
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// ... установить текст запроса для отображения данных регистра.
	ТекстЗапроса = ТекстЗапросаСпискаТаблицыОбъектаКонфигурации(ТипРегистра, ИмяРегистраБухгалтерии);
	ЭтаФорма[ИмяДинамическогоСписка].ТекстЗапроса = ТекстЗапроса;
	
	// ... установить параметр динамического списка данных регистра - отбор по ссылке на элемент.
	ИндексПараметраОтбораПоСсылке = 3;
	ЭтаФорма[ИмяДинамическогоСписка].Параметры.Элементы[ИндексПараметраОтбораПоСсылке].Значение = ОбъектБазы;
	ЭтаФорма[ИмяДинамическогоСписка].Параметры.Элементы[ИндексПараметраОтбораПоСсылке].Использование = Истина;
	
	// Добавить элементы формы.
	//=========================
	
	// ... добавить страницу.
	ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыБухгалтерии";
	
	ИмяСтраницы = ИмяСтраницыТаблицыОбъекта(ТипРегистра, ИмяРегистраБухгалтерии);
	СтраницаДанныеРегистра = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы[ИмяКоллекцииСтраниц]);
	СтраницаДанныеРегистра.Заголовок = ИмяРегистраБухгалтерии;
	
	// ... добавить таблицу с данными на страницу.
	ЭлементСпискаРегистраБухгалтерии = Элементы.Добавить(ИмяДинамическогоСписка, Тип("ТаблицаФормы"), СтраницаДанныеРегистра);
	ЭлементСпискаРегистраБухгалтерии.ПутьКДанным = ИмяДинамическогоСписка;
	ЭлементСпискаРегистраБухгалтерии.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементСпискаРегистраБухгалтерии.Заголовок = ИмяРегистраБухгалтерии;
	ЭлементСпискаРегистраБухгалтерии.Видимость = Истина;
	
	// Добавить элементы-колонки динамического списка.
	
	// Стандартные реквизиты.
	Для Каждого СтандартныйРеквизит Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].СтандартныеРеквизиты Цикл
		
		Если (ЭтоПолеСубконто(СтандартныйРеквизит.Имя))
			Или (ЭтоПолеВидаСубконто(СтандартныйРеквизит.Имя)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, СтандартныйРеквизит.Имя, ИмяДинамическогоСписка, ЭлементСпискаРегистраБухгалтерии);
		
	КонецЦикла;
	
	// Измерения
	Для Каждого Измерение Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Измерения Цикл
		
		ТипОбработки = "";
		Если Не (ПоляДтКтРегистра.Измерения.Найти(Измерение.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, Измерение.Имя, ИмяДинамическогоСписка, ЭлементСпискаРегистраБухгалтерии, ТипОбработки);
		
	КонецЦикла;
	
	// Субконто.
	ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, , ИмяДинамическогоСписка, ЭлементСпискаРегистраБухгалтерии, "СубконтоДтКт", ПоляДтКтРегистра.МаксКоличествоСубконто);
	
	// Счета
	Для Каждого ПараметрыСчета Из ПоляДтКтРегистра.Счета Цикл
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, ПараметрыСчета.ИмяРеквизитаСчета, ИмяДинамическогоСписка, ЭлементСпискаРегистраБухгалтерии);
	КонецЦикла;
	
	// Ресурсы
	Для Каждого Ресурс Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Ресурсы Цикл
		
		ТипОбработки = "";
		Если Не (ПоляДтКтРегистра.Ресурсы.Найти(Ресурс.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, Ресурс.Имя, ИмяДинамическогоСписка, ЭлементСпискаРегистраБухгалтерии, ТипОбработки);
		
	КонецЦикла;
	
	// Реквизиты
	Для Каждого Реквизит Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Реквизиты Цикл
		
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, Реквизит.Имя, ИмяДинамическогоСписка, ЭлементСпискаРегистраБухгалтерии);
		
	КонецЦикла;
	
	УстановитьПараметрыОтображенияВидовСубконтоСпискаРегистраБухгалтерии(ЭлементСпискаРегистраБухгалтерии, ИмяРегистраБухгалтерии);
	
	// Установить действие списка.
	ЭлементСпискаРегистраБухгалтерии.УстановитьДействие("Выбор", "Подключаемый_Регистр_Выбор");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязаннуюТаблицуДанныхОбъекта(ТипТаблицы, ИмяТаблицы)
	
	ЭлементФормыТаблицы = ЭлементФормыСвязаннойТаблицыДанныхОбъекта(ТипТаблицы, ИмяТаблицы);
	
	Если (ЭлементФормыТаблицы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементФормыТаблицы.Обновить();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеДокумента()
	
	ДокументОбъект = ОбъектБазы.ПолучитьОбъект();
	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
	ЗаполнитьВсеРеквизиты();
	ЗаполнитьВсеТабличныеЧасти();
	ЗаполнитьВсеДвижения();
	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокумент()
	
	ДокументОбъект = ОбъектБазы.ПолучитьОбъект();
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьВсеРеквизиты();
	ЗаполнитьВсеТабличныеЧасти();
	ЗаполнитьВсеДвижения();
	
КонецПроцедуры

// Добавляет данные поля в схему запроса для формирования текста выборки по регистру бухгалтерии.
//
// Параметры:
//	ОператорВыбрать - ОператорВыбратьСхемыЗапроса, оператор схемы запроса.
//	ЗапросВыбораСхемыЗапроса - ЗапросВыбораСхемыЗапроса, запрос схемы.
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный").
//	ИмяПоля - Строка, имя поля. Это может быть имя измерения, ресурса, реквизита (например: "Количество"). 
//	ТипОбработки - Строка, тип обработки добавления (например: "ДтКт", "СубконтоДтКт").
//	МаксКоличествоСубконто - Число, макс.количество субконто.	 
// 		
&НаСервере
Процедура ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(ЗапросВыбораСхемыЗапроса,
	ОператорВыбрать, ИмяРегистраБухгалтерии, ИмяПоля = "", ТипОбработки = "",
	МаксКоличествоСубконто = 0)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "СубконтоДтКт") И МаксКоличествоСубконто = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "") И (Не ЗначениеЗаполнено(ИмяПоля)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "ДтКт") И (Не ЗначениеЗаполнено(ИмяПоля)) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Общие переменные.
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	ЭтаОбработка = ЭтаОбработка();
	
	СуффиксыПоля = Новый Массив;
	СуффиксыПоля.Добавить("Дт");
	СуффиксыПоля.Добавить("Кт");
	
	Если (ТипОбработки = "ДтКт") Тогда
		
		Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
			
			ИмяПоляДляВключения = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1%2", ИмяПоля, СуффиксПоля);
			
			СинонимПоля = "РегистрБухгалтерии" + РЧИ + ИмяРегистраБухгалтерии + РЧИ
			+ ИмяПоляДляВключения;
			
			ОператорВыбрать.ВыбираемыеПоля.Добавить(ИмяПоляДляВключения);
			
			ЗапросВыбораСхемыЗапроса.Колонки[ЗапросВыбораСхемыЗапроса.Колонки.Количество()
			- 1].Псевдоним = СинонимПоля;
			
		КонецЦикла;
		
	ИначеЕсли (ТипОбработки = "СубконтоДтКт") Тогда
		
		ИменаПолейСубконто = Новый Массив;
		ИменаПолейСубконто.Добавить("ВидСубконто");
		ИменаПолейСубконто.Добавить("Субконто");
		
		Для Каждого ИмяПоляСубконто Из ИменаПолейСубконто Цикл
			
			Для НомерСубконто = 1 По МаксКоличествоСубконто Цикл
				
				Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
					
					ИмяВыбираемогоПоля = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1%2%3", ИмяПоляСубконто, СуффиксПоля, НомерСубконто);
					
					СинонимПоля = "РегистрБухгалтерии" + РЧИ + ИмяРегистраБухгалтерии + РЧИ
					+ ИмяВыбираемогоПоля;
					
					ОператорВыбрать.ВыбираемыеПоля.Добавить(ИмяВыбираемогоПоля);
					
					ЗапросВыбораСхемыЗапроса.Колонки[ЗапросВыбораСхемыЗапроса.Колонки.Количество()
					- 1].Псевдоним = СинонимПоля;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		СинонимПоля = "РегистрБухгалтерии" + РЧИ + ИмяРегистраБухгалтерии + РЧИ
		+ ИмяПоля;
		
		ОператорВыбрать.ВыбираемыеПоля.Добавить(ИмяПоля);
		
		ЗапросВыбораСхемыЗапроса.Колонки[ЗапросВыбораСхемыЗапроса.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет реквизит списка регистра бухгалтерии в добавляемые реквизиты.
//
// Параметры:
//	ДобавляемыеРеквизиты - Массив, массив добавляемых реквизитов. 
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный"). 
//	ИмяКоллекцииРеквизитов - Строка, имя коллекции реквизитов (например: "Измерения", "Ресурсы").
//	ИмяРеквизита - Строка, имя реквизита (например: "Период"). 
//	ТипРеквизита - ОписаниеТипов, тип реквизита.
//	ТипОбработки - Строка, тип обработки добавления (например: "Дт", "СубконтоДтКт").
//	МаксКоличествоСубконто - Число, макс.количество субконто.
//	
&НаСервере
Процедура ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты,
	ИмяРегистраБухгалтерии, ИмяКоллекцииРеквизитов = "", ИмяРеквизита = "",
	ТипРеквизита = Неопределено, ТипОбработки = "", МаксКоличествоСубконто = 0)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "СубконтоДтКт") Тогда
		Если (МаксКоличествоСубконто = 0) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТипОбработки = "") И (ТипРеквизита = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "ДтКт") И (ТипРеквизита = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Общие переменные.
	ЭтаОбработка = ЭтаОбработка();
	
	СуффиксыПоля = Новый Массив;
	СуффиксыПоля.Добавить("Дт");
	СуффиксыПоля.Добавить("Кт");
	
	Если (ТипОбработки = "ДтКт") Тогда
		
		Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
			
			ИмяРеквизитаДтКт = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1%2", ИмяРеквизита, СуффиксПоля);
			
			ИмяРеквизитаСписка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяРеквизитаДтКт);
			ЗаголовокРеквизитаСписка = "";
			
			РеквизитСписка = Новый РеквизитФормы(ИмяРеквизитаСписка, ТипРеквизита, ЗаголовокРеквизитаСписка);
			ДобавляемыеРеквизиты.Добавить(РеквизитСписка);
			
		КонецЦикла;
		
	ИначеЕсли (ТипОбработки = "СубконтоДтКт") Тогда
		
		ИменаПолейСубконто = Новый Массив;
		ИменаПолейСубконто.Добавить("ВидСубконто");
		ИменаПолейСубконто.Добавить("Субконто");
		
		Для Каждого ИмяПоляСубконто Из ИменаПолейСубконто Цикл
			
			Для НомерСубконто = 1 По МаксКоличествоСубконто Цикл
				
				Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
					
					ИмяРеквизитаСубконто = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1%2%3", ИмяПоляСубконто, СуффиксПоля, НомерСубконто);
					
					ТипРеквизитаСубконто = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].СтандартныеРеквизиты[ИмяПоляСубконто
					+ НомерСубконто].Тип;
					
					ИмяРеквизитаСписка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяРеквизитаСубконто);
					ЗаголовокРеквизитаСписка = "";
					
					РеквизитСписка = Новый РеквизитФормы(ИмяРеквизитаСписка, ТипРеквизитаСубконто, ЗаголовокРеквизитаСписка);
					ДобавляемыеРеквизиты.Добавить(РеквизитСписка);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ИмяРеквизитаСписка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяРеквизита);
		ЗаголовокРеквизитаСписка = "";
		
		РеквизитСписка = Новый РеквизитФормы(ИмяРеквизитаСписка, ТипРеквизита, ЗаголовокРеквизитаСписка);
		ДобавляемыеРеквизиты.Добавить(РеквизитСписка);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет элемент-колонку для отображения поля регистра бухгалтерии.
//
// Параметры:
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный"). 
//	ИмяРеквизита - Строка, имя реквизита (например: "Количество"). 
//	ИмяДинамическогоСписка - Строка, имя динамического списка. 
//	ЭлементСписка - Элемент, элемент-владелец динамический список для отображения поля которого добавляется колонка. 
//	ТипОбработки - Строка, тип обработки (например: "ДтКт", "СубконтоДтКт").
//	МаксКоличествоСубконто - Число, макс.количество субконто.
//	
&НаСервере
Процедура ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии,
	ИмяРеквизита = "", ИмяДинамическогоСписка, ЭлементСписка, ТипОбработки = "", МаксКоличествоСубконто = 0)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(ИмяДинамическогоСписка)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементСписка = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Общие переменные.
	ЭтаОбработка = ЭтаОбработка();
	
	СуффиксыПоля = Новый Массив;
	СуффиксыПоля.Добавить("Дт");
	СуффиксыПоля.Добавить("Кт");
	
	Если (ТипОбработки = "ДтКт") Тогда
		
		Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
			
			ПолноеИмяРеквизитаДтКт = ИмяРеквизита + СуффиксПоля; 
			
			ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ПолноеИмяРеквизитаДтКт);
			ПутьКДаннымДляКолонки = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
			
			Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементСписка);
			Элемент.Видимость = Истина;
			Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
			Элемент.Заголовок = ПолноеИмяРеквизитаДтКт;
			
		КонецЦикла;
		
	ИначеЕсли (ТипОбработки = "СубконтоДтКт") Тогда
		
		ИменаПолейСубконто = Новый Массив;
		ИменаПолейСубконто.Добавить("ВидСубконто");
		ИменаПолейСубконто.Добавить("Субконто");
		
		Для Каждого ИмяПоляСубконто Из ИменаПолейСубконто Цикл
			
			Для НомерСубконто = 1 По МаксКоличествоСубконто Цикл
				
				Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
					
					ПолноеИмяПоляСубконто = ИмяПоляСубконто + СуффиксПоля + НомерСубконто;
					
					ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ПолноеИмяПоляСубконто);
					ПутьКДаннымДляКолонки = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
					
					Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементСписка);
					Элемент.Видимость = Истина;
					Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
					Элемент.Заголовок = ПолноеИмяПоляСубконто;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяРеквизита);
		
		ПутьКДаннымДляКолонки = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементСписка);
		Элемент.Видимость = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок = ИмяРеквизита;
		
		Если ИмяРеквизита = "НомерСтроки" Тогда
			Элемент.Заголовок = "№";
		ИначеЕсли ИмяРеквизита = "Активность" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияОбъекта()
	
	дз_ВсеРеквизиты = РеквизитФормыВЗначение("ВсеРеквизиты");
	
	СтрокиИзмРеквизитов = дз_ВсеРеквизиты.Строки.НайтиСтроки(Новый Структура("РеквизитИзменен", Истина), Истина);
	Если СтрокиИзмРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектБазыДляЗаписи = ОбъектБазы.ПолучитьОбъект();
	
	Для каждого стр_ВсеРеквизиты Из СтрокиИзмРеквизитов Цикл
		ОбъектБазыДляЗаписи[стр_ВсеРеквизиты.РеквизитИмя] = стр_ВсеРеквизиты.РеквизитЗначение;
	КонецЦикла;
	
	Если ЗаписыватьКакПриЗагрузке Тогда
		ОбъектБазыДляЗаписи.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	ОбъектБазыДляЗаписи.Записать();
	
	ЗаполнитьВсеРеквизиты();
	ЗаполнитьВсеТабличныеЧасти();
	ЗаполнитьВсеДвижения();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымОбъектаИнформационнойБазы()
	
	ЭтаОбработка = ЭтаОбработка();
	
	//
	
	Заголовок = ТекстЗаголовкаФормы();
	
	//
	
	ЗаполнитьВсеРеквизиты();
	УстановитьВидимостьСтраницыРеквизиты();
	УстановитьЗаголовокСтраницыРеквизиты();
	
	//
	
	ЗаполнитьВсеТабличныеЧасти();
	УстановитьВидимостьСтраницыТабличныеЧасти();
	УстановитьЗаголовокСтраницыТабличныеЧасти();
	
	//
	
	ЗаполнитьВсеДвижения();
	УстановитьЗаголовокСтраницыДвижения();
	УстановитьВидимостьСтраницыДвижения();
	
	//
	
	ЗаполнитьСвязанныеОбъекты();
	УстановитьВидимостьСтраницыСвязанныеОбъекты();
	
	//
	
	ЗаполнитьИзмененияНаУзлахОбмена();
	УстановитьВидимостьСтраницыИзмененияНаУзлахПлановОбмена();
	
	//
	
	ОтобразитьДанныеXMLОбъекта();
	
	// Видимость элементов.
	
	Элементы.СтраницаПодчиненныеДокументы.Видимость = Ложь;
	Элементы.СтраницаСостав.Видимость = Ложь;
	
	Элементы.НадписьОбъектКонфигурацииИнфо.Заголовок = ЭтаОбработка.ПредставлениеТипаОбъектаКонфигурации(ОбъектБазы);
	
	// Отобразить необходимые элементы в зависимости от типа объекта.
	
	ОтображатьЭлементыДляДокумента = Метаданные.Документы.Содержит(ОбъектБазы.Метаданные());
	
	Элементы.КомандаПровестиДокумент.Видимость = ОтображатьЭлементыДляДокумента;
	Элементы.КомандаОтменитьПроведениеДокумента.Видимость = ОтображатьЭлементыДляДокумента;
	
	//
	
	НавигационнаяСсылкаНаЭлемент = ЭтаОбработка.НавигационнаяСсылкаНаЭлемент(ОбъектБазы);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиПоНавигационнойСсылкеНаЭлемент()
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(НавигационнаяСсылкаНаЭлемент)) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	ОпределительТипаЭлементов = ЭтаОбработка.ПредставлениеТипаОбъектаКонфигурации(ОбъектБазы);
	
	СсылкаНаЭлемент = ЭтаОбработка.ПолучитьСсылкуНаЭлементБазыПоАдресу(НавигационнаяСсылкаНаЭлемент, ОпределительТипаЭлементов);
	
	Если (Не ЗначениеЗаполнено(СсылкаНаЭлемент)) Тогда
		ТекстСообщения = ЭтаОбработка.ПодставитьПараметрыВСтроку("По ссылке '%1' не удалось найти элемент базы.", НавигационнаяСсылкаНаЭлемент);
		Сообщить("");
		Возврат;
	КонецЕсли;
	
	ОбъектБазы = СсылкаНаЭлемент;
	
	ЗаполнитьПоДаннымОбъектаИнформационнойБазы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ЭтаОбработка = ЭтаОбработка();
	
	Элементы.ВсеРеквизиты.ТолькоПросмотр = Не ВключенРежимРедактированияОбъекта;
	
	Если Не ЭтаОбработка.ЭтоДокумент(ОбъектБазы.Метаданные()) Тогда
		Элементы.КомандаСтруктураПодчиненности.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРежимРедактированияОбъекта()
	
	ВключенРежимРедактированияОбъекта = Не ВключенРежимРедактированияОбъекта;
	Элементы.КомандаВключитьРежимРедактированияОбъекта.Пометка = ВключенРежимРедактированияОбъекта;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеОбъекта()
	
	ЗаполнитьПоДаннымОбъектаИнформационнойБазы();
	
	ВключенРежимРедактированияОбъекта = Ложь;
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеXMLОбъекта()
	
	ДанныеОбъектаXML = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ОбъектБазыДляЧтения = ОбъектБазы.ПолучитьОбъект();
	
	ЗаписатьXML(ЗаписьXML, ОбъектБазыДляЧтения);
	
	ДанныеОбъектаXML = ЗаписьXML.Закрыть();
	ДанныеОбъектаXMLТекст.УстановитьТекст(ДанныеОбъектаXML);
	
	дз_XML = ПолучитьДеревоЗначенийИзXMLСтроки(ДанныеОбъектаXML);
	ЗначениеВРеквизитФормы(дз_XML, "ДанныеОбъектаXMLДерево");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыОтображенияВидовСубконтоСпискаРегистраБухгалтерии(ЭлементСпискаРегистраБухгалтерии, ИмяРегистраБухгалтерии)
	
	#Область Предусловия
	
	Если (ЭлементСпискаРегистраБухгалтерии = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Общие переменные.
	ЭтаОбработка = ЭтаОбработка();
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	КолСубконто = ЭтаОбработка.МаксКоличествоСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии);
	
	// Найти поля видов субконто и субконто.
	ОпределителиПолей = Новый Массив;
	ОпределителиПолей.Добавить("ВидСубконто");
	ОпределителиПолей.Добавить("Субконто");
	
	СуффиксыПолей = Новый Массив;
	СуффиксыПолей.Добавить("Дт");
	СуффиксыПолей.Добавить("Кт");
	
	ПоляСубконто = ЭтаОбработка.Тип_ПоляСубконтоСпискаРегистраБухгалтерии(); 
	
	Для Каждого ОпределительПоля Из ОпределителиПолей Цикл
		
		Для Каждого СуффиксПоля Из СуффиксыПолей Цикл
			
			Для НомерСубконто = 1 По КолСубконто Цикл
				
				ИмяПоля = ЭтаОбработка.ПодставитьПараметрыВСтроку("РегистрБухгалтерии%1%2%3%4%5%6", РЧИ, ИмяРегистраБухгалтерии, РЧИ, ОпределительПоля, СуффиксПоля, НомерСубконто); // "РегистрБухгалтерии_Хозрасчетный_ВидСубконтоДт1"
				
				Поле = ЭлементСпискаРегистраБухгалтерии.ПодчиненныеЭлементы.Найти(ИмяПоля);
				Если (Поле = Неопределено) Тогда
					Продолжить;
				КонецЕсли;
				
				ПоляСубконто[ОпределительПоля][СуффиксПоля].Добавить(Новый Структура("ИмяПоля, Поле", ИмяПоля, Поле));
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавить группы полей и переместить поля видов субконто и субконто в группы.
	ИмяЭлементаСписка = ЭлементСпискаРегистраБухгалтерии.Имя;
	
	Для Каждого КлючЗначение Из ПоляСубконто Цикл
		
		РазделПолей = КлючЗначение.Ключ;
		ОписаниеРазделаПолей = КлючЗначение.Значение;
		
		Для Каждого СуффиксПоля Из СуффиксыПолей Цикл
			
			ИмяПоляХраненияГруппы = "Группа" + СуффиксПоля; // "ГруппаДт" 
			
			Если (ОписаниеРазделаПолей[ИмяПоляХраненияГруппы]) = Неопределено Тогда
				
				ИмяГруппы = ЭтаОбработка.ПодставитьПараметрыВСтроку("%1%2Группа%3%4", ИмяЭлементаСписка, РЧИ, РазделПолей, СуффиксПоля); // "РегистрБухгалтерии_Хозрасчетный_ГруппаВидСубконтоДт"				
				Группа = Элементы.Найти(ИмяГруппы);
				
				Если (Группа = Неопределено) Тогда
					Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ЭлементСпискаРегистраБухгалтерии);
				КонецЕсли;
				
			КонецЕсли;
			
			ОписаниеРазделаПолей[ИмяПоляХраненияГруппы] = Группа;
			
			Для Каждого СтруктураПоля Из ОписаниеРазделаПолей[СуффиксПоля] Цикл
				Элементы.Переместить(СтруктураПоля.Поле, ОписаниеРазделаПолей[ИмяПоляХраненияГруппы]);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Теперь надо разместить добавленные группы в правильном порядке: 
	// ВидыСубконтоДт, СубконтоДт, ВидыСубконтоКт, СубконтоКт.
	// Размещаем перед первым ресурсом.
	
	// ... найдем элемент связанный с последним измерением.
	
	ИмяГраничногоЭлемента = "";
	
	МД = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	
	ПоляДтКт = ЭтаОбработка.ПоляРегистраБухгалтерииДтКт(ИмяРегистраБухгалтерии);
	
	Если Не (МД.Ресурсы.Количество() = 0) Тогда
		
		ПоследнийРесурс = МД.Ресурсы[МД.Ресурсы.Количество() - 1];
		
		Если Не (ПоляДтКт.Ресурсы.Найти(ПоследнийРесурс.Имя) = Неопределено) Тогда
			ИмяГраничногоЭлемента = ПоследнийРесурс.Имя + "Дт";
		Иначе
			ИмяГраничногоЭлемента = ПоследнийРесурс.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ИмяГраничногоЭлемента = "") Тогда
		ИмяГраничногоЭлемента = "Период";
	КонецЕсли;
	
	ИмяКолонкиЭлемента = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяГраничногоЭлемента);
	
	Элементы.Переместить(ПоляСубконто["ВидСубконто"]["ГруппаДт"], ЭлементСпискаРегистраБухгалтерии, Элементы[ИмяКолонкиЭлемента]);
	Элементы.Переместить(ПоляСубконто["Субконто"]["ГруппаДт"], ЭлементСпискаРегистраБухгалтерии, Элементы[ИмяКолонкиЭлемента]);
	Элементы.Переместить(ПоляСубконто["ВидСубконто"]["ГруппаКт"], ЭлементСпискаРегистраБухгалтерии, Элементы[ИмяКолонкиЭлемента]);
	Элементы.Переместить(ПоляСубконто["Субконто"]["ГруппаКт"], ЭлементСпискаРегистраБухгалтерии, Элементы[ИмяКолонкиЭлемента]);
	
КонецПроцедуры

&НаСервере
Процедура СтруктураПодчиненности()
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	ДеревоПодчиненныеОбъекты.ПолучитьЭлементы().Очистить();
	
	ЗначенияРеквизитов = ЭтаОбработка.ЗначенияРеквизитовОбъекта(ОбъектБазы, "Ссылка, Проведен, ПометкаУдаления");
	ЗначенияРеквизитов.Вставить("Представление", Строка(ОбъектБазы));
	ЗначенияРеквизитов.Вставить("ИндексКартинки", ?(ОбъектБазы.Проведен, 14, ?(ОбъектБазы.ПометкаУдаления, 13, 12)));
	
	СтрокаОбъектаБазы = ДобавитьСтрокуВДерево(ДеревоПодчиненныеОбъекты.ПолучитьЭлементы(), ЗначенияРеквизитов);
	
	ВывестиПодчиненныеОбъекты(ОбъектБазы, СтрокаОбъектаБазы);
	дз_ДеревоПодчиненныеОбъекты = РеквизитФормыВЗначение("ДеревоПодчиненныеОбъекты");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПодчиненныеОбъекты(ТекущийОбъект, ДеревоРодитель)
	
	ЭтаОбработка = ЭтаОбработка();
	
	СтрокиДерева = ДеревоРодитель.ПолучитьЭлементы();
	
	Таблица = ОбъектыПоКритериюОтбора(ТекущийОбъект);
	
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшПоТипамОбъектов   = Новый Соответствие;
	КэшРеквизитовОбъекта = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		МетаданныеОбъекта = СтрокаТаблицы.Ссылка.Метаданные();
		
		Если Не ПравоДоступа("Чтение", МетаданныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		ДополнитьКэшМетаданных(МетаданныеОбъекта, ПолноеИмяОбъекта, КэшРеквизитовОбъекта);
		
		МассивСсылок = КэшПоТипамОбъектов[ПолноеИмяОбъекта];
		
		Если МассивСсылок = Неопределено Тогда
			
			МассивСсылок = Новый Массив;
			КэшПоТипамОбъектов.Вставить(ПолноеИмяОбъекта, МассивСсылок);
			
		КонецЕсли;
		
		МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);
		
	КонецЦикла;
	
	Если КэшПоТипамОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеОбъекты УПОРЯДОЧИТЬ ПО ПодчиненныеОбъекты.Дата";
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого КлючИЗначение Из КэшПоТипамОбъектов Цикл
		
		МассивИмениОбъекта = ЭтаОбработка.РазложитьСтрокуВМассивПодстрок(КлючИЗначение.Ключ, ".");
		
		Если МассивИмениОбъекта.Количество() = 2 Тогда
			ИмяОбъекта = МассивИмениОбъекта[1];
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстПоТипуОбъекта = "
		|" + КэшРеквизитовОбъекта[КлючИЗначение.Ключ]["Дата"] + "           КАК Дата,
		|	Ссылка,
		|" + КэшРеквизитовОбъекта[КлючИЗначение.Ключ]["Проведен"] + "       КАК Проведен,
		|	ПометкаУдаления,
		|" + КэшРеквизитовОбъекта[КлючИЗначение.Ключ]["СуммаДокумента"] + " КАК СуммаДокумента,
		|" + КэшРеквизитовОбъекта[КлючИЗначение.Ключ]["Валюта"] + "         КАК Валюта,
		|ВЫБОР КОГДА Проведен ТОГДА 14 КОГДА ПометкаУдаления ТОГДА 13 ИНАЧЕ 12 КОНЕЦ КАК ИндексКартинки,
		|	#Представление
		|ИЗ
		|	" + КлючИЗначение.Ключ + "
		|ГДЕ
		|	Ссылка В (&" + ИмяОбъекта + ")";
		
		Запрос.УстановитьПараметр(ИмяОбъекта, КлючИЗначение.Значение);
		
		МассивДопРеквизитов = Новый Массив;
		ДополнитьТекстЗапросаПоРеквизитамОбъекта(ТекстПоТипуОбъекта, МассивДопРеквизитов);
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", " ВЫБРАТЬ ", " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + ТекстПоТипуОбъекта;
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + ТекстЗапроса + ТекстЗапросаКонец;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДобавитьСтрокуВДерево(СтрокиДерева, Выборка);
		
		Если Не ДобавляемыйОбъектИмеетсяСредиРодителей(ДеревоРодитель, Выборка.Ссылка) Тогда
			ВывестиПодчиненныеОбъекты(Выборка.Ссылка, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКэшМетаданных(МетаданныеОбъекта, ИмяОбъекта,КэшРеквизитовОбъекта)
	
	ЭтаОбработка = ЭтаОбработка();
	
	РеквизитыДокумента = КэшРеквизитовОбъекта[ИмяОбъекта];
	
	Если РеквизитыДокумента = Неопределено Тогда
		
		РеквизитыДокумента = Новый Соответствие;
		ЯвляетсяДокументом = ЭтаОбработка.ЭтоДокумент(МетаданныеОбъекта);
		
		ИмяРеквизитаСуммаДокумента = "СуммаДокумента";
		
		Если ЯвляетсяДокументом И МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизитаСуммаДокумента) <> Неопределено Тогда
			РеквизитыДокумента.Вставить("СуммаДокумента", ИмяРеквизитаСуммаДокумента);
		Иначе
			РеквизитыДокумента.Вставить("СуммаДокумента", "NULL");
		КонецЕсли;
		
		ИмяРеквизитаВалюта = "Валюта";
		
		Если ЯвляетсяДокументом И МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизитаВалюта) <> Неопределено Тогда
			РеквизитыДокумента.Вставить("Валюта", ИмяРеквизитаВалюта);
		Иначе
			РеквизитыДокумента.Вставить("Валюта", "NULL");
		КонецЕсли;
		
		Если ЯвляетсяДокументом Тогда
			РеквизитыДокумента.Вставить("Проведен", "Проведен");
		Иначе
			РеквизитыДокумента.Вставить("Проведен", "Ложь");
		КонецЕсли;
		
		Если ЯвляетсяДокументом Тогда
			РеквизитыДокумента.Вставить("Дата", "Дата");
		Иначе
			РеквизитыДокумента.Вставить("Дата", "NULL");
		КонецЕсли;
		
		КэшРеквизитовОбъекта.Вставить(ИмяОбъекта, РеквизитыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТекстЗапросаПоРеквизитамОбъекта(ТекстЗапроса, МассивРеквизитов)
	
	ТекстПредставление = "Представление КАК Представление";
	
	Для Инд = 1 По 3 Цикл
		
		ТекстПредставление = ТекстПредставление + ",
			|	" + ?(МассивРеквизитов.Количество() >= Инд,МассивРеквизитов[инд - 1],"NULL") + " Как ДополнительныйРеквизит" + Инд;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Представление", ТекстПредставление);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуОткрытьСтрокуВРедактореЗаписи(ИмяСпискаЭлементов, ТипДопКоманды)
	
	ИмяКоманды = ЭтаОбработка().ИмяДополнительнойКомандыСпискаЭлементов(ИмяСпискаЭлементов, ТипДопКоманды);
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие = "КомандаОткрытьСтрокуВРедактореЗаписи";
	Команда.Подсказка = "Редактировать строку";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяСпискаЭлементов].КоманднаяПанель);
	
	Элемент.ИмяКоманды = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок = "Редактировать строку";
	Элемент.Отображение = ОтображениеКнопки.Картинка;
	Элемент.Картинка = Элементы.КартинкаРедактироватьСтроку.Картинка;
	
КонецПроцедуры

&НаСервере
Процедура СнятьПометкуУдаления(ПометкаУдаленияСнята = Ложь)
	
	ПометкаУдаленияСнята = Ложь;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ДанныеОбъекта = ОбъектБазы.ПолучитьОбъект();
	ДанныеОбъекта.УстановитьПометкуУдаления(Ложь);
	
	ПометкаУдаленияСнята = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаления(ПометкаУдаленияУстановлена = Ложь)
	
	ПометкаУдаленияУстановлена = Ложь;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ДанныеОбъекта = ОбъектБазы.ПолучитьОбъект();
	ДанныеОбъекта.УстановитьПометкуУдаления(Истина);
	
	ПометкаУдаленияУстановлена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбъектБазы(УдалениеВыполнено = Ложь, ПредставлениеОбъекта = "")
	
	УдалениеВыполнено = Ложь;
	ПредставлениеОбъекта = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПредставлениеОбъекта = Строка(ОбъектБазы);
	
	ОбъектБазыДляУдаления = ОбъектБазы.ПолучитьОбъект();
	ОбъектБазыДляУдаления.Удалить();
	
	УдалениеВыполнено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьУдалитьИзмененияНаУзле(Узел, ФлРегистрации, ИзмВыполнено)
	
	ИзмВыполнено = Ложь;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ФлРегистрации = 1 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, ОбъектБазы);
	Иначе
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ОбъектБазы);
	КонецЕсли;
	
	ИзмВыполнено = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Функции

&НаСервере
Функция ЭтаОбработка()
	
	Результат = РеквизитФормыВЗначение("Объект");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗаголовкаФормы()
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("%1 %2", "(...)", ОбъектБазы);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяРеквизитаФормыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку(
		"%1" + РЧИ
		+ "%2", 
		ТипТаблицы, 
		ИмяТаблицы
	);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСпискаТаблицыОбъектаКонфигурации(ТипТаблицы, ИмяТаблицы)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если (ТипТаблицы = "ТабличнаяЧасть") Тогда
		Результат = ТекстЗапросаСпискаТаблицыДанныхОбъектаКонфигурации(ТипТаблицы, ИмяТаблицы);
	ИначеЕсли (ТипТаблицы = "РегистрБухгалтерии") Тогда
		Результат = ТекстЗапросаТаблицыДвиженийРегистраБухгалтерииОбъектаКонфигурации(ИмяТаблицы);
	Иначе
		Результат = ТекстЗапросаТаблицыДвиженийОбъектаКонфигурации(ТипТаблицы, ИмяТаблицы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует текст запроса для отображения списка указанного объекта конфигурации.
//
// Параметры:
//	ТипТаблицы - Строка, тип таблицы (например: "РегистрБухгалтерии"). 
//	ИмяТаблицы - Строка, имя таблицы (например: "ХозрасчетныйОбычныйКорр3Субконто").
//
// Возвращаемое значение:
//	Строка. Текст запроса списка таблицы.
//	
&НаСервере
Функция ТекстЗапросаСпискаТаблицыДанныхОбъектаКонфигурации(ТипТаблицы,
	ИмяТаблицы)
	
	Результат = "";
	
	ЭтаОбработка = ЭтаОбработка();
	
	МетаданныеОбъекта = ОбъектБазы.Метаданные();
	
	ПолноеИмяТаблицы = ЭтаОбработка.ПолноеИмяТабличнойЧастиОбъектаМетаданных(МетаданныеОбъекта, ИмяТаблицы);
	МетаданныеТабличнойЧасти = МетаданныеОбъекта["ТабличныеЧасти"][ИмяТаблицы];
	
	// Общие переменные.
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ЗапросСхемы.Операторы[0];
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	// Добавить источник в запрос.
	Оператор.Источники.Добавить(ПолноеИмяТаблицы, "Т");
	
	// Добавить поля в запрос.
	Для Каждого СтандартныйРеквизит Из МетаданныеТабличнойЧасти.СтандартныеРеквизиты Цикл
		
		СинонимПоля = ТипТаблицы + РЧИ + ИмяТаблицы + РЧИ + СтандартныйРеквизит.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(СтандартныйРеквизит.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеТабличнойЧасти.Реквизиты Цикл
		
		СинонимПоля = ТипТаблицы + РЧИ + ИмяТаблицы + РЧИ + Реквизит.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(Реквизит.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Оператор.Отбор.Добавить("Т.Ссылка = &Ссылка");
	
	Результат = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаТаблицыДвиженийРегистраБухгалтерииОбъектаКонфигурации(ИмяРегистраБухгалтерии)
	
	Результат = "";
	
	ЭтаОбработка = ЭтаОбработка();
	
	МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросВыбораСхемыЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	
	// Добавить источник в запрос.
	ПолноеИмяТаблицыРегистра = ЭтаОбработка.ПодставитьПараметрыВСтроку("РегистрБухгалтерии.%1.ДвиженияССубконто", ИмяРегистраБухгалтерии);
	ОператорВыбрать = ЗапросВыбораСхемыЗапроса.Операторы[0];
	ОператорВыбрать.Источники.Добавить(ПолноеИмяТаблицыРегистра, "Т");
	
	// Добавить поля в запрос.
	
	// Стандартные реквизиты.
	Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
		
		Если ЭтоПолеСубконто(СтандартныйРеквизит.Имя)
			Или ЭтоПолеВидаСубконто(СтандартныйРеквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(ЗапросВыбораСхемыЗапроса, ОператорВыбрать, ИмяРегистраБухгалтерии, СтандартныйРеквизит.Имя);
		
	КонецЦикла;
	
	// ... получить корреспондирющие поля.
	КоррПоляРегистра = ЭтаОбработка.ПоляРегистраБухгалтерииДтКт(ИмяРегистраБухгалтерии);
	
	// Измерения.
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		ТипОбработки = "";
		Если Не (КоррПоляРегистра.Измерения.Найти(Измерение.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(
			ЗапросВыбораСхемыЗапроса, 
			ОператорВыбрать, 
			ИмяРегистраБухгалтерии, 
			Измерение.Имя, 
			ТипОбработки
		);
		
	КонецЦикла;
	
	// Добавить счета.
	Для каждого ОписаниеСчета Из КоррПоляРегистра.Счета Цикл
		
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(
			ЗапросВыбораСхемыЗапроса, 
			ОператорВыбрать, 
			ИмяРегистраБухгалтерии, 
			ОписаниеСчета.ИмяРеквизитаСчета
		);
		
	КонецЦикла;
	
	// Добавить виды субконто.
	ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(
		ЗапросВыбораСхемыЗапроса, 
		ОператорВыбрать, 
		ИмяРегистраБухгалтерии, 
		, 
		"СубконтоДтКт", 
		КоррПоляРегистра.МаксКоличествоСубконто
	);
	
	// Ресурсы.
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		ТипОбработки = "";
		Если Не (КоррПоляРегистра.Ресурсы.Найти(Ресурс.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(ЗапросВыбораСхемыЗапроса, ОператорВыбрать, ИмяРегистраБухгалтерии, Ресурс.Имя, ТипОбработки);
		
	КонецЦикла;
	
	// Реквизиты.
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(ЗапросВыбораСхемыЗапроса, ОператорВыбрать, ИмяРегистраБухгалтерии, Реквизит.Имя);
	КонецЦикла;
	
	ОператорВыбрать.Отбор.Добавить("Т.Регистратор = &Ссылка");
	
	Результат = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаТаблицыДвиженийОбъектаКонфигурации(ТипТаблицы, ИмяТаблицы)
	
	Результат = "";
	
	Если ТипТаблицы = "РегистрНакопления" Тогда
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяТаблицы];
	ИначеЕсли ТипТаблицы = "РегистрСведений" Тогда
		МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяТаблицы];
	ИначеЕсли ТипТаблицы = "РегистрРасчета" Тогда
		МетаданныеРегистра = Метаданные.РегистрыРасчета[ИмяТаблицы];
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	
	Оператор = ЗапросСхемы.Операторы[0];
	
	// Добавить источник в запрос.
	ПолноеИмяТаблицыРегистра = ТипТаблицы + "." + ИмяТаблицы;
	Оператор.Источники.Добавить(ПолноеИмяТаблицыРегистра, "Т");
	
	// Добавить поля в запрос.
	Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
		
		СинонимПоля = ТипТаблицы + Объект.Система_РазделительЧастейИмен + ИмяТаблицы
		+ Объект.Система_РазделительЧастейИмен + СтандартныйРеквизит.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(СтандартныйРеквизит.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		СинонимПоля = ТипТаблицы + Объект.Система_РазделительЧастейИмен + ИмяТаблицы
		+ Объект.Система_РазделительЧастейИмен + Измерение.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(Измерение.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		
		СинонимПоля = ТипТаблицы + Объект.Система_РазделительЧастейИмен + ИмяТаблицы
		+ Объект.Система_РазделительЧастейИмен + Реквизит.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(Реквизит.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		СинонимПоля = ТипТаблицы + Объект.Система_РазделительЧастейИмен + ИмяТаблицы
		+ Объект.Система_РазделительЧастейИмен + Ресурс.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(Ресурс.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Оператор.Отбор.Добавить("Т.Регистратор = &Ссылка");
	
	Результат = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Результат;
	
КонецФункции

// Имя реквизита формы колонки табличной части.
//
// Параметры:
//	ТипТаблицы - Строка, имя табличной части (например: "ТабличнаяЧасть"). 
//	ИмяТаблицы - Строка, имя таблицы (например: "Товары").
//	ИмяРеквизитаТаблицы - Строка, имя реквизита таблицы (например: "Номенклатура").
//
// Возвращаемое значение:
//	Строка. Имя реквизита формы колонки таблицы данных объекта (например: "Товары_Номенклатура").
//
&НаСервере
Функция ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипТаблицы, ИмяТаблицы,
	ИмяРеквизитаТаблицы)
	
	Результат = "";
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	Результат = ТипТаблицы + РЧИ + ИмяТаблицы + РЧИ + ИмяРеквизитаТаблицы;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяСтраницыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтаОбработка = ЭтаОбработка();
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	Результат = ЭтаОбработка.ПодставитьПараметрыВСтроку("Страница" + РЧИ + "%1"
	+ РЧИ + "%2", ТипТаблицы, ИмяТаблицы);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТаблицаОбъектаУжеОтображена(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяТаблицы)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяРеквизита = ИмяРеквизитаФормыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяРеквизита, Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтаФорма);
	
	Если (СтруктураПоиска[ИмяРеквизита] = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТаблицаДвиженийОбъектаУжеОтображена(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ТипТаблицы)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(ИмяТаблицы)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	РеквизитФормы = РеквизитФормыТаблицыДвиженийОбъекта(ТипТаблицы, ИмяТаблицы);
	
	Результат = Не (РеквизитФормы = Неопределено);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитФормыТаблицыДвиженийОбъекта(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ТипТаблицы)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(ИмяТаблицы)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяРеквизита = ИмяРеквизитаФормыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяРеквизита, Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтаФорма);
	
	Результат = СтруктураПоиска[ИмяРеквизита];
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Функция ЭлементФормыСвязаннойТаблицыДанныхОбъекта(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ТипТаблицы)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(ИмяТаблицы)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#КонецОбласти
	
	// Пока считаем что имя элемента совпадает с именем связанного реквизита,
	// иначе запутаемся совсем.
	ИмяЭлемента = ИмяРеквизитаФормыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы);
	
	Результат = Элементы.Найти(ИмяЭлемента);
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Функция КоличествоЗаписейПоРегистру(МетаданныеРегистра)
	
	Результат = 0;
	ПустойРезультат = 0;
	
	#Область Предусловия
	
	Если МетаданныеРегистра = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
		ИмяТипаРегистра = "РегистрНакопления";
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра) Тогда
		ИмяТипаРегистра = "РегистрСведений";
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистра) Тогда
		ИмяТипаРегистра = "РегистрБухгалтерии";
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеРегистра) Тогда
		ИмяТипаРегистра = "РегистрРасчета";
	Иначе
		Возврат ПустойРезультат;
	КонецЕсли;
	
	ТекстЗапроса = ЭтаОбработка().ПодставитьПараметрыВСтроку("ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	%1.%2 КАК Т
	|ГДЕ
	|	Т.Регистратор = &Регистратор", ИмяТипаРегистра, МетаданныеРегистра.Имя);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", ОбъектБазы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.Количество;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки)
	
	Результат = ЭтаОбработка().ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СсылкаНаОбъект()
	
	Результат = Неопределено;
	ПустойРезультат = Неопределено;
	
	Попытка
		Результат = ОбъектБазы.Ссылка;
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоПолеСубконто(ИмяПоляРегистраБухгалтерии)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяПоляРегистраБухгалтерии)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не (Лев(ИмяПоляРегистраБухгалтерии, СтрДлина("Субконто")) = "Субконто") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЭтоПолеВидаСубконто(ИмяПоляРегистраБухгалтерии)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяПоляРегистраБухгалтерии) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не (Лев(ИмяПоляРегистраБухгалтерии, СтрДлина("ВидСубконто")) = "ВидСубконто") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СтруктураПоляСубконто(Знач ИмяПоляСубконто)
	
	Результат = Новый Структура("ИмяПоля, НомерСубконто");
	Результат.ИмяПоля = "Субконто";
	Результат.НомерСубконто = СтрЗаменить(ИмяПоляСубконто, "Субконто", "");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтруктураПоляВидаСубконто(Знач ИмяПоляВидаСубконто)
	
	Результат = Новый Структура("ИмяПоля, НомерСубконто");
	Результат.ИмяПоля = "ВидСубконто";
	Результат.НомерСубконто = СтрЗаменить(ИмяПоляВидаСубконто, "ВидСубконто", "");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьСтрокуВДерево(СтрокиДерева, Выборка)
	
	НоваяСтрока = СтрокиДерева.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Ссылка, Представление, Проведен, ПометкаУдаления, ИндексКартинки");
	
	НоваяСтрока.Представление = ПредставлениеОбъектаДляВыводаВОтчет(Выборка);
	НоваяСтрока.КоличествоЗаписей = 1;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Формирует представление документа для вывода в табличный документ.
//
// Параметры:
//  Выборка  - ВыборкаИзРезультатаЗапроса или ДанныеФормыЭлементДерева - набор данных
//             на основании которого формируется представление.
//
// Возвращаемое значение:
//   Строка   - сформированное представление.
//
&НаСервере
Функция ПредставлениеОбъектаДляВыводаВОтчет(Выборка)
	
	ПредставлениеОбъекта = Выборка.Представление;
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Определяет наличие документа среди родителей строки дерева, которая возможно будет добавлена.
//
// Параметры:
//  СтрокаРодитель  - ДанныеФормыДерево,ДанныеФормыЭлементДерева - родитель, для 
//                 которого предполагается добавить строку дерева.
//  ИскомыйОбъект  - Ссылка - ссылка на объект метаданных, на наличие которого выполняется проверка.
//
// Возвращаемое значение:
//   Булево   - Истина если найден, Ложь в обратном случае.
//
&НаСервере
Функция ДобавляемыйОбъектИмеетсяСредиРодителей(СтрокаРодитель,ИскомыйОбъект)
	
	Если ИскомыйОбъект = ОбъектБазы Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаРодитель) = Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	ТекущийРодитель = СтрокаРодитель;
	Пока ТекущийРодитель <> Неопределено Цикл
		
		Если ТекущийРодитель.Ссылка = ИскомыйОбъект Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьДеревоЗначенийИзXMLСтроки(XMLСтрока)
	
	ЧтениеXML = Новый ЧтениеXML;
	
	ЧтениеXML.УстановитьСтроку(XMLСтрока);
	ЧтениеXML.Прочитать();
	
	РезультатДерево = Новый ДеревоЗначений;
	РезультатДерево.Колонки.Добавить("Узел");
	РезультатДерево.Колонки.Добавить("Значение");
	
	МассивОткрытыхСтрок = Новый Массив;
	
	ПоследняяОткрытаяСтрока = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			Если МассивОткрытыхСтрок.Количество() Тогда
				_Родитель = МассивОткрытыхСтрок[МассивОткрытыхСтрок.Количество()-1];
			Иначе
				_Родитель = РезультатДерево;
			КонецЕсли;
			
			ПоследняяОткрытаяСтрока = _Родитель.Строки.Добавить();
			ПоследняяОткрытаяСтрока.Узел = ЧтениеXML.Имя;
			МассивОткрытыхСтрок.Добавить(ПоследняяОткрытаяСтрока);
			
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
			
			ПоследняяОткрытаяСтрока.Значение = ЧтениеXML.Значение;
			
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
			
			Если МассивОткрытыхСтрок.Количество() Тогда
				МассивОткрытыхСтрок.Удалить(МассивОткрытыхСтрок.Количество()-1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатДерево;
	
КонецФункции 

&НаСервере
Функция ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды)
	
	Возврат ЭтаОбработка().ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды);
	
КонецФункции

&НаСервере
Функция ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды)
	
	Возврат ЭтаОбработка().ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды);
	
КонецФункции

&НаСервере
Функция НавигационнаяСсылкаНаУзелПланаОбмена(УзелПланаОбмена) Экспорт
	
	Возврат ЭтаОбработка().НавигационнаяСсылкаНаУзелПланаОбмена(УзелПланаОбмена);
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектыПоКритериюОтбора(ЗначениеКритерияОтбора)
	
	Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязанныеДокументы.Ссылка
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы";
		
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерияОтбора);
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
